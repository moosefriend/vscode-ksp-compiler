File,Page No,Line No,Headline,Category,Name,Parameter List,Description,Remarks,Examples,See Also,Source
KSP_Reference_Manual_Fixed.txt.py,33,1556,4. Variables,make_instr_persistent(),make_instr_persistent,variable,Retains the value of a variable within the instrument only.,"- make_instr_persistent() is similar to make_persistent(), however the value of a
variable is only saved with the instrument, not with snapshots. It can be used to prevent UI
elements from being changed when loading snapshots.","on init
    set_snapshot_type(1)    { init callback not executed upon snapshot loading }

    declare ui_knob $knob_1 (0, 2, 1)
    set_text($knob_1, ""Pers"")
    make_persistent($knob_1)

    declare ui_knob $knob_2 (0, 2, 1)
    set_text($knob_2, ""Inst Pers"")
    make_instr_persistent($knob_2)

    declare ui_knob $knob_3 (0, 2, 1)
    set_text($knob_3, ""Not Pers"")
end on
The second knob will not be changed when loading snapshots.","read_persistent_var()
make_persistent()
set_snapshot_type()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,34,1591,4. Variables,make_persistent(),make_persistent,variable,Retains the value of a variable with the instrument and snapshot.,"- The state of the variable is saved not only with the instrument,multi or host chunk, but also
when a script is saved as a Kontakt preset (.nkp file).
- The state of the variable is read at the end of the init callback. To load a stored value manually
within the init callback, insert read_persistent_var() before using the stored value.
- You can also use the on persistence_changed callback for retrieving the values of
persistent variables.
- When updating script code by replacing old code with new one, the values of persistent
variables that have identical names will be retained.
- Sometimes, when working on more complex scripts, you might want to flush the values of
persistent variables by resetting the script. You can do this by loading the - INIT Script - preset
from the Script Editor's Preset menu, then applying your code again.","on init
    declare ui_knob $Preset (1, 10, 1)
    make_persistent($Preset)
end on
User interface elements, such as knobs, should usually retain their value when reloading the
instrument.","read_persistent_var()
on persistence_changed
make_instr_persistent()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,35,1624,4. Variables,read_persistent_var(),read_persistent_var,variable,Instantly reloads the value of a variable that was saved via the make_persistent() command.,"- This command can only be used within the on init callback.
- You can also use the on persistence_changed callback for retrieving the values of
persistent variables.","on init
    declare ui_label $label (1, 1)
    declare ui_button $button
    set_text($button, ""$a := 10000"")

    declare $a
    make_persistent($a)
    { read_persistent_var($a) }
    set_text($label, $a)
end on

on ui_control ($button)
    $a := 10000
    set_text($label, $a)
end on
After applying this script, click on the button and then save and close the NKI. After reloading it,
the label will display 0 because the value of $a is initialized at the very end of the init callback.
Now remove the comment around read_persistent_var and apply the script again to see the
difference.","make_persistent()
on persistence_changed",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,36,1662,4. Variables,watch_var(),watch_var,variable,Sends an event to the Creator Tools KSP Log for every change of the watched variable’s value.,"- This command can only be used within the on init callback.
- This command has no effect on Kontakt’s status bar – the events only appear in Creator Tools.
- This command does not work with built-in variables ($ENGINE_UPTIME, $NOTE_HELD,
$KSP_TIMER, etc.)","on init
    declare $intVar

    watch_var($intVar)
    make_persistent($intVar)
end on

on note
    $intVar := $EVENT_VELOCITY
end on
Try playing some notes while having Creator Tools running. Make sure you have the KSP Variables or
KSP Log panel focused.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,37,1689,4. Variables,watch_array_idx(),watch_array_idx,"array,array_idx",Sends an event to the Creator Tools KSP Log for every change of the watched array index’s value.,"- This command can only be used within the on init callback.
- This command has no effect on Kontakt’s status bar – the events only appear in Creator Tools.
- This command does not work with built-in array variables (%KEY_DOWN, %CC, %EVENT_PAR,
etc.).","on init
    declare %mykeys[128]

    watch_array_idx(%mykeys, 60)
    watch_array_idx(%mykeys, 61)
    watch_array_idx(%mykeys, 62)
    watch_array_idx(%mykeys, 63)
    watch_array_idx(%mykeys, 64)

    declare ui_button $Save
    declare ui_button $Load
end on

on note
    %mykeys[$EVENT_NOTE] := $EVENT_VELOCITY
end on

on ui_control($Save)
    save_array(%mykeys, 0)
end on

on ui_control($Load)
    load_array(%mykeys, 0)
end on
Try playing some notes or clicking on the save and load buttons while having Creator Tools running.
Make sure you have the KSP Variables or KSP Log panel focused.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,44,1888,5. Arithmetic Commands & Operators,random(),random,"min,max",Generates a random integer between (and including) <min> and <max>.,,"on init
    declare $rnd_amt
    declare $new_vel
end on

on note
    $rnd_amt := $EVENT_VELOCITY * 10 / 100
    $new_vel := random($EVENT_VELOCITY - $rnd_amt, $EVENT_VELOCITY + $rnd_amt)

    { mirror invalid velocity values into the allowed velocity range }
    if ($new_vel > 127)
        $new_vel := 127 - ($new_vel mod 127)
    end if

    if ($new_vel < 1)
        $new_vel := 1 + abs($new_vel)
    end if

    change_velo($EVENT_ID, $new_vel)
end on
Randomly changing velocities by ±10 percent.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,45,1919,5. Arithmetic Commands & Operators,real(),real,integer-value,Converts an integer value into a real number.,,"on init
    declare ~velocity_disp
end on

on note
    ~velocity_disp := real($EVENT_VELOCITY) / 127.0
    message(~velocity_disp)
end on
Displays the event velocity in the range from 0.0 to 1.0.",int(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,46,1941,5. Arithmetic Commands & Operators,int(),int,real-value,Converts a real number into an integer.,"- Using this command without any rounding function will cause the real value to be truncated, so
performing this function with real values 2.2 and 2.8 will both return an integer value of 2
- Be aware that this command reduces precision from 64-bit to 32-bit, which means that valid
real numbers outside of 32-bit signed integer range (-2147483648 ... 2147483647) will not be
properly converted, since they end up in overflow.","on init
    declare $test_int
    declare ~test_real := 2.8

    $test_int := int(~test_real)
    message($test_int)
end on
Converting a variable from real to integer and then displaying it.","real()
Rounding Commands: ceil(), floor(), round()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,47,1969,5. Arithmetic Commands & Operators,msb(),msb,value,Returns the most significant byte portion of a 14-bit value.,,"on rpn
    message(msb($RPN_VALUE))
end on
Commonly used when working with RPN and NRPN messages.
on init
    declare ui_value_edit $Value (0, 16383, 1)
end on

on ui_control ($Value)
    message(""MSB: "" & msb($Value) & "" - LSB: "" & lsb($Value))
end on
Understanding MSB and LSB.","lsb()
Events and MIDI: $RPN_ADDRESS, $RPN_VALUE",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,48,1995,5. Arithmetic Commands & Operators,lsb(),lsb,value,Returns the least significant byte portion of a 14-bit value.,,"on rpn
    message(lsb($RPN_VALUE))
end on
Commonly used when working with RPN and NRPN messages.
on init
    declare ui_value_edit $Value (0, 16383, 1)
end on

on ui_control ($Value)
    message(""MSB: "" & msb($Value) & "" - LSB: "" & lsb($Value))
end on
Understanding MSB and LSB.","msb()
Events and MIDI: $RPN_ADDRESS, $RPN_VALUE",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,75,2936,9. General Commands,disable_logging(),disable_logging,event-type,"Disables emission of messages, warnings or watched variable events to both the Kontakt status bar
and Creator Tools Debugger.
<event-type>: Which event type emission to deactivate. Available options:
- $NI_LOG_MESSAGE
- $NI_LOG_WARNING
- $NI_LOG_WATCHING",- This command is only available in the on init callback.,"on init
    disable_logging($NI_LOG_MESSAGE)
    disable_logging($NI_LOG_WARNING)
    disable_logging($NI_LOG_WATCHING)
end on
Keep the lines above commented out while development and bring them back in right before
shipping your product to disable any debugging-related content.","watch_var()
watch_array_idx()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,76,2965,9. General Commands,exit,exit,,Immediately stops a callback or exits a function.,"- exit is a very strong command. Be careful when using it, especially when dealing with larger
scripts.
- If used within a function, exit only exits the function, but not the entire callback.","on note
    if (not in_range($EVENT_NOTE, 60, 71))
        exit
    end if

    { from here on, only notes between C3 to B3 will be processed }
end on
Useful for quickly setting up key ranges to be affected by the script.","wait()
stop_wait()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,77,2992,9. General Commands,ignore_controller,ignore_controller,,"Ignores a MIDI Continuous Controller, Pitch Bend or Channel Aftertouch event in the on
controller callback, or Polyphonic Aftertouch event in the on poly_at callback.",,"on controller
    if ($CC_NUM = 1)
        ignore_controller
        set_controller($VCC_MONO_AT, %CC[1])
    end if
end on
Transform the modwheel into aftertouch.","ignore_event()
set_controller()
on controller",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,78,3015,9. General Commands,message(),message,variable-or-string,Displays text in the status line of Kontakt.,"- This command is intended to be used for debugging and testing while programming a script.
Since there is only one status line in Kontakt, it should not be used as a generic means of
communication with the user. Instead, use a label widget, or Debugger pane in Creator Tools.
- Make it a habit to write message("""") at the start of the on init callback. You can then be
sure that all previous messages (by the script or by the system) are deleted and you see only
new messages.","on init
    message(""Hello, world!"")
end on
The inevitable implementation of ""Hello, world!"" in KSP.
on note
    message(""Note "" & $EVENT_NOTE & "" received at "" &  $ENGINE_UPTIME & ""milliseconds"")
end on
Concatenating strings and expressions in a message() command.","reset_ksp_timer
ui_label
set_text()
Time and Transport: $ENGINE_UPTIME, $KSP_TIMER",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,79,3047,9. General Commands,note_off(),note_off,"event-id,time-offset","Sends a MIDI Note Off message for a specific note event ID.
<event-id>: Unique identification number of the note event to be changed.
<time-offset>: Optional argument defining the time offset in microseconds after which the
note off will actually happen.","- note_off() is equivalent to releasing a key, thus it will always trigger an on release
callback, as well as jump to the release portion of a volume envelope. Notice the difference
between note_off() and fade_out(), since fade_out() works on voice level.
- The optional time offset overwrites a potentially given event duration (i. e. in case the last
argument of play_note() command is larger than 0).","on controller
    if ($CC_NUM = 1)
        note_off($ALL_EVENTS)
    end if
end on
A custom ""All Notes Off"" implementation triggered by the modwheel.

on init
    declare polyphonic $new_id
end on

on note
    ignore_event($EVENT_ID)
    $new_id := play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, 0)
end on

on release
    ignore_event($EVENT_ID)
    wait(200000)
    note_off($new_id)
end on
Delaying the release of each note by 200 milliseconds.
on init
    declare ui_button $KillAll
end on

on note
    ignore_event($EVENT_ID)
    play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, 5000000)
end on

on ui_control ($KillAll)
    note_off($ALL_EVENTS, 0)
    $KillAll := 0
end on
Prior to Kontakt 8, we could not use the note_off() command on events which had a predefined
duration, like in the above case where it is 5 seconds. Using the optional time offset argument, we
can now do this.","fade_out()
play_note()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,81,3110,9. General Commands,play_note(),play_note,"note-number,velocity,sample-offset,duration","Generates a note event, i.e. a Note On message followed by a Note Off message.
<note-number>: The MIDI note number to be generated (0 ... 127).
<velocity>: Velocity of the generated note (1 ... 127).
<sample-offset>: Sample offset in microseconds.
<duration>: Length of the generated note in microseconds.
This parameter also accepts two special values:
-1: releasing the note which started the callback stops the sample.
0: the entire sample is played (be careful with looped samples, as they would
be played indefinitely in this case!).","- In DFD mode, the sample offset is dependent on the Sample Mod (S. Mod) value of the
respective zones (found in Kontakt's Wave Editor). Sample offset value greater than the zone's
S. Mod setting will be ignored and no sample offset will be applied.
- You can retrieve the event ID of the played note event in a variable by writing:
<variable> := play_note(<note>, <velocity>, <sample-offset>,
<duration>)","on note
    play_note($EVENT_NOTE + 12, $EVENT_VELOCITY, 0, -1)
end on
Harmonizes the played note with the upper octave.
on init
    declare $new_id
end on

on controller
    if ($CC_NUM = 64)
        if (%CC[64] = 127)
            $new_id := play_note(60, 100, 0, 0)
        else
            note_off($new_id)
        end if
    end if
end on
Trigger a MIDI note by pressing the sustain pedal.",note_off(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,82,3156,9. General Commands,set_controller(),set_controller,"controller,value","Sends a MIDI Continuous Controller, Pitch Bend or Channel Pressure message
<controller>: This parameter sets the type, and in the case of MIDI CCs, sets the CC number:
- A number (0 ... 127) designates a MIDI CC number
- $VCC_PITCH_BEND indicates MIDI Pitch Bend
- $VCC_MONO_AT indicates MIDI Channel Pressure (monophonic aftertouch)
<value>: The value of the specified controller.
- MIDI CC and Channel Pressure value range: 0 ... 127
- MIDI Pitch Bend value range: -8192 ... 8191","- set_controller() cannot be used in the on init callback. If for some reason you wat to
send a controller value upon instrument load, use on persistence_changed callback.

on note
    if ($EVENT_NOTE = 36)
        ignore_event($EVENT_ID)
        set_controller($VCC_MONO_AT, $EVENT_VELOCITY)
    end if
end on

on release
    if ($EVENT_NOTE = 36)
        ignore_event($EVENT_ID)
        set_controller($VCC_MONO_AT, 0)
    end if
end on
If you have a keyboard with no aftertouch, press C1 instead.",,"ignore_controller
Events and MIDI: $VCC_PITCH_BEND, $VCC_MONO_AT",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,83,3192,9. General Commands,set_note_controller(),set_note_controller,"controller,note-number,value","Sends a MIDI 2.0 Registered Per-Note Controller, MIDI 2.0 Assignable Per-Note Controller or MIDI 2.0
Per-Note Pitch Bend message.
<controller>: This parameter sets the message type
- A number between 0 ... 255 designates a MIDI 2.0 Registered Per-Note
Controller
- A number between 256 ... 511 designates a MIDI 2.0 Assignable Per-Note
Controller
- $VNC_PITCH_BEND indicates MIDI 2.0 Per-Note Pitch Bend
<note-number>: The MIDI note number for which the MIDI 2.0 per-note controller will be
generated (0 ... 127).
<value>: The value of the specified per-note controller.
- MIDI 2.0 Per-Note Controller value range: 0 ... 127
- MIDI 2.0 Per-Note Pitch Bend value range: -8192 ... 8191","- set_note_controller() cannot be used in the on init callback. If for some reason
you wat to send a controller value upon instrument load, use on persistence_changed
callback.
on init
    set_ui_height(3)

    declare $i
    declare %black[5] := (1, 3, 6, 8, 10)
    declare %key_id[128]

    declare ui_label $L (1, 1)
    declare ui_table %Active[61] (6, 1, 1)
    declare ui_table %BG[61] (6, 1, 1)
    declare ui_table %KB[61] (6, 1, -8191)

    set_control_par(get_ui_id(%KB), $CONTROL_PAR_HIDE, $HIDE_PART_BG .or.
$HIDE_PART_VALUE)
    set_control_par(get_ui_id(%KB), $CONTROL_PAR_WIDTH, 555)
    set_control_par(get_ui_id(%KB), $CONTROL_PAR_HEIGHT, 110)

    set_control_par(get_ui_id(%BG), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
    set_control_par(get_ui_id(%BG), $CONTROL_PAR_WIDTH, 555)
    set_control_par(get_ui_id(%BG), $CONTROL_PAR_HEIGHT, 110)
    set_control_par(get_ui_id(%BG), $CONTROL_PAR_BAR_COLOR, 0777777H)

    set_control_par(get_ui_id(%Active), $CONTROL_PAR_WIDTH, 555)
    set_control_par(get_ui_id(%Active), $CONTROL_PAR_HEIGHT, 110)
    set_control_par(get_ui_id(%Active), $CONTROL_PAR_BAR_COLOR, 0AAAAAAH)

    set_control_par(get_ui_id($L), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
    set_control_par(get_ui_id($L), $CONTROL_PAR_WIDTH, 560)
    set_control_par(get_ui_id($L), $CONTROL_PAR_FONT_TYPE, 19)

    set_text($L, ""C1                               "" & ...
                 ""C2                               "" & ...
                 ""C3                               "" & ...
                 ""C4                               "" & ...
                 ""C5                               "" & ...
                 ""C6"")

    while ($i < num_elements(%BG))
        if (search(%black, $i mod 12) # -1)
            %BG[$i] := 1
        end if

        inc($i)
    end while

    move_control_px($L, 55, 0)
    move_control_px(%BG, 62, 15)
    move_control_px(%Active, 62, 15)
    move_control_px(%KB, 62, 15)
end on

on note
    { make sure we only have one event per key }
    if (event_status(%key_id[$EVENT_NOTE]) = $EVENT_STATUS_NOTE_QUEUE)
        fade_out(%key_id[$EVENT_NOTE], 1000, 1)
    end if

    %key_id[$EVENT_NOTE] := $EVENT_ID

    set_note_controller($VNC_PITCH_BEND, $EVENT_NOTE, %KB[$EVENT_NOTE - 36])

    if (in_range($EVENT_NOTE, 36, 96))
        %Active[$EVENT_NOTE - 36] := 1
    end if
end on

on release
    if (in_range($EVENT_NOTE, 36, 96))
        %Active[$EVENT_NOTE - 36] := 0
    end if
end on

on ui_control (%KB)
    set_note_controller($VNC_PITCH_BEND, 36 + $NI_CONTROL_PAR_IDX,
%KB[$NI_CONTROL_PAR_IDX])
end on

on init
    declare const $BEND_RANGE := 2

    declare $i
    declare %events[128]
end on

on note
    %events[$EVENT_NOTE] := $EVENT_ID
end on

on note_controller
    if ($NC_NUM = $VNC_PITCH_BEND and in_range($NC_NOTE, 36, 96))
        change_tune(%events[$NC_NOTE], int(real($NC_VALUE) * 12.208522) *
$BEND_RANGE, 0)
    end if
end on
An example similar to the one for set_poly_at() command, however this one requires two
script slots: the first slot sends the MIDI 2.0 note controller messages, and the second acts upon
those messages by applying a custom per-note pitch bend change.",,"ignore_controller
Events and MIDI: $VNC_PITCH_BEND",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,86,3319,9. General Commands,set_poly_at(),set_poly_at,"note-number,value","Sends a MIDI Polyphonic Aftertouch message.
<note-number>: The MIDI note for which the Polyphonic Aftertouch messages will be generated
(0 ... 127).
<value>: The value of the Polyphonic Aftertouch message (0 ... 127).","- set_poly_at() cannot be used in the on init callback. If for some reason you wat to send
a Polyphonic Aftertouch message upon instrument load, use on persistence_changed
callback.
on init
    set_ui_height(3)

    declare $i
    declare %black[5] := (1, 3, 6, 8, 10)

    declare ui_label $L (1, 1)
    declare ui_table %Active[61] (6, 1, 1)
    declare ui_table %BG[61] (6, 1, 1)
    declare ui_table %KB[61] (6, 1, 127)

    set_control_par(get_ui_id(%KB), $CONTROL_PAR_HIDE, $HIDE_PART_BG .or. $HIDE_PART_VALUE)
    set_control_par(get_ui_id(%KB), $CONTROL_PAR_WIDTH, 555)
    set_control_par(get_ui_id(%KB), $CONTROL_PAR_HEIGHT, 110)

    set_control_par(get_ui_id(%BG), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
    set_control_par(get_ui_id(%BG), $CONTROL_PAR_WIDTH, 555)
    set_control_par(get_ui_id(%BG), $CONTROL_PAR_HEIGHT, 110)
    set_control_par(get_ui_id(%BG), $CONTROL_PAR_BAR_COLOR, 0777777H)

    set_control_par(get_ui_id(%Active), $CONTROL_PAR_WIDTH, 555)
    set_control_par(get_ui_id(%Active), $CONTROL_PAR_HEIGHT, 110)
    set_control_par(get_ui_id(%Active), $CONTROL_PAR_BAR_COLOR, 0AAAAAAH)

    set_control_par(get_ui_id($L), $CONTROL_PAR_HIDE, $HIDE_PART_BG)
    set_control_par(get_ui_id($L), $CONTROL_PAR_WIDTH, 560)
    set_control_par(get_ui_id($L), $CONTROL_PAR_FONT_TYPE, 19)

    set_text($L, ""C1                               "" & ...
                 ""C2                               "" & ...
                 ""C3                               "" & ...
                 ""C4                               "" & ...
                 ""C5                               "" & ...
                 ""C6"")

    while ($i < num_elements(%BG))
        if (search(%black, $i mod 12) # -1)
            %BG[$i] := 1
        end if

        inc($i)
    end while

    move_control_px($L, 55, 0)
    move_control_px(%BG, 62, 15)
    move_control_px(%Active, 62, 15)
    move_control_px(%KB, 62, 15)
end on

on note
    if (in_range($EVENT_NOTE, 36, 96))
        %Active[$EVENT_NOTE - 36] := 1
    end if
end on

on release
    if (in_range($EVENT_NOTE, 36, 96))
        %Active[$EVENT_NOTE - 36] := 0
    end if
end on

on ui_control (%KB)
    set_poly_at(36 + $NI_CONTROL_PAR_IDX, %KB[$NI_CONTROL_PAR_IDX])
end on

on poly_at
    if (in_range($POLY_AT_NUM, 36, 96))
        %KB[$POLY_AT_NUM - 36] := %POLY_AT[$POLY_AT_NUM]
    end if
end on
If you don't have a keyboard with polyphonic aftertouch, try using this table which sends these
events (in the standard 5 octave keyboard range). It will also double as a monitoring tool for
incoming polyphonic aftertouch messages!",,ignore_controller,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,88,3412,9. General Commands,set_rpn()/set_nrpn(),set_rpn,"address,value","Sends a MIDI RPN or NRPN message.
<address>: The RPN or NRPN address (0 ... 16383).
<value>: The value of the RPN or NRPN message (0 ... 16383).","- Kontakt cannot handle RPN or NRPN messages as external modulation sources. You can
however use these messages for simple inter-script communication.",,"on rpn/nrpn
set_controller()
msb()
lsb()
Events and MIDI: $RPN_ADDRESS, $RPN_VALUE",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,88,3412,9. General Commands,set_rpn()/set_nrpn(),set_nrpn,"address,value","Sends a MIDI RPN or NRPN message.
<address>: The RPN or NRPN address (0 ... 16383).
<value>: The value of the RPN or NRPN message (0 ... 16383).","- Kontakt cannot handle RPN or NRPN messages as external modulation sources. You can
however use these messages for simple inter-script communication.",,"on rpn/nrpn
set_controller()
msb()
lsb()
Events and MIDI: $RPN_ADDRESS, $RPN_VALUE",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,89,3432,9. General Commands,set_snapshot_type(),set_snapshot_type,type,"Configures the behavior of all five slots when a snapshot is saved or recalled.
<type>: The available types are:
0: The init callback will always be executed upon snapshot change, then the on
persistence_changed callback will be executed (default behavior).
1: the init callback will not be executed upon loading a snapshot, only the on
persistence_callback will be executed.
2: same as type 0, but only KSP variables are saved with the snapshot.
3: same as type 1, but only KSP variables are saved with the snapshot.","- This command acts globally, i.e. it can applied in any script slot.
- In snapshot types 1 and 3, values of persistent and instrument persistent variables are
preserved.
- Loading a snapshot always resets Kontakt's audio engine, i.e. audio is stopped and all active
events are deleted.","on init
    set_snapshot_type(1)

    declare ui_knob $knob_1 (0, 127, 1)
    set_text($knob_1, ""Knob"")
    make_persistent($knob_1)

    declare ui_button $gui_btn
    set_text($gui_btn, ""Page 1"")
end on

function show_gui()
    if ($gui_btn = 1)
        set_control_par(get_ui_id($knob_1), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
    else
        set_control_par(get_ui_id($knob_1), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
    end if
end function

on persistence_changed
    call show_gui()
end on

on ui_control ($gui_btn)
    call show_gui()
end on
Retaining the GUI upon loading snapshots.","on init
on persistence_changed",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,90,3489,10. Array Commands,array_equal(),array_equal,"array-variable,array-variable","Checks the values of two arrays. Returns 1 if all values are equal, 0 if not.",- This command does not work with arrays of real numbers.,"on init
    declare %array_1[10]
    declare %array_2[11]

    if (array_equal(%array_1, %array_2))
        message(""Arrays are not equal!"")
    else
        message(""Arrays are equal!"")
    end if
end on
This script will produce an error message as the two arrays don't have the same size.","sort()
num_elements()
search()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,91,3518,10. Array Commands,num_elements(),num_elements,array-variable,Returns the number of elements in an array.,"- With this function you can, e.g., check how many groups are affected by the current event, using num_elements(%GROUPS_AFFECTED).","on note
    message(num_elements(%GROUPS_AFFECTED))
end on
Outputs the number of groups that are playing when you press a key.","array_equal()
sort()
search()
Events and MIDI: %GROUPS_AFFECTED",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,92,3541,10. Array Commands,search(),search,"array-variable,value,from,to","Searches the specified array for the specified value (optionally within the range specified by <from>
and <to>) and returns the index of its first position. If the value is not found, the function returns -1.
<array-variable>: Array to be searched through
<value>: Value to be found in the specified array.
<from>: Optional argument which specifies the array index from which to start the
searching operation.
<to>: Optional argument which specifies the array index at which searching operation
will end.",- This command does not work with arrays of real numbers.,"on init
    declare ui_table %array[10] (2, 2, 5)
    declare ui_button $check

    set_text($check, ""Zero present?"")
end on

on ui_control ($check)
    if (search(%array, 0) = -1)
        message(""No"")
    else
        message(""Yes"")
    end if

    $check := 0
end on
Checking if a specific  value is present in an array.
on init
    declare const $SEARCH_FOR  := 54321
    declare const $SEARCH_FROM := 54000
    declare const $SEARCH_TO   := 55000

    declare $i
    declare %array[100000]

    declare ui_button $Check

    set_text($Check, $SEARCH_FOR & "" present?"")

    { fill the array with sequential numbers, just to have something to search
through }
    while ($i < num_elements(%array))
        %array[$i] := $i

        inc($i)
    end while
end on

on ui_control ($Check)
    if (search(%array, $SEARCH_FOR, $SEARCH_FROM, $SEARCH_TO) = -1)
        message(""No"")
    else
        message(""Yes"")
    end if

    $Check := 0
end on
Searching for a specific  value in a smaller part of a large array - much more performant than doing
the same thing with a while loop directly in KSP!","array_equal()
num_elements()
sort()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,94,3615,10. Array Commands,sort(),sort,"array-variable,direction,from,to","Sorts an array in ascending or descending order (optionally within the range specified by <from>
and <to>).
<array-variable>: The array to be sorted.
<direction>: When equal to 0, the array is sorted in ascending order.
When not equal to 0, the array is sorted in descending order.
<from>: Optional argument which specifies the array index from which to start the
sorting operation.
<to>: Optional argument which specifies the array index at which sorting operation
will end.",,"on init
    declare $count

    declare ui_button $Invert
    declare ui_table %array[128] (3, 3, 127)

    while ($count < 128)
        %array[$count] := $count

        inc($count)
    end while
end on

on ui_control ($Invert)
    sort(%array, $Invert)
end on
Quickly inverting a linear curve display.
on init
    declare const $ARRAY_SIZE := 32

    declare ui_table %T[$ARRAY_SIZE](6, 4, -100)
    declare ui_value_edit $From (1, $ARRAY_SIZE, 1)
    declare ui_value_edit $To (1, $ARRAY_SIZE, 1)
    declare ui_button $Randomize
    declare ui_button $Direction
    declare ui_button $SortAll
    declare ui_button $SortRange

    make_persistent(%T)
    make_persistent($From)
    make_persistent($To)

    $From := 4
    $To := 8
end on

on ui_control ($Randomize)
    $i := 0
    while ($i < num_elements(%T))
        %T[$i] := random(-100, 100)

        inc($i)
    end while

    $Randomize := 0
end on

on ui_control ($SortAll)
    sort(%T, $Direction)

    $SortAll := 0
end on

on ui_control ($SortRange)
    sort(%T, $Direction, $From, $To)

    $SortRange := 0
end on
Comparing sorting the whole array versus sorting a range within the array.","array_equal()
num_elements()
sort()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,96,3699,11. Engine Parameter Commands,get_mod_idx(),get_mod_idx,"group-index,mod-name","Returns the slot index of an internal modulator or external modulation slot.
<group-index>: The index of the group (see Index column in Monitor -> Groups pane in
Kontakt).
<mod-name>: The name of the internal (LFO, envelope, step modulator...) or external (velocity,
key position, mono aftertouch...) modulator.","- Each modulator has a predefined name, based on its type and the parameter it targets.
- This name can be changed by enabling developer options in Kontakt's Options → Developer
pane, then right-clicking on the modulator or modulator target strip.","on init
    declare $grp_idx := 0
    declare $env_idx

    $env_idx := get_mod_idx($grp_idx, ""VOL_ENV"")

    declare ui_knob $Attack (0, 1000000, 1)

    $Attack := get_engine_par($ENGINE_PAR_ATTACK, $grp_idx, $env_idx, -1)

    set_knob_unit($Attack, $KNOB_UNIT_MS)
    set_knob_label($Attack, get_engine_par_disp($ENGINE_PAR_ATTACK, $grp_idx,
$env_idx, -1))
end on

on ui_control ($Attack)
    set_engine_par($ENGINE_PAR_ATTACK, $Attack, $grp_idx, $env_idx, -1)
    set_knob_label($Attack, get_engine_par_disp($ENGINE_PAR_ATTACK, $grp_idx, $env_idx, -1))
end on
Controlling the attack time of the volume envelope of the first  group. Note: the envelope has been
manually renamed to ""VOL_ENV"".
on init
    declare $count
    declare $mod_idx

    $mod_idx := get_mod_idx(0, ""VEL_VOLUME"")

    declare ui_slider $VelAmt (0, 1000000)

    if ($mod_idx # $NI_NOT_FOUND)
        $VelAmt := get_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, 0, $mod_idx, -1)
    end if
    make_persistent($VelAmt)
end on

on ui_control ($VelAmt)
    $count := 0
    while($count < $NUM_GROUPS)
        $mod_idx := get_mod_idx($count, ""VEL_VOLUME"")

        if ($mod_idx # $NI_NOT_FOUND)
            set_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, $VelAmt, $count, $mod_idx, -1)
        end if

        inc($count)
    end while
end on
Creating a slider which controls the velocity to volume modulation intensity of all groups, if they
exist.","get_target_idx()
set_engine_par()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,98,3772,11. Engine Parameter Commands,get_target_idx(),get_target_idx,"group-index,mod-index,target-name","Returns the modulation target slot index of an internal modulator
<group-index>: The index of the group (see Index column in Monitor -> Groups pane in
Kontakt).
<mod-index>: The slot index of an internal modulator (LFO, envelope, step modulator...). Can
be retrieved with get_mod_idx().
<target-name>: The name of the modulation target slot.","- Each modulator has a predefined name, based on its type and the parameter it targets.
- This name can be changed by enabling developer options in Kontakt's Options → Developer
pane, then right-clicking on the modulator or modulator target strip.","on init
    declare $mod_idx
    declare $target_idx

    $mod_idx := get_mod_idx(0, ""FILTER_ENV"")
    $target_idx := get_target_idx(0, $mod_idx, ""FILTER_ENV > CUTOFF"")

    declare ui_knob $FilterEnv (-1000, 1000, 10)

    set_knob_unit($FilterEnv, $KNOB_UNIT_PERCENT)

    make_persistent($FilterEnv)
end on

on ui_control ($FilterEnv)
    if ($mod_idx # $NI_NOT_FOUND and $target_idx # $NI_NOT_FOUND)
        set_engine_par($ENGINE_PAR_MOD_TARGET_MP_INTENSITY, 500000 + ($FilterEnv * 500), 0, $mod_idx, $target_idx)
    end if
end on
Controlling the envelope to filter  cutoff modulation amount in the first  group. Note: the filter  envelope
has been manually renamed to ""FILTER_ENV"", and the target to ""FILTER_ENV > CUTOFF"".","get_mod_idx()
set_engine_par()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,99,3817,11. Engine Parameter Commands,get_engine_par(),get_engine_par,"parameter,group,slot,generic","Returns the value of a specific engine parameter.
<parameter>: Specifies the parameter by using one of the built-in engine parameter
constants.
<group>: The index (zero-based) of the group in which the specified parameter resides.
If the specified parameter resides on an Instrument level, enter -1.
Buses and Main FX also reside on Instrument level, so you must set <group> to
-1 if you want to address a bus.
<slot>: The slot index (zero-based) of the specified parameter. It applies only to group/
instrument effects, modulators and modulation intensities.
For group/instrument effects, this parameter specifies the slot in which the
effect resides (zero-based).
For modulators and modulation intensities, this parameters specifies the index
which you can retrieve by using get_mod_idx().
For all other applications, set this parameter to -1.
<generic>: This parameter applies to instrument effects and to internal modulators.
For instrument effects, this parameter distinguishes between:
$NI_SEND_BUS: Send Effect
$NI_INSERT_BUS: Insert Effect
$NI_MAIN_BUS: Main Effect
For buses, this parameter specifies the actual bus:
$NI_BUS_OFFSET + [0 ... 15] One of the 16 buses
For internal modulators, this parameter specifies the modulation slider which
you can retrieve by using get_target_idx().
For Flex Envelope, this parameter specifies which envelope
stage to target when using $ENGINE_PAR_FLEXENV_STAGE_TIME,
$ENGINE_PAR_FLEXENV_STAGE_LEVEL and
$ENGINE_PAR_FLEXENV_STAGE_SLOPE.
For Step Modulator, this parameter specifies which step value to target when
using $ENGINE_PAR_STEPSEQ_STEP_VALUE.
For all other applications, set this parameter to -1.",,"on init
    declare $i

    declare ui_label $label (2, 6)
    set_text($label,""Release Trigger Groups:"")

    while ($i < $NUM_GROUPS)
        if (get_engine_par($ENGINE_PAR_RELEASE_TRIGGER, $i, -1, -1) = 1)
            add_text_line($label, group_name($i) & "" (Index: "" & $i & "")"")
        end if

        inc($i)
    end while
end on

Output the name and index of release trigger group
on init
    declare ui_label $label (2, 6)
    declare ui_button $Refresh

    declare $i
    declare !effect_name[128]
    !effect_name[$EFFECT_TYPE_NONE] := ""None""
    !effect_name[$EFFECT_TYPE_PHASER] := ""Phaser""
    !effect_name[$EFFECT_TYPE_CHORUS] := ""Chorus""
    !effect_name[$EFFECT_TYPE_FLANGER] := ""Flanger""
    !effect_name[$EFFECT_TYPE_REVERB] := ""Reverb""
    !effect_name[$EFFECT_TYPE_DELAY] := ""Delay""
    !effect_name[$EFFECT_TYPE_IRC] := ""Convolution""
    !effect_name[$EFFECT_TYPE_GAINER] := ""Gainer""

    while ($i < 8)
        add_text_line($label, ""Slot: "" & $i + 1 & "": "" & ...
                      !effect_name[get_engine_par($ENGINE_PAR_SEND_EFFECT_TYPE, -1, $i, -1)])

        inc($i)
    end while
end on

on ui_control ($Refresh)
    set_text($label, """")

    while ($i < 8)
        add_text_line($label, ""Slot: "" & $i + 1 & "": "" & ...
                      !effect_name[get_engine_par($ENGINE_PAR_SEND_EFFECT_TYPE, -1, $i, -1)])

        inc($i)
    end while

    $Refresh := 0
end on
Output the effect types of all eight send effect slots.",Module Types and Subtypes,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,101,3911,11. Engine Parameter Commands,get_engine_par_disp(),get_engine_par_disp,"parameter,group,slot,generic","Returns the displayed value of a specific engine parameter, as a string.
<parameter>: Specifies the parameter by using one of the built-in engine parameter
constants.
<group>: The index (zero-based) of the group in which the specified parameter resides.
If the specified parameter resides on an Instrument level, enter -1.
Buses and Main FX also reside on Instrument level, so you must set <group> to
-1 if you want to address a bus.
<slot>: The slot index (zero-based) of the specified parameter. It applies only to group/
instrument effects, modulators and modulation intensities.
For group/instrument effects, this parameter specifies the slot in which the
effect resides (zero-based).
For modulators and modulation intensities, this parameters specifies the index
which you can retrieve by using get_mod_idx().
For all other applications, set this parameter to -1.
<generic>: This parameter applies to instrument effects and to internal modulators.
For instrument effects, this parameter distinguishes between:
$NI_SEND_BUS: Send Effect
$NI_INSERT_BUS: Insert Effect
$NI_MAIN_BUS: Main Effect
For buses, this parameter specifies the actual bus:
$NI_BUS_OFFSET + [0 ... 15] One of the 16 buses
For internal modulators, this parameter specifies the modulation slider which
you can retrieve by using get_target_idx().
For Flex Envelope, this parameter specifies which envelope
stage to target when using $ENGINE_PAR_FLEXENV_STAGE_TIME,
$ENGINE_PAR_FLEXENV_STAGE_LEVEL and
$ENGINE_PAR_FLEXENV_STAGE_SLOPE.
For Step Modulator, this parameter specifies which step value to target when
using $ENGINE_PAR_STEPSEQ_STEP_VALUE.
For all other applications, set this parameter to -1.",,"on init
    declare $i

    declare ui_label $label (2, 6)
    set_text($label, ""Group Volume Settings:"")

    while ($i < $NUM_GROUPS)
        add_text_line($label, group_name($i) & "": "" &
get_engine_par_disp($ENGINE_PAR_VOLUME, $i, -1, -1) & "" dB"")

        inc($i)
    end while
end on
Query the group volume settings in an instrument.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,103,3964,11. Engine Parameter Commands,get_engine_par_disp_ext(),get_engine_par_disp_ext,"parameter,value,group,slot,generic","Returns the display value of a specific engine parameter with an arbitrary value, as a string.
<parameter>: Specifies the parameter by using one of the built-in engine parameter
constants.
<value>: The value to which the specified parameter is set.
The range of values is always 0 to 1000000, except for switches, in which
case it is 0 or 1, and certain engine parameters which are stepped instead
of continuous. These will either have specific constants provided, or a generic
integer span of values, which will be separately noted in the Engine Parameters
section.
<group>: The index (zero-based) of the group in which the specified parameter resides.
If the specified parameter resides on an Instrument level, enter -1.
Buses and Main FX also reside on Instrument level, so you must set <group> to
-1 if you want to address a bus.
<slot>: The slot index (zero-based) of the specified parameter. It applies only to group/
instrument effects, modulators and modulation intensities.
For group/instrument effects, this parameter specifies the slot in which the
effect resides (zero-based).
For modulators and modulation intensities, this parameters specifies the index
which you can retrieve by using get_mod_idx().
For all other applications, set this parameter to -1.
<generic>: This parameter applies to instrument effects and to internal modulators.
For instrument effects, this parameter distinguishes between:
$NI_SEND_BUS: Send Effect
$NI_INSERT_BUS: Insert Effect
$NI_MAIN_BUS: Main Effect
For buses, this parameter specifies the actual bus:
$NI_BUS_OFFSET + [0 ... 15] One of the 16 buses
For internal modulators, this parameter specifies the modulation slider which
you can retrieve by using get_target_idx().
For Flex Envelope, this parameter specifies which envelope
stage to target when using $ENGINE_PAR_FLEXENV_STAGE_TIME,
$ENGINE_PAR_FLEXENV_STAGE_LEVEL and
$ENGINE_PAR_FLEXENV_STAGE_SLOPE.
For Step Modulator, this parameter specifies which step value to target when
using $ENGINE_PAR_STEPSEQ_STEP_VALUE.
For all other applications, set this parameter to -1.",,"on init
    declare $value

    declare ui_knob $Cutoff (0, 1000000, 1)
    declare ui_knob $Macro (0, 1000000, 10000)
    declare ui_knob $MacroAmt (-1000000, 1000000, 10000)

    $MacroAmt := -500000

    set_knob_defval($Cutoff, 1000000)
    set_knob_defval($MacroAmt, 0)

    set_knob_unit($Cutoff, $KNOB_UNIT_HZ)
    set_knob_unit($Macro, $KNOB_UNIT_PERCENT)
    set_knob_unit($MacroAmt, $KNOB_UNIT_PERCENT)

    make_persistent($Cutoff)
    make_persistent($Macro)
    make_persistent($MacroAmt)

    set_engine_par($ENGINE_PAR_EFFECT_TYPE, $EFFECT_TYPE_FILTER, -1, 0, $NI_INSERT_BUS)
end on

function SetCutoff()
    $value := int(real($Cutoff) + (real($Macro) * real($MacroAmt) * 1.0e-6))

    if ($value < 0)
        $value := 0
    end if

    if ($value > 1000000)
        $value := 1000000
    end if

    set_engine_par($ENGINE_PAR_CUTOFF, $value, -1, 0, $NI_INSERT_BUS)
    set_knob_label($Cutoff, get_engine_par_disp_ext($ENGINE_PAR_CUTOFF, $Cutoff, -1, 0, $NI_INSERT_BUS))
end function

on persistence_changed
    call SetCutoff()
end on

on ui_controls
    call SetCutoff()
end on
Query the baseline filter  cutoff value despite the actual engine parameter value being different, due to
the additional offset from a macro-style control.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,105,4057,11. Engine Parameter Commands,get_voice_limit(),get_voice_limit,voice-type,"Returns the voice limit for the Time Machine Pro sampler mode of the Source module.
<voice-type>: The voice type, can be one of the following:
- $NI_VL_TMPRO_STANDARD: Standard quality mode
- $NI_VL_TMPRO_HQ: High quality mode",,"on init
    declare ui_label $label (3, 2)

    add_text_line($label, ""Standard Voice Limit: "" & get_voice_limit($NI_VL_TMPRO_STANDARD))
    add_text_line($label, ""HQ Voice Limit: "" & get_voice_limit($NI_VL_TMPRO_HQ))
end on
Displaying TM Pro voice limits.",set_voice_limit(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,106,4079,11. Engine Parameter Commands,output_channel_name(),output_channel_name,output-number,"Returns the channel name for the specified output.
<output-number>: The number of the output channel (zero-based, i.e. the first output is 0).",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,107,4112,11. Engine Parameter Commands,output_channel_name(),set_engine_par,"parameter,value,group,slot,generic","Controls various Kontakt engine parameters.
<parameter>: Specifies the parameter by using one of the built-in engine parameter
constants.
<value>: The value to which the specified parameter is set.
The range of values is always 0 to 1000000, except for switches, in which
case it is 0 or 1, and certain engine parameters which are stepped instead
of continuous. These will either have specific constants provided, or a generic
integer span of values, which will be separately noted in the Engine Parameters
section.
<group>: The index (zero-based) of the group in which the specified parameter resides.
If the specified parameter resides on an Instrument level, enter -1.
Buses and Main FX also reside on Instrument level, so you must set <group> to
-1 if you want to address a bus.
<slot>: The slot index (zero-based) of the specified parameter. It applies only to group/
instrument effects, modulators and modulation intensities.
For group/instrument effects, this parameter specifies the slot in which the
effect resides (zero-based).
For modulators and modulation intensities, this parameters specifies the index
which you can retrieve by using get_mod_idx().
For all other applications, set this parameter to -1.
<generic>: This parameter applies to instrument effects and to internal modulators.
For instrument effects, this parameter distinguishes between:
$NI_SEND_BUS: Send Effect
$NI_INSERT_BUS: Insert Effect
$NI_MAIN_BUS: Main Effect
For buses, this parameter specifies the actual bus:
$NI_BUS_OFFSET + [0 ... 15] One of the 16 buses
For internal modulators, this parameter specifies the modulation slider which
you can retrieve by using get_target_idx().
For Flex Envelope, this parameter specifies which envelope
stage to target when using $ENGINE_PAR_FLEXENV_STAGE_TIME,
$ENGINE_PAR_FLEXENV_STAGE_LEVEL and
$ENGINE_PAR_FLEXENV_STAGE_SLOPE.
For Step Modulator, this parameter specifies which step value to target when
using $ENGINE_PAR_STEPSEQ_STEP_VALUE.
For all other applications, set this parameter to -1.","- Certain engine parameters are executed asynchronously (most prominently: setting effect
type and subtype). When changing the effect slot contents from the on init callback, it is
executed synchronously, which can greatly affect the initial loading time of the instrument,
especially if this is done for a large amount of effect slots. It is advisable to move any such
operations to on persistence_changed callback.","on init
    declare ui_knob $Volume (0, 1000000, 1000000)
end on

on ui_control ($Volume)
    set_engine_par($ENGINE_PAR_VOLUME, $Volume, -1, -1, -1)
end on
A knob controls the instrument volume.
on init
    declare ui_knob $Freq (0, 1000000, 1000000)
    declare ui_button $Bypass
end on

on ui_control ($Freq)
    set_engine_par($ENGINE_PAR_CUTOFF, $Freq, 0, 0, -1)
end on

on ui_control ($Bypass)
    set_engine_par($ENGINE_PAR_EFFECT_BYPASS, $Bypass, 0, 0, -1)
end on
Controlling the cutoff and bypass button of any filter  module in the first  slot of the first  group.
on init
    declare ui_knob $Knob (-1000, 1000, 10)

    declare $mod_idx
    $mod_idx := get_mod_idx(0, ""FILTER_ENV"")

    declare $target_idx
    $target_idx := get_target_idx(0, $mod_idx, ""ENV_AHDSR_CUTOFF"")
end on

on ui_control ($Knob)
    set_engine_par($ENGINE_PAR_MOD_TARGET_MP_INTENSITY, $Knob * 1000, 0, $mod_idx,
$target_idx)
end on
Controlling the filter  envelope amount of an envelope to filter  cutoff modulation in the first  group.
Note: the filter  envelope has been manually renamed to ""FILTER_ENV"".
on init
    declare ui_knob $Vol (0, 1000000, 1000000)
end on

on ui_control ($Vol)
    set_engine_par($ENGINE_PAR_VOLUME, $Vol, -1, -1, $NI_BUS_OFFSET + 15)
end on
Controlling the amplifier  volume of 16th bus.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,109,4209,11. Engine Parameter Commands,set_voice_limit(),set_voice_limit,"voice-type,value","Sets the voice limit for the Time Machine Pro mode of the Source module.
<voice-type>: The voice type, can be one of the following:
- $NI_VL_TMPRO_STANDARD: Standard quality mode
- $NI_VL_TMPRO_HQ: High quality mode
<value>: The voice limit of the Time Machine Pro mode.","- Changing voice limits is an asynchronous operation. This means that one cannot
reliably access the newly allocated voices immediately after instantiation. To resolve this,
the set_voice_limit() command returns an $NI_ASYNC_ID and triggers the on
async_complete callback.
- Use this command to adjust the memory requirement of your instrument. Time Machine Pro
uses its own memory allocation that is separate from memory used by loaded samples. This
can be monitored in Kontakt's side pane, Monitor → Engine tab.","on init
    declare $change_voices_id

    declare ui_value_edit $Voices (1, 8, 1)

    make_persistent($Voices)
end on

on ui_control ($Voices)
    $change_voices_id := set_voice_limit($NI_VL_TMPRO_STANDARD, $Voices)
end on

on async_complete
    if ($NI_ASYNC_ID = $change_voices_id)
        message(""New TMPro Std Voice Limit: "" &
get_voice_limit($NI_VL_TMPRO_STANDARD))
    end if
end on
Changing TM Pro voice limits.",get_voice_limit(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,110,4256,12. Event Commands,by_marks(),by_marks,mark,"A user-defined group of events.
<mark>: One of 28 marks, $MARK_1 ... $MARK_28, which was assigned to the event.
You can also select more than one event group by using the bitwise .or.
operator, or by simply summing the event marks.","- by_marks() is a user-defined group of events which can be set with set_event_mark().
It can be used with all commands which take event ID as an argument, like note_off(),
change_tune() etc.","on note
    if ($EVENT_NOTE mod 12 = 0) { if played note is a C }
        set_event_mark($EVENT_ID, $MARK_1)
        change_tune(by_marks($MARK_1), %CC[1] * 1000, 0)
    end if
end on

on controller
    if ($CC_NUM = 1)
        change_tune(by_marks($MARK_1), %CC[1] * 1000, 0)
    end if
end on
Moving the modwheel changes the tuning of all C notes (C-2, C-1…C8).","set_event_mark()
Events and MIDI: $EVENT_ID, $ALL_EVENTS, $MARK_1 … $MARK_28",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,170,6400,16. MIDI Object Commands,by_marks(),by_marks,mark,"Used to access a user-defined group of MIDI object events.
<mark>: The event mark number, $MARK_1 ... $MARK_10 .",,,"mf_insert_file()
mf_insert_event()
mf_remove_event()
Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
by_track()
mf_set_mark()
mf_get_mark()
mf_get_id()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,111,4290,12. Event Commands,change_note(),change_note,"event-id,note-number",Changes the note number of a specific event ID.,"- change_note() is only allowed in the on note callback and only works before the first
wait() statement. If the voice is already running, only the value of the $EVENT_NOTE variable
changes.
- Once the note number of a particular note event is changed, it becomes the new
$EVENT_NOTE.
- It is not possible to address events via event groups like $ALL_EVENTS.","on init
    declare %black_keys[5] := (1, 3, 6, 8, 10)
end on

on note
    if (search(%black_keys, $EVENT_NOTE mod 12) # -1)
        change_note($EVENT_ID, $EVENT_NOTE - 1)
    end if
end on
Constrain all notes to white keys, i.e. C major.","change_velo()
Events and MIDI: $EVENT_NOTE",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,112,4321,12. Event Commands,change_pan(),change_pan,"event-id,panorama,relative-bit","Changes the pan position of a specific note event.
<event-id>: Unique identification number of the note event to be changed.
<panorama>: The pan position of the note event, from -1000 (left) to 1000 (right).
<relative-bit>: If set to 0, the amount is absolute , i.e. the amount overwrites any previous
set values of that event. Note that this mode also overwrites any zone volume
adjustments!
If set to 1, the amount is relative to the actual value of the event.
If set to 2, it behaves like mode 0 (absolute adjustment), except any zone
volume adjustments are preserved.
The different implications between absolute and relative adjustments are more
apparent with more than one change_pan() statement applied to the same
event.","- change_pan() works on the note event level and does not change any panorama settings in
the instrument itself. It is also not related to any modulations regarding panorama.","on init
    declare $pan_position
end on

on note
    $pan_position := ($EVENT_NOTE * 2000 / 127) - 1000
    change_pan($EVENT_ID, $pan_position, 0)
end on
Panning the entire key range from left to right, i.e. C-2 all the way to the left, G8 all the way to the
right.
on note
    if ($EVENT_NOTE < 60)
        change_pan($EVENT_ID, 1000, 0)
        wait(500000)
        change_pan($EVENT_ID, -1000, 0) { absolute, pan is at -1000 }
    else
        change_pan($EVENT_ID, 1000, 1)
        wait(500000)
        change_pan($EVENT_ID, -1000, 1) { relative, pan is at 0 }
    end if
end on
Notes below C3 utilize a relative bit of 0. C3 and above utilize a relative bit of 1.","change_vol()
change_tune()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,113,4371,12. Event Commands,change_tune(),change_tune,"event-id,tune-amount,relative-bit","Changes the tuning of a specific note event in millicents.
<event-id>: Unique identification number of the note event to be changed.
<tune-amount>: The tune amount in millicents. 100000 equals 100 cents (one semitone).
<relative-bit>: If set to 0, the amount is absolute , i.e. the amount overwrites any previous set
values of that event.
If set to 1, the amount is relative  to the actual value of the event.
The different implications between absolute and relative adjustments are more
apparent with more than one change_tune() statement applied to the same
event.","- change_tune() works on the note event level and does not change any tune settings in the
instrument itself. It is also not related to any modulations regarding tuning.","on init
    declare $tune_amount
end on

on note
    $tune_amount := random(-50000, 50000)
    change_tune($EVENT_ID, $tune_amount, 1)
end on
Randomly detune every played note by ±50 cents","change_vol()
change_pan()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,114,4406,12. Event Commands,change_velo(),change_velo,"event-id,velocity",Changes the velocity of a specific note event ID.,"- change_velo() is only allowed in the on note callback and only works before the first
wait() statement. If the voice is already running, only the value of the variable changes.
- Once the velocity of a particular note event is changed, it becomes the new
$EVENT_VELOCITY.
- It is not possible to address events via event groups like $ALL_EVENTS.","on note
    change_velo($EVENT_ID, 100)
    message($EVENT_VELOCITY)
end on
All velocities are set to 100. Note that $EVENT_VELOCITY will also change to 100.","change_note()
Events and MIDI: $EVENT_VELOCITY",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,115,4432,12. Event Commands,change_vol(),change_vol,"event-id,volume,relative-bit","Changes the volume of a specific note event in millidecibels.
<event-id>: Unique identification number of the note event to be changed.
<volume>: The volume change in millidecibels (1000 millidecibels = 1 decibel).
<relative-bit>: If set to 0, the amount is absolute , i.e. the amount overwrites any previous
set values of that event. Note that this mode also overwrites any zone volume
adjustments!
If set to 1, the amount is relative to the actual value of the event.
If set to 2, it behaves like mode 0 (absolute adjustment), except any zone
volume adjustments are preserved.
The different implications between absolute and relative adjustments are more
apparent with more than one change_vol() statement applied to the same
event.","- change_vol() works on the note event level and does not change any tune settings in the
instrument itself. It is also not related to any MIDI modulations regarding volume (e.g. MIDI CC
#7).","on init
    declare $vol_amount
end on

on note
    $vol_amount := (($EVENT_VELOCITY - 1) * 12000 / 126) - 6000
    change_vol ($EVENT_ID, $vol_amount, 1)
end on
A simple dynamic expander: lightly played notes will be softer, harder played notes will be louder.","change_tune()
change_pan()
fade_in()
fade_out()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,116,4473,12. Event Commands,delete_event_mark(),delete_event_mark,"event-id,mark","Delete an event mark, i.e. ungroup the specified event from an event group.
<event-id>: Unique identification number of the note event to be ungrouped.
<mark>: One of 28 marks, $MARK_1 ... $MARK_28, which was assigned to the event.",,,"set_event_mark()
by_marks()
Events and MIDI: $EVENT_ID, $ALL_EVENTS, $MARK_1 … $MARK_28",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,117,4487,12. Event Commands,event_status(),event_status,event-id,"Retrieves the status of a particular note event (or MIDI event in the multi script). These are the
possible states:
- $EVENT_STATUS_NOTE_QUEUE (note is active - instrument script only)
- $EVENT_STATUS_MIDI_QUEUE (MIDI event is active - multi script only)
- $EVENT_STATUS_INACTIVE (note or MIDI event is inactive)","- event_status() can be used to find out if a note event is still ""alive"" or not.","on init
    declare %key_id[128]
end on

on note
    if (event_status(%key_id[$EVENT_NOTE]) = $EVENT_STATUS_NOTE_QUEUE)
        fade_out(%key_id[$EVENT_NOTE], 10000, 1)
    end if

    %key_id[$EVENT_NOTE] := $EVENT_ID
end on
Limit the number of active note events to one per MIDI key.","get_event_ids()
Events and MIDI: $EVENT_STATUS_INACTIVE, $EVENT_STATUS_NOTE_QUEUE,
$EVENT_STATUS_MIDI_QUEUE",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,118,4521,12. Event Commands,fade_in(),fade_in,"event-id,fade-time","Performs a fade in for a specific note event.
<event-id>: Unique identification number of the note event to be faded in.
<fade-time>: The fade in time in microseconds.",,"on init
    declare $note_1_id
    declare $note_2_id
end on

on note
    $note_1_id := play_note($EVENT_NOTE + 12, $EVENT_VELOCITY, 0, -1)
    $note_2_id := play_note($EVENT_NOTE + 19, $EVENT_VELOCITY, 0, -1)

    fade_in ($note_1_id, 1000000)
    fade_in ($note_2_id, 5000000)
end on
Fading in the first  two harmonics.","change_vol()
fade_out()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,119,4549,12. Event Commands,fade_out(),fade_out,"event-id,fade-time,stop-voice","Performs a fade-out for a specific note event.
<event-id>: Unique identification number of the note event to be faded out.
<fade-time>: The fade out time in microseconds.
<stop-voice>: If set to 1, the voice is stopped after the fade out.
If set to 0, the voice will still be running after the fade out.",,"on controller
    if ($CC_NUM = 1)
        if (%CC[1] mod 2 # 0)
            fade_out($ALL_EVENTS, 5000, 0)
        else
            fade_in($ALL_EVENTS, 5000)
        end if
    end if
end on
Use the modwheel on held notes to create a stutter effect.
on controller
    if ($CC_NUM = 1)
        fade_out($ALL_EVENTS, 5000, 1)
    end if
end on
A custom All Sound Off implementation triggered by the modwheel.","change_vol()
fade_out()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,120,4583,12. Event Commands,get_event_ids(),get_event_ids,array-name,"Fills the specified array with all active event IDs.
<array-name>: Array to be filled with active event IDs.","- The command overwrites all existing values as long as there are active events, and writes 0 if
no events are active anymore. If there are more active events than array indices, the array will
be filled until it is full, ignoring the remaining event IDs.
- If there are less active events than array indices, the array will be filled from the beginning with
all event IDs, followed by one array index with its value set to 0.","on init
    declare const $ARRAY_SIZE := 500

    declare $a
    declare $note_count
    declare %test_array[$ARRAY_SIZE]
end on

on note
    get_event_ids(%test_array)

    $note_count := 0
    $a := 0
    while($a < $ARRAY_SIZE and %test_array[$a] # 0)
        inc($note_count)
        inc($a)
    end while

    message(""Active Events: "" & $note_count)
end on
Monitoring the number of active events.",event_status(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,121,4624,12. Event Commands,get_event_mark(),get_event_mark,"event-id,mark","Checks if the specified event ID belongs to a specific event group (returns 1 if the bit mark is set, 0
otherwise).
<event-id>: Unique identification number of the note event to be checked.
<mark>: The bit mark, $MARK_1 ... $MARK_28 . You can also select more than one
event group by using the bitwise .or. operator, or by simply summing the
event marks.",,"on note
    if ($EVENT_NOTE mod 12 = 0)
        set_event_mark($EVENT_ID, $MARK_1)
    end if
end on

on release
    if (get_event_mark($EVENT_ID, $MARK_1) = 1)
        message(""You've played a C!"")
    else
        message("""")
    end if
end on
A rather long-winded way to check if you've released a C key.",set_event_mark(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,122,4656,12. Event Commands,get_event_par(),get_event_par,"event-id,parameter","Returns the value of a specific event parameter of the specified event.
<event-id>: Unique identification number of the note event to be changed.
<parameter>: The event parameter, either one of four freely assignable event parameters:
- $EVENT_PAR_0
- $EVENT_PAR_1
- $EVENT_PAR_2
- $EVENT_PAR_3
or the ""built-in"" parameters of a note event:
- $EVENT_PAR_VOLUME
- $EVENT_PAR_PAN
- $EVENT_PAR_TUNE
- $EVENT_PAR_NOTE
- $EVENT_PAR_VELOCITY
- $EVENT_PAR_REL_VELOCITY
- $EVENT_PAR_MIDI_CHANNEL
- $EVENT_PAR_SOURCE
- $EVENT_PAR_PLAY_POS
- $EVENT_PAR_ZONE_ID (use with care, see below)","- A note event always carries certain information like the note number, the played velocity, but
also volume, pan and tune. With get_event_par(), you can get either these parameters
or use the freely assignable parameters like $EVENT_PAR_0. This is especially useful when
chaining scripts, i.e. set an event parameter for an event in script slot 1, then retrieve this
information in script slot 2 by using get_event_par().","on note
    message(get_event_par($EVENT_ID, $EVENT_PAR_NOTE))
end on
The same functionality as message($EVENT_NOTE).

on note
    message(get_event_par($EVENT_ID, $EVENT_PAR_SOURCE))
end on
Check if the event comes from outside (returns -1 in this case) or if it was created in one of the five
script slots (returns 0-4).
on note
    wait(1)
    message(get_event_par($EVENT_ID, $EVENT_PAR_ZONE_ID))
end on
An event itself does not carry a zone ID (only a voice can carry zone IDs), therefore you need to insert
wait(1) in order to properly retrieve the zone ID.","set_event_par()
ignore_event()
set_event_par_arr()
get_event_par_arr()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,124,4712,12. Event Commands,get_event_par_arr(),get_event_par_arr,"event-id,parameter,index","Retrieves the value of a specified event parameter of a specific event.
<event-id>: Unique identification number of the note event.
<parameter>: Can be one of the following:
- $EVENT_PAR_ALLOW_GROUP
- $EVENT_PAR_CUSTOM
- $EVENT_PAR_MOD_VALUE_ID
- $EVENT_PAR_MOD_VALUE_EX_ID
<index>: When used with:
- $EVENT_PAR_ALLOW_GROUP: the group index (0 ... 4095, however this
depends on the amount of groups present in a particular Kontakt
instrument)
- $EVENT_PAR_CUSTOM: the event parameter index (0 ... 15)
- $EVENT_PAR_MOD_VALUE_ID/$EVENT_PAR_MOD_VALUE_EX_ID: the
""from script"" modulator index, as set in the modulation assignment in
Kontakt (0 ... 1000)","- get_event_par_arr() is the array variant of get_event_par(). You can use it to retrieve
the group allow state of a specific event, or if you need to access more than the four standard
event parameters. You can also use it to retrieve the value of event-specific modulations,
facilitated by ""from script"" modulators in Kontakt.","on init
    declare $count
    declare ui_label $label (2, 4)
    set_text($label, """")
end on

on note
    set_text($label, """")

    $count := 0
    while ($count < $NUM_GROUPS)
        if (get_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, $count) = 1)
            add_text_line($label,""Group ID "" & $count & "" allowed"")
        else
            add_text_line($label,""Group ID "" & $count & "" disallowed"")
        end if

        inc($count)
    end while
end on
A simple group monitor.","set_event_par_arr()
get_event_par()
Events and MIDI: $EVENT_PAR_ALLOW_GROUP, $EVENT_PAR_MOD_VALUE_ID,
$EVENT_PAR_CUSTOM , %GROUPS_AFFECTED",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,126,4770,12. Event Commands,ignore_event(),ignore_event,event-id,Ignores a note event in on note or on release callbacks.,"- If you ignore an event, any volume, tune or pan information is lost. You can however retrieve
this infomation with get_event_par(), refer to the two examples below.
- ignore_event() is a very ""strong"" command. Always check if you can get the same results
with the various change_...() commands without having to ignore the event.","on note
    ignore_event($EVENT_ID)
    wait(500000)
    play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
end on
Delaying all notes by half a second. Not bad, but if you, for example insert a microtuner before this
script, the tuning information will be lost.
on init
    declare $new_id
end on

on note
    ignore_event($EVENT_ID)
    wait(500000)
    $new_id := play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)

    change_vol($new_id, get_event_par($EVENT_ID, $EVENT_PAR_VOLUME), 1)
    change_tune($new_id, get_event_par($EVENT_ID, $EVENT_PAR_TUNE), 1)
    change_pan($new_id, get_event_par($EVENT_ID, $EVENT_PAR_PAN), 1)
end on
Better: the tuning (plus volume and pan, to be precise) information is retrieved and applied to the
played note.","ignore_controller
get_event_par()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,127,4812,12. Event Commands,redirect_output(),redirect_output,"event-id,output-type,index","Routes the audio signal of the specified event to a specific output or bus.
<event-id>: Unique identification number of the note event to be routed.
<output-type>: Can be one of the following:
- $OUTPUT_TYPE_DEFAULT: The audio signal of the event is routed to the
default instrument output.
- $OUTPUT_TYPE_MASTER_OUT: The audio signal of the event is routed
directly to the output channel specified with <index> (0 ... 63, depending
on number of output channels defined in Kontakt). The audio signal will not
be affected by any instrument effect.
- $OUTPUT_TYPE_AUX_OUT: The audio signal of the event is routed directly
to the Aux channel specified with <index>. (0 ... 3) The audio signal will
not be affected by any instrument effect.
- $OUTPUT_TYPE_BUS_OUT: The audio signal of the event is routed to the
instrument bus specified with <index> (0 ... 15).
<index>: Specifies the output channel, aux channel or instrument bus, depending on
<output-type>.
Has no effect when <output-type> is set to $OUTPUT_TYPE_DEFAULT.","- When using redirect_output(), the output selection of a group is completely ignored.","on init
    declare $new_id_0
    declare $new_id_1
    decalre $new_id_2
end on

on note
    ignore_event($EVENT_ID)

    $new_id_0 := play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
    $new_id_1 := play_note($EVENT_NOTE + 4, $EVENT_VELOCITY, 0, -1)
    $new_id_2 := play_note($EVENT_NOTE + 7, $EVENT_VELOCITY, 0, -1)

    redirect_output($new_id_0, $OUTPUT_TYPE_BUS_OUT, 0)
    redirect_output($new_id_1, $OUTPUT_TYPE_BUS_OUT, 1)
    redirect_output($new_id_2, $OUTPUT_TYPE_BUS_OUT, 2)
end on
Creating a major triad and routing each note to a separate instrument bus.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,128,4859,12. Event Commands,set_event_mark(),set_event_mark,"event-id,mark","Assigns the specified event ID to a specific event group.
<event-id>: Unique identification number of the note event.
<mark>: One of 28 marks, from $MARK_1 to $MARK_28 which will be assigned to the
event. You can also assign more than one mark to a single event, either by
typing the command again, or by using the bitwise .or. operator, or by simply
summing the event marks.","- When working with commands that deal with event IDs, you can group events by using
by_marks() instead of using individual IDs, as Kontakt needs to know that you want to
address marks, and not IDs.","on init
    declare $new_id
end on

on note
    set_event_mark($EVENT_ID, $MARK_1)

    $new_id := play_note($EVENT_NOTE + 12, 120, 0, -1)
    set_event_mark($new_id, $MARK_1 + $MARK_2)

    change_pan(by_marks($MARK_1), -1000, 1) { both notes panned to left }
    change_pan(by_marks($MARK_2), 2000, 1) { new note panned to right }
end on
The played note belongs to event mark 1, the harmonized note belongs to both event marks 1 and 2.","by_marks()
delete_event_mark()
Events and MIDI: $EVENT_ID, $ALL_EVENTS, $MARK_1 … $MARK_28",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,129,4898,12. Event Commands,set_event_par(),set_event_par,"event-id,parameter,value","Assigns a specific event parameter value to a specific event.
<event-id>: Unique identification number of the note event.
<parameter>: The event parameter, either one of four freely assignable event parameters:
- $EVENT_PAR_0
- $EVENT_PAR_1
- $EVENT_PAR_2
- $EVENT_PAR_3
or the ""built-in"" parameters of a note event:
- $EVENT_PAR_VOLUME
- $EVENT_PAR_PAN
- $EVENT_PAR_TUNE
- $EVENT_PAR_NOTE
- $EVENT_PAR_VELOCITY
- $EVENT_PAR_REL_VELOCITY
- $EVENT_PAR_MIDI_CHANNNEL
<value>: The value of the event parameter.","- A note event always carries certain information like the note number, the played velocity, but
also volume, pan and tune. With set_event_par(), you can set either these parameters
or use the freely assignable parameters like $EVENT_PAR_0. This is especially useful when
chaining scripts, i.e. set an event parameter for an event in script slot 1, then retrieve this
information in script slot 2 by using get_event_par().
- If you need access to more than four custom parameters, please use
set_event_par_arr() with $EVENT_PAR_CUSTOM.","on note
    set_event_par($EVENT_ID, $EVENT_PAR_NOTE, 60)
end on
Setting all notes to middle C3, same as change_note($EVENT_ID, 60).

on init
    message("""")
    declare ui_switch $switch

    declare ui_label $midiChan1 (1, 1)
    declare ui_label $midiChan2 (1, 1)
    declare ui_label $midiChan3 (1, 1)
    declare ui_label $midiChan4 (1, 1)
    declare ui_label $midiChan5 (1, 1)
    declare ui_label $midiChan6 (1, 1)
    declare ui_label $midiChan7 (1, 1)
    declare ui_label $midiChan8 (1, 1)
    declare ui_label $midiChan9 (1, 1)
    declare ui_label $midiChan10 (1, 1)
    declare ui_label $midiChan11 (1, 1)
    declare ui_label $midiChan12 (1, 1)
    declare ui_label $midiChan13 (1, 1)
    declare ui_label $midiChan14 (1, 1)
    declare ui_label $midiChan15 (1, 1)
    declare ui_label $midiChan16 (1, 1)

    declare %midiChans[16]
    %midiChans[0] := get_ui_id($midiChan1)
    %midiChans[1] := get_ui_id($midiChan2)
    %midiChans[2] := get_ui_id($midiChan3)
    %midiChans[3] := get_ui_id($midiChan4)
    %midiChans[4] := get_ui_id($midiChan5)
    %midiChans[5] := get_ui_id($midiChan6)
    %midiChans[6] := get_ui_id($midiChan7)
    %midiChans[7] := get_ui_id($midiChan8)
    %midiChans[8] := get_ui_id($midiChan9)
    %midiChans[9] := get_ui_id($midiChan10)
    %midiChans[10] := get_ui_id($midiChan11)
    %midiChans[11] := get_ui_id($midiChan12)
    %midiChans[12] := get_ui_id($midiChan13)
    %midiChans[13] := get_ui_id($midiChan14)
    %midiChans[14] := get_ui_id($midiChan15)
    %midiChans[15] := get_ui_id($midiChan16)
end on

on release
    if ($switch = 1)
        set_event_par($EVENT_ID, $EVENT_PAR_REL_VELOCITY, 127)
    end if

    set_control_par_str(%midiChans[$MIDI_CHANNEL], $CONTROL_PAR_TEXT,
get_event_par($EVENT_ID, $EVENT_PAR_REL_VELOCITY))
end on
Release velocity in MPE (MIDI Polyphonic Expression) context.","get_event_par()
ignore_event()
set_event_par_arr()
get_event_par_arr()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,131,4993,12. Event Commands,set_event_par_arr(),set_event_par_arr,"event-id,parameter,value,index","Assigns an event parameter array to a specific event.
<event-id>: Unique identification number of the note event.
<parameter>: Can be one of the following:
- $EVENT_PAR_ALLOW_GROUP
- $EVENT_PAR_CUSTOM
- $EVENT_PAR_MOD_VALUE_ID
- $EVENT_PAR_MOD_VALUE_EX_ID
<value>: When used with:
- $EVENT_PAR_ALLOW_GROUP: the allow state for the group (1 for allowed,
0 for disallowed)
- $EVENT_PAR_CUSTOM: the value of the specified event parameter
- $EVENT_PAR_MOD_VALUE_ID: the modulation value to be sent to ""from
script"" modulator (clamped internally between -1000000 and 1000000)
- $EVENT_PAR_MOD_VALUE_EX_ID: the modulation value to be sent to
""from script"" modulator (unbounded value range)
<index>: When used with:
- $EVENT_PAR_ALLOW_GROUP: the group index (0 ... 4095, however this
depends on the amount of groups present in a particular Kontakt
instrument)
- $EVENT_PAR_CUSTOM: the event parameter index (0 ... 15)
- $EVENT_PAR_MOD_VALUE_ID/$EVENT_PAR_MOD_VALUE_EX_ID: the
""from script"" modulator index, as set in the modulation assignment in
Kontakt (0 ... 1000)","- set_event_par_arr() is the array variant of set_event_par(). You can use it to set the
group allow state of a specific event, or if you need to access more than the four standard
event parameters. You can also use it to set up event-specific modulations, facilitated by ""from
script"" modulators in Kontakt.","on note
    if (get_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, 0) = 0)
        set_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, 1, 0)
    end if
end on
Making sure the first  group is always played.
on init
    declare const $CUSTOM_EVENT_PAR_4 := 4
end on

on note
    set_event_par_arr($EVENT_ID, $EVENT_PAR_CUSTOM, $ENGINE_UPTIME, $CUSTOM_EVENT_PAR_4)
end on

on release
    message(get_event_par_arr($EVENT_ID, $EVENT_PAR_CUSTOM, $CUSTOM_EVENT_PAR_4))
end on
Simple implementation of $EVENT_PAR_CUSTOM.

on note
    if ($EVENT_NOTE = 60)
        set_event_par_arr($EVENT_ID, $EVENT_PAR_MOD_VALUE_ID, 500000, 1)
    end if
end on
Only middle C (MIDI note 60) will have any modulation applied, facilitated by ""from script"" modulator
that has its ID set to ""1"".","allow_group()
disallow_group()
get_event_par_arr()
set_event_par()
Events and MIDI: $EVENT_PAR_ALLOW_GROUP",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,133,5065,12. Event Commands,set_map_editor_event_color(),set_map_editor_event_color,hex-value,"Assigns the specified color to events generated in the current script slot, visible in Kontakt's
Mapping Editor.
<hex value>: The hexadecimal color value in the following format:
0ff0000h {red}
The 0 at the start lets Kontakt know the value is a number.
The h at the end indicates that it is a hexadecimal value. You can also use
uppercase H.","- This command is only available in on init callback.
- The specified color will always be drawn 50% opaque, so that cases of overlapping events from
multiple script slots could be discerned.
- This command will only work if script generated events are allowed to be displayed in Kontakt's
Mapping Editor (option available in Mapping Editor's Edit menu).","on init
    set_map_editor_event_color(000FF00h)
end on

on note
    play_note(($EVENT_NOTE + 12) mod 127, $EVENT_VELOCITY, 0, -1)
end on
Add a note played an octave up. This event will be shown as a green blip in Kontakt's Mapping Editor.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,134,5097,13. Group Commands,allow_group(),allow_group,group-index,"Allows the specified group, i.e. makes it available for playback.","- This command is only available in on note and on release callbacks.
- The numbering of the group index is zero-based, i.e. index of the first instrument group is 0.
- The group allow states can only be changed if the voice is not running.","on note
    disallow_group($ALL_GROUPS)
    allow_group(0)
end on
Only the first  group will play back.","disallow_group()
set_event_par_arr()
Events and MIDI: $ALL_GROUPS, $EVENT_PAR_ALLOW_GROUP",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,135,5121,13. Group Commands,disallow_group(),disallow_group,group-index,"Disallows the specified group, i.e. makes it unavailable for playback.","- This commmand is only available in on note and on release callbacks.
- The numbering of the group index is zero-based, i.e. index of the first instrument group is 0.
- The group disallow states can only be changed if the voice is not running.","on init
    declare $count
    declare ui_menu $groups_menu

    add_menu_item($groups_menu, ""Play All"", -1)

    while ($count < $NUM_GROUPS)
        add_menu_item($groups_menu, ""Mute: "" & group_name($count), $count)

        inc($count)
    end while
end on

on note
    if ($groups_menu # -1)
        disallow_group($groups_menu)
    end if
end on
Muting one specific  group of an instrument.","allow_group()
set_event_par_arr()
Events and MIDI: $ALL_GROUPS, $EVENT_PAR_ALLOW_GROUP",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,136,5160,13. Group Commands,get_group_idx(),get_group_idx,group-name,Returns the group index for the specified group name.,"- If no group with the specified name is found, this command will return $NI_NOT_FOUND.","on init
    declare $group_idx
end on

on note
    $group_idx := get_group_idx(""Accordion"")

    if ($group_idx # $NI_NOT_FOUND)
        disallow_group($group_idx)
    end if
end on
A simple, yet useful script.","allow_group()
disallow_group()
group_name()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,137,5190,13. Group Commands,get_purge_state(),get_purge_state,group-index,"Returns the purge state of the specified group.
0: The group is purged.
1: The group is not purged, i.e. the samples are loaded.
<group-index>: The index number of the group that should be checked.",,"on init
    declare ui_button $purge
    declare ui_button $checkpurge

    set_text($purge, ""Purge first group"")
    set_text($checkpurge, ""Check purge status"")
end on

on ui_control ($purge)
    { 1 - $purge inverts the behaviour of the button, here }
    purge_group(0, 1 - $purge)
end on

on ui_control ($checkpurge)
    if (get_purge_state(0) = 0)
        message(“Group is purged.”)
    else
        message(“Group is not purged.”)
    end if
end on
A simple purge check.",purge_group(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,138,5227,13. Group Commands,group_name(),group_name,group-index,Returns the group name for the specified group.,"- The numbering of the group index is zero-based, i.e. index of the first instrument group is 0.","on init
    declare $count
    declare ui_menu $groups_menu

    $count := 0
    while ($count < $NUM_GROUPS)
        add_menu_item ($groups_menu, group_name($count), $count)

        inc($count)
    end while
end on
Quickly creating a menu with all available groups.
on init
    declare $count
    declare ui_label $label (2, 6)

    set_text($label, """")
end on

on note
    $count := 0
    while ($count < num_elements(%GROUPS_AFFECTED))
        add_text_line($label, group_name(%GROUPS_AFFECTED[$count]))

        inc($count)
    end while
end on

on release
    set_text($label, """")
end on
Query the status of the first  1001 zone IDs.","allow_group()
disallow_group()
get_group_idx()
output_channel_name()
Events and MIDI: $ALL_GROUPS, $NUM_GROUPS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,139,5278,13. Group Commands,purge_group(),purge_group,"group-index,mode","Purges (i.e. unloads from RAM) the samples of the specified group.
<group-index>: The index number of the group which contains the samples to be purged.
<mode>: If set to 0, the samples of the specified group are unloaded.
If set to 1, the samples are reloaded.","- When using purge_group() in a while loop, don’t use any wait() commands within the loop.
- purge_group() can only be used in on ui_control, on ui_controls and on
persistence_changed callbacks.
- It is recommended not to use the purge_group() command in UI callbacks of automatable
controls.
- It is possible to supply an async ID to the purge_group() function and get a return in the on
async_complete callback.","on init
    declare $async_id := -1
    declare ui_button $purge

    set_text($purge,""Purge first group"")
end on

on ui_control ($purge)
    $async_id := purge_group(0, abs($purge - 1))
end on

on async_complete
    if ($NI_ASYNC_ID = $async_id)
        if (get_purge_state(0) = 0)
            message(""Group is purged"")
        else
            message(""Group is not purged"")
        end if
    end if
end on
Unloading all samples of the first  group.",get_purge_state(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,140,5326,14. Keyboard Commands,get_key_color(),get_key_color,note-number,Returns the color constant of the specified note number.,,"on init
    message("""")

    declare $count

    while ($count < 128)
        set_key_color($count, $KEY_COLOR_INACTIVE)

        inc($count)
    end while

    declare $random_key
    $random_key := random(60, 71)

    set_key_color($random_key, $KEY_COLOR_RED)
end on

on note
    if (get_key_color($EVENT_NOTE) = $KEY_COLOR_RED)
        message(""Bravo!"")

        set_key_color($random_key, $KEY_COLOR_INACTIVE)
        $random_key := random(60, 71)
        set_key_color($random_key, $KEY_COLOR_RED)
    else
        message(""Try again!"")
    end if
end on

on release
    message("""")
end on
Catch me if you can.",set_key_color(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,141,5371,14. Keyboard Commands,get_key_name(),get_key_name,note-number,Returns the name of the specified note number.,,"on init
    declare $count

    while ($count < 128)
        set_key_name($count, """")

        inc($count)
    end while

    set_key_name(60, ""Middle C"")
end on

on note
    message(get_key_name($EVENT_NOTE))
end on",set_key_name(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,142,5399,14. Keyboard Commands,get_key_triggerstate(),get_key_triggerstate,note-number,"Returns the pressed state of the specified note number, i.e. key, on the Kontakt keyboard. It can be
either 1 (key pressed) or 0 (key released).",- get_key_triggerstate() only works when set_key_pressed_support() is set to 1.,"on init
    set_key_pressed_support(1)
end on

on note
    set_key_pressed($EVENT_NOTE, 1)
    message(get_key_triggerstate($EVENT_NOTE))
end on

on release
    set_key_pressed($EVENT_NOTE, 0)
    message(get_key_triggerstate($EVENT_NOTE))
end on","set_key_pressed()
set_key_pressed_support()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,143,5429,14. Keyboard Commands,get_key_type(),get_key_type,note-number,Returns the key type constant of the specified note number.,,,set_key_type(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,144,5439,14. Keyboard Commands,get_keyrange_min_note(),get_keyrange_min_note,note-number,Returns the lowest note of the specified key range.,"- Since a key range cannot have overlapping notes, it is sufficient with all get_keyrange_...
commands to specify the key range with one note number only.","on init
    declare $count
    while ($count < 128)
        remove_keyrange($count)

        inc($count)
    end while

    set_keyrange(36, 72, ""Middle Range"")
end on

on note
    message(get_keyrange_min_note($EVENT_NOTE))
end on",set_keyrange(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,145,5470,14. Keyboard Commands,get_keyrange_max_note(),get_keyrange_max_note,note-number,Returns the highest note of the specified key range.,"- Since a key range cannot have overlapping notes, it is sufficient with all get_keyrange_...
commands to specify the key range with one note number only.","on init
    declare $count
    while ($count < 128)
        remove_keyrange($count)

        inc($count)
    end while

    set_keyrange(36, 72, ""Middle Range"")
end on

on note
    message(get_keyrange_max_note($EVENT_NOTE))
end on",set_keyrange(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,146,5501,14. Keyboard Commands,get_keyrange_name(),get_keyrange_name,note-number,Returns the name of the specified key range.,"- Since a key range cannot have overlapping notes, it is sufficient with all get_keyrange_...
commands to specify the key range with one note number only.","on init
    declare $count
    while ($count < 128)
        remove_keyrange($count)

        inc($count)
    end while

    set_keyrange(36, 72, ""Middle Range"")
end on

on note
    message(get_keyrange_name($EVENT_NOTE))
end on",set_keyrange(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,147,5532,14. Keyboard Commands,set_key_color(),set_key_color,"note-number,key-color-constant","Sets the color of the specified key, i.e. MIDI note, on the Kontakt virtual keyboard.
<note-number>: MIDI note number of the key (0 ... 127).
<key-color-constant>: One of available key color constant to specify the color used. The followingconstants are available:
$KEY_COLOR_RED
$KEY_COLOR_ORANGE
$KEY_COLOR_LIGHT_ORANGE
$KEY_COLOR_WARM_YELLOW
$KEY_COLOR_YELLOW
$KEY_COLOR_LIME
$KEY_COLOR_GREEN
$KEY_COLOR_MINT
$KEY_COLOR_CYAN
$KEY_COLOR_TURQUOISE
$KEY_COLOR_BLUE
$KEY_COLOR_PLUM
$KEY_COLOR_VIOLET
$KEY_COLOR_PURPLE
$KEY_COLOR_MAGENTA
$KEY_COLOR_FUCHSIA
$KEY_COLOR_DEFAULT Sets the key to Kontakt's standard color for mapped
notes
$KEY_COLOR_INACTIVE Resets the key to standard black and white
$KEY_COLOR_NONE Resets the key to its normal Kontakt color, e.g. red for
internal keyswitches","- The keyboard colors reside outside of KSP, i.e. changing the color of a key is similar to
changing a Kontakt knob with set_engine_par(). It is therefore a good practice to set all
keys to either $KEY_COLOR_INACTIVE or $KEY_COLOR_NONE in the on init callback.","on init
    message("""")

    declare ui_button $Color

    declare $count
    declare $note_count
    declare $color_count
    declare %white_keys[7] := (0, 2, 4, 5, 7, 9, 11)
    declare %colors[16] := ( ...
        $KEY_COLOR_RED, ...
        $KEY_COLOR_ORANGE, ...
        $KEY_COLOR_LIGHT_ORANGE, ...
        $KEY_COLOR_WARM_YELLOW, ...
        $KEY_COLOR_YELLOW, ...
        $KEY_COLOR_LIME, ...
        $KEY_COLOR_GREEN, ...
        $KEY_COLOR_MINT, ...
        $KEY_COLOR_CYAN, ...
        $KEY_COLOR_TURQUOISE, ...
        $KEY_COLOR_BLUE, ...
        $KEY_COLOR_PLUM, ...
        $KEY_COLOR_VIOLET, ...
        $KEY_COLOR_PURPLE, ...
        $KEY_COLOR_MAGENTA, ...
        $KEY_COLOR_FUCHSIA)

    $count := 0
    while ($count < 128)
        set_key_color($count, $KEY_COLOR_NONE)

        inc($count)
    end while
end on

on ui_control ($Color)
    if ($Color = 1)
        $count := 0
        while ($count < 128)
            set_key_color($count, $KEY_COLOR_INACTIVE)
            inc($count)
        end while

        $note_count := 0
        $color_count := 0
        while ($color_count < 16)
            if (search(%white_keys, (60 + $note_count) mod 12) # -1)
                set_key_color(60 + $note_count, %colors[$color_count])
                inc($color_count)
            end if

            inc($note_count)
        end while
    else
        $count := 0
        while ($count < 128)
            set_key_color($count, $KEY_COLOR_NONE)

            inc($count)
        end while
    end if
end on
Kontakt rainbow.","set_control_help()
get_key_color()
set_key_name()
set_keyrange()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,149,5640,14. Keyboard Commands,set_key_name(),set_key_name,"note-number,name","Assigns a text string to the specified note number.
<note-number>: MIDI note number of the key (0 ... 127).
<name>: Text string to assign.","- Key names are instrument parameters and reside outside of KSP, i.e. changing the key name
is similar to changing a Kontakt knob with set_engine_par(). Make sure to always reset all
key names in the on init callback.
- Key names and ranges are displayed in Kontakt's info pane when hovering the mouse over the
key on the Kontakt keyboard.","on init
    declare $count

    while ($count < 128)
        set_key_name($count, """")

        inc($count)
    end while

    set_key_name(60, ""Middle C"")
end on","set_keyrange()
get_key_name()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,150,5673,14. Keyboard Commands,set_key_pressed(),set_key_pressed,"note-number,value","Sets the trigger state of the specified key on Kontakt's keyboard.
<note-number>: MIDI note number of the key (0 ... 127).
<value>: 0: Key is released
1: Key is pressed","- By using set_key_pressed() in combination with set_key_pressed_support() set to
1, it is possible to show script generated notes on Kontakt's keyboard. The typical use case
would be if an instrument features a built-in sequencer, arpeggiator or harmonizer, and the
triggered notes should be shown on the keyboard.","on init
    set_key_pressed_support(1)
end on

on note
    set_key_pressed($EVENT_NOTE, 1)
end on

on release
    set_key_pressed($EVENT_NOTE, 0)
end on
Insert this after an arpeggiator or harmonizer script.","set_key_pressed_support()
get_key_triggerstate()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,151,5707,14. Keyboard Commands,set_key_pressed_support(),set_key_pressed_support,mode,"Sets the pressed state support mode for Kontakt's keyboard.
<mode>: 0: Kontakt handles all pressed states. set_key_pressed() commands are
ignored (this is the default).
1: Kontakt's keyboard is only affected by set_key_pressed() commands.","- The pressed state mode resides outside of KSP, i.e. changing the mode is similar to changing a
Kontakt knob with set_engine_par(). Make sure to always set the desired mode in the on
init callback.","on init
    declare ui_button $Enable
    set_key_pressed_support(0)
end on

on ui_control ($Enable)
    set_key_pressed_support($Enable)
end on

on note
    play_note($EVENT_NOTE + 4, $EVENT_VELOCITY, 0, -1)
    play_note($EVENT_NOTE + 7, $EVENT_VELOCITY, 0, -1)

    set_key_pressed($EVENT_NOTE, 1)
    set_key_pressed($EVENT_NOTE + 4, 1)
    set_key_pressed($EVENT_NOTE + 7, 1)
end on

on release
    set_key_pressed($EVENT_NOTE, 0)
    set_key_pressed($EVENT_NOTE + 4, 0)
    set_key_pressed($EVENT_NOTE + 7, 0)
end on
Press the button and you will see what you hear.","set_key_pressed()
get_key_triggerstate()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,152,5753,14. Keyboard Commands,set_key_type(),set_key_type,"note-number,key-type-constant","Assigns a key type to the specified key.
<note-number>: MIDI note number of the key (0 ... 127).
<key-type-constant>: The following key types are available:$NI_KEY_TYPE_DEFAULT Normally mapped keys that produce sound.

$NI_KEY_TYPE_CONTROL Keyswitches or other keysthat do not produce
sound.
$NI_KEY_TYPE_NONE Resets the key to its standard Kontakt behaviour.","- Setting the key type is useful for supported hosts like Komplete Kontrol, where keys with
control functionality, e.g. keyswitches, should not be affected by any note processing.","on init
    declare $count

    $count := 0
    while ($count < 128)
        set_key_type($count, $NI_KEY_TYPE_NONE)

        inc($count)
    end while

    $count := 36
    while ($count <= 96)
        select ($count)
            case 36 to 47 { e.g. key switch }
                set_key_type($count, $NI_KEY_TYPE_CONTROL)
            case 48 to 96 { e.g. playable notes }
                set_key_type($count, $NI_KEY_TYPE_DEFAULT)
        end select

        inc($count)
    end while
end on",get_key_type(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,153,5798,14. Keyboard Commands,set_keyrange(),set_keyrange,"min-note,max-note,name","Assigns a text string to the specified range of keys.
<min-note>: First key of the key range (0 ... 127).
<max-note>: Last key of the key range (0 ... 127).
<name>: Text string specifying the name of the key range.","- Key ranges are instrument parameters and reside outside of KSP, i.e. changing the key range is
similar to changing a Kontakt knob with set_engine_par(). Make sure to always remove all
key ranges in the on init callback or whenever you want to change them later.
- There can be up to 16 key ranges per instrument.
- Key names and ranges are displayed in Kontakt's info pane when hovering the mouse over the
key on the Kontakt keyboard. The range name is followed by the key name, separated by a
dash.","on init
    declare $count

    while ($count < 128)
        remove_keyrange($count)

        inc($count)
    end while

    set_keyrange(36, 72, ""Middle Range"")
end on","remove_keyrange()
set_key_name()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,154,5834,14. Keyboard Commands,remove_keyrange(),remove_keyrange,note-number,Removes the range of keys to which the specified note number belongs.,"- Key ranges are instrument parameters and reside outside of KSP, i.e. changing the key range is
similar to changing a Kontakt knob withset_engine_par(). Make sure to always remove all
key ranges in the on init callback or whenever you want to change them later.","on init
    declare $count

    while ($count < 128)
        remove_keyrange($count)

        inc($count)
    end while

    set_keyrange(36, 72, ""Middle Range"")
end on",set_keyrange(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,156,5898,15. Load/Save Commands,get_folder(),get_folder,path-variable,"Returns the path specified with the built-in path variable.
<path-variable>: The following path variables are available:$GET_FOLDER_LIBRARY_DIR

If used with a patch which belongs to a Kontakt Player encoded library: library
folder.
If used with an unencoded patch: the User Content folder, which is found as
follows:
macOS: /Users/<UserName>/Documents/Native Instruments/User
Content/
Windows: C:\Users\<UserName>\Documents\Native
Instruments\User Content\
$GET_FOLDER_FACTORY_DIR
The factory data folder of Kontakt, mainly used for loading factory IR samples.
Note: This is not the Kontakt Factory Library folder!
$GET_FOLDER_PATCH_DIR
The folder in which the patch is saved.
If the patch was not saved before, an empty string is returned.
$GET_FOLDER_RC_DIR
The folder in which the Resource Container is saved. This path is generally
recommended to be used when referencing other files in the library structure
(for example, NKA or MIDI files), since the path to Resource Container is the
same for Kontakt Player encoded library and unencoded patches.
If no Resource Container is set for the insturment, an empty string is returned.","- It is possible to use get_folder() to relatively reference files that are a level above (or
multiple levels above), by appending ../ to the string.
- Always use forwards slash (/) when working with absolute file paths in Kontakt!","on init
    message(get_folder($GET_FOLDER_FACTORY_DIR))
end on
Displaying the path of Kontakt's factory data folder.
on init
    declare %data[5]
    load_array_str(%data, get_folder($GET_FOLDER_PATCH_DIR) & ""../Data/my_data.nka"")
end on
Loading an NKA file  using the absolute file  path, using the patch folder as a baseline. This example
implies that the patch is in a subfolder of the main folder of the library, and that there is another
folder called Data in the main folder of the library.","load_ir_sample()
General: $GET_FOLDER_LIBRARY_DIR, $GET_FOLDER_FACTORY_DIR,
$GET_FOLDER_PATCH_DIR",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,158,5952,15. Load/Save Commands,load_array(),load_array,"array-variable,mode","Loads an array from an external .nka file.
<array-variable>: The name of the array variable. This name must be present as the first line of the .nka file.

<mode>: 0: A dialog window pops up, allowing you to select an .nka file to load. This
mode can only be used in on persistence_changed, on ui_control and on
pgs_changed callbacks (asynchronously).
1: The array is directly loaded from the Data folder.
For user instruments, the Data folder is located beside the resource container.
For Kontakt Player encoded library instruments, the Data folder is located here:
macOS: /Users/<UserName>/Library/Application Support/<LibraryName>/
Windows: C:\Users\<UserName>\AppData\Local\<LibraryName>\
This mode can be used synchronously in on init, and asynchronously in on
persistence_changed, on ui_control and on pgs_changed callbacks.
2: The array is directly loaded from the data folder inside the resource
container.
This mode can be used synchronously in on init, and asynchronously in on
persistence_changed, on ui_control and on pgs_changed callbacks.","- It is also possible to load real and string arrays from .nka files.
- It is not possible to load an array named %xyz from an .nka file into array %abc. The variable
names have to match precisely.
- The array data is not directly available after the load_array() command has been executed,
since the command works asynchronously. The only situation in which the values are instantly
available is when using mode 1 or mode 2 inside on init callback.
- When using mode 0, the callback continues even if the loading dialog is still open.
- When loading an array within the on init callback, please note that the array will implicitly be
made persistent (as if make_persistent() command was used) , which results in loaded data
being overwritten at the end of the callback. Use read_persistent_var() before loading the array
to avoid this problem.
- .nka files loaded from the resource container should always have a newline character at
the end of the file. If this last newline is missing, Kontakt cannot know the file has ended
and will continue to try and load other data from the resource container. Files generated
by the save_array() command have this automatically, but if you are creating NKA files via
different means, this is something to be aware of.","on init
    declare $count
    declare $load_arr_id := -1
    declare $save_arr_id := -1
    declare %preset[8]

    declare ui_button $Load
    declare ui_button $Save
    declare ui_table %table[8] (2,2,100)

    make_persistent(%table)
end on

on ui_control (%table)
    $count := 0
    while ($count < 8)
        %preset[$count] := %table[$count]

        inc($count)
    end while
end on

on ui_control ($Load)
    $load_arr_id := load_array(%preset, 0)
end on

on ui_control ($Save)
    $save_arr_id := save_array(%preset, 0)
end on

on async_complete
    if ($NI_ASYNC_ID = $load_arr_id)
        $load_arr_id := -1
        $Load := 0

        if ($NI_ASYNC_EXIT_STATUS = 1)
            $count := 0
            while($count < 8)
                %table[$count] := %preset[$count]

                inc($count)
            end while
        end if
    end if

    if ($NI_ASYNC_ID = $save_arr_id)
        $save_arr_id := -1
        $Save := 0
    end if
end on
Exporting and loading the contents of a ui_table widget.","on async_complete
save_array()
General: $NI_ASYNC_ID, $NI_ASYNC_EXIT_STATUS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,160,6053,15. Load/Save Commands,load_array_str(),load_array_str,"array-variable,path","Loads an array from an external .nka file, using an absolute path to the file.
<array-variable>: The name of the array variable, this must be present as the first line of the .nka file.

<path>: The absolute path of the .nka file.","- The behaviour is similar to load_array() with mode set to 0, but instead of manually choosing
an .nka file, you can specify it with an absolute path.
- This command can be used synchronously in on init, and asynchronously in on
persistence_changed, on ui_control and on pgs_changed callbacks.
- load_array_str() does not have the same implicitly persistent behavior as
load_array() does!
- Always use forwards slash (/) when working with absolute file paths in Kontakt!","on init
    message("""")
    set_ui_height(2)

    declare $count
    declare $load_arr_id := -1
    declare %preset[8]
    declare @file_path
    declare @basepath_browser
    { set browser path here, for example:
    @basepath_browser := ""/Users/<username>/Desktop/Arrays"" }

    declare ui_file_selector $file_browser
    declare ui_table %table[8] (2, 2, 100)

    declare $browser_id
    $browser_id := get_ui_id($file_browser)

    set_control_par_str($browser_id, $CONTROL_PAR_BASEPATH, @basepath_browser)
    set_control_par($browser_id, $CONTROL_PAR_WIDTH, 112)
    set_control_par($browser_id, $CONTROL_PAR_HEIGHT, 68)
    set_control_par($browser_id, $CONTROL_PAR_COLUMN_WIDTH, 110)
    set_control_par($browser_id, $CONTROL_PAR_FILE_TYPE, $NI_FILE_TYPE_ARRAY)

    make_persistent(@file_path)
    make_persistent(%table)

    move_control_px($file_browser, 66, 2)
    move_control(%table, 3, 1)
end on

on async_complete
    if ($NI_ASYNC_ID = $load_arr_id)
        $load_arr_id := -1

        if ($NI_ASYNC_EXIT_STATUS = 0)
            message(""Array not found!"")
        else
            message("""")

            $count := 0
            while ($count < num_elements(%preset))
                %table[$count] := %preset[$count]

                inc($count)
            end while
        end if
    end if
end on

on ui_control ($file_browser)
    @file_path := fs_get_filename($browser_id, 2)
    $load_arr_id := load_array_str(%preset, @file_path)
end on
Loading different table presets with a browser. Make sure to first  set the browser path of the file
selector to point to a folder with compatible .nka files.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,162,6132,15. Load/Save Commands,load_ir_sample(),load_ir_sample,"path-or-filename,slot,generic","Loads an impulse response sample into Kontakt's convolution effect.
<path-or-filename>: The absolute file path of the IR sample.If no path is specified, the command will look for the specified sample within
the ir_samples folder of the resource container.
If no resource container is available, the folder ir_samples within the Kontakt
user folder will be checked.
The Kontakt user folder is located here:
macOS: /Users/<username>/Documents/Native Instruments/
Kontakt 8/
Windows: C:\Users\<username>\Documents\Native
Instruments\Kontakt 8\
<slot>: The slot index of the convolution effect (zero-based).
<generic>: Specifies whether the convolution effect is used as an:
$NI_SEND_BUS: Send effect
$NI_INSERT_BUS: Insert effect
$NI_MAIN_BUS: Main effect
For buses, this parameter specifies the actual bus:
$NI_BUS_OFFSET + [0 ... 15]: One of the 16 buses","- Please note that any subfolders inside the ir_samples folder of the resource container will
not be scanned, and it is not recommended to add them manually via text strings. Doing so
could lead to problems, because subfolders will be ignored during the creation of a resource
container monolith.
- When loading impulse response samples from the resource container, it is not necessary to
include the file extension.
- Always use forwards slash (/) when working with absolute file paths in Kontakt!","on init
    declare $load_ir_id := -1
    declare ui_button $Load
end on

on ui_control ($Load)
    $load_ir_id := load_ir_sample(""Small Ambience.wav"", 0, $NI_SEND_BUS)
    $Load := 0
end on

on async_complete
    if ($NI_ASYNC_ID = $load_ir_id)
        $load_ir_id := -1

        if ($NI_ASYNC_EXIT_STATUS = 0)
            message(""IR sample not found!"")
        else
            message(""IR sample loaded!"")
        end if
    end if
end on
Load an IR sample into a convolution reverb, placed in the first  slot of send effect chain.","get_folder()
on async_complete
General: $NI_ASYNC_ID",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,164,6195,15. Load/Save Commands,save_array(),save_array,"array-variable,mode","Saves an array to an external .nka file
<array-variable>: The name of the array variable to be saved.
<mode>: 0: A dialog window pops up, allowing you to save the .nka file. This mode
can only be used in on persistence_changed, on ui_control and on
pgs_changed callbacks.
1: The array is directly saved in the Data folder.
For user instruments, the Data folder is located beside the resource container.
For Kontakt Player encoded library instruments, the Data folder is located here:
macOS: /Users/<UserName>/Library/Application Support/<LibraryName>/
Windows: C:\Users\<UserName>\AppData\Local\<LibraryName>\
This mode can be used synchronously in on init, and asynchronously
in on persistence_changed, on ui_control and on pgs_changed
callbacks.","- It is also possible to save real and string arrays into .nka files.
- The exported .nka file consists of the name of the array followed by all its values, one value per
line.
- When using mode 0, the callback continues even if the loading dialog is still open.",,"on async_complete
load_array()
General: $NI_ASYNC_ID, $NI_ASYNC_EXIT_STATUS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,165,6225,15. Load/Save Commands,save_array_str(),save_array_str,"array-variable,path","Saves an array to an external .nka file with the specified absolute path.
<array-variable>: The name of the array variable to be saved.
<path>: The absolute path of the .nka file to be saved.","- The behaviour is similar to save_array(), but instead of manually choosing a save location,
you can directly save the file to the specified location.
- If the file does not exist, but the folder does, a new .nka file will be created.
- This command can be used synchronously in on init, and asynchronously in on
persistence_changed, on ui_control and on pgs_changed callbacks.
- Always use forwards slash (/) when working with absolute file paths in Kontakt!","on init
    message("""")
    set_ui_height(2)

    declare $count
    declare $save_arr_id := -1
    declare %preset[8]
    declare @path
    { set save path here, for example:
    @path := ""/Users/<username>/Desktop/Arrays/"" }

    declare ui_button $Save
    declare ui_label $pattern_lbl (1, 1)
    declare ui_text_edit @preset_name
    declare ui_table %table[8] (2, 2, 100)

    make_persistent(%table)
    make_persistent(@preset_name)

    set_control_par(get_ui_id(@preset_name), $CONTROL_PAR_FONT_TYPE, 10)

    move_control_px(@preset_name, 73 + (3 * 92), 2)
    move_control_px($pattern_lbl, 66 + (3 * 92), 2)

    set_control_par_str(get_ui_id(@preset_name), $CONTROL_PAR_TEXT, ""<empty>"")
    set_text($pattern_lbl, """")
end on

on ui_control (%table)
    $count := 0
    while ($count < num_elements(%preset))
        %preset[$count] := %table[$count]

        inc($count)
    end while
end on

on ui_control ($Save)
    $save_arr_id := save_array_str(%preset, @path & @preset_name & "".nka"")
end on

on async_complete
    if ($NI_ASYNC_ID = $save_arr_id)
        $save_arr_id := -1
        $Save := 0
    end if
end on
Save table presets with custom names. Make sure to set the path where the .nka files  will be saved.","save_array()
load_array_str()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,167,6297,15. Load/Save Commands,save_array_str(),save_midi_file,path,"Saves a MIDI file with the range specified by the mf_set_export_area() command.
<path>: The absolute path of the MIDI file to be saved.",- Always use forwards slash (/) when working with absolute file paths in Kontakt!,"on init
    message("""")

    declare $save_mf_id := -1
    declare @path
    { set save path here, for example
    @path := ""/Users/<username>/Desktop/MIDI Files/"" }

    declare ui_text_edit @file_name
    declare ui_label $file_name_lbl (1, 1)
    declare ui_button $Save

    make_persistent(@file_name)

    set_control_par(get_ui_id(@file_name), $CONTROL_PAR_FONT_TYPE, 10)
    set_control_par_str(get_ui_id(@file_name), $CONTROL_PAR_TEXT, ""<empty>"")

    set_text($file_name_lbl, """")

    move_control($Save, 2, 1)
    move_control_px(@file_name, 73, 2)
    move_control_px($file_name_lbl, 66, 2)
end on

on ui_control ($Save)
    $save_mf_id := save_midi_file(@path & @file_name & "".mid"")
end on

on async_complete
    if ($NI_ASYNC_ID = $save_mf_id)
        $save_mf_id := -1
        $Save := 0
    end if
end on
Saving a MIDI file.","mf_insert_file()
mf_set_export_area()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,171,6419,16. MIDI Object Commands,by_track(),by_track,track,"Used to access events grouped by their track number.
<track>: The track number of the events you wish to access.",- Similar in functionality to the by_marks() command.,,"mf_insert_file()
mf_insert_event()
mf_remove_event()
Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
by_marks()
mf_set_mark()
mf_get_mark()
mf_get_id()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,172,6441,16. MIDI Object Commands,mf_copy_export_area(),mf_copy_export_area,index,Copies the contents of MIDI export area 0 to the export area with the specified <index>.,,"on init
    message("""")
    make_perfview

    declare const $DND_AREAS := 4

    declare ui_label $label1 (1,1)
    declare ui_label $label2 (1,1)
    declare ui_label $label3 (1,1)
    declare ui_label $label4 (1,1)

    declare $i
    declare %ID[$DND_AREAS]
    %ID[0] := get_ui_id($label1)
    %ID[1] := get_ui_id($label2)
    %ID[2] := get_ui_id($label3)
    %ID[3] := get_ui_id($label4)
    declare !track_names[$DND_AREAS]
    !track_names[0] := ""Synth 1""
    !track_names[1] := ""Synth 2""
    !track_names[2] := ""Bass""
    !track_names[3] := ""Melody""

    mf_insert_file(get_folder($GET_FOLDER_PATCH_DIR) & ""my_midi.mid"", 0, 0, 0)
    mf_set_num_export_areas($DND_AREAS + 1)

    $i := 0
    while ($i < $DND_AREAS)
        set_control_par(%ID[$i], $CONTROL_PAR_DND_BEHAVIOUR, 1)
        set_control_par(%ID[$i], $CONTROL_PAR_MIDI_EXPORT_AREA_IDX, $i + 1)
        set_control_par_str(%ID[$i], $CONTROL_PAR_TEXT, !track_names[$i])

        mf_set_export_area(!track_names[$i], -1, -1, $i, $i)
        mf_copy_export_area($i + 1)

        inc($i)
    end while
end on
Loads a MIDI file  and distributes the content found in the first  four MIDI channels to four separate
MIDI areas.","mf_set_export_area()
mf_set_num_export_areas()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,173,6495,16. MIDI Object Commands,mf_get_buffer_size(),mf_get_buffer_size,,Returns the size of the MIDI object's event buffer.,"- The maximum buffer size is 1000000 events, including both active and inactive events.
- Inserting a MIDI event will decrease the buffer size by one. Removing an event will increase it
by one.",,"mf_insert_file()
mf_set_buffer_size()
mf_reset()
mf_insert_event()
mf_remove_event()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,174,6515,16. MIDI Object Commands,mf_get_event_par(),mf_get_event_par,"event-id,parameter","Returns the value of an event parameter.
<event-id>: The ID of the event to be edited.
<parameter>: The event parameter, either one of four freely assignable event parameters:
$EVENT_PAR_0
$EVENT_PAR_1
$EVENT_PAR_2
$EVENT_PAR_3
or the built-in parameters of a event:
$EVENT_PAR_MIDI_CHANNEL
$EVENT_PAR_MIDI_COMMAND
$EVENT_PAR_MIDI_BYTE_1
$EVENT_PAR_MIDI_BYTE_2
$EVENT_PAR_POS
$EVENT_PAR_NOTE_LENGTH
$EVENT_PAR_ID
$EVENT_PAR_TRACK_NR","- You can access all events in the MIDI object by using the $ALL_EVENTS constant as the event
ID.
- You can access the currently selected event by using the $CURRENT_EVENT constant.
- You can also access events by track, or group them with event marks by using the
by_track() and by_marks() commands.",,"mf_insert_file()
mf_insert_event()
mf_remove_event()
mf_get_id()
save_midi_file()
Events and MIDI: $CURRENT_EVENT",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,175,6552,16. MIDI Object Commands,mf_get_first(),mf_get_first,track-index,"Moves the position marker to the first event in the MIDI track.
<track-index>: The number of the track you want to edit. -1 refers to the whole file.",- Using this command will also select the event at the position marker for editing.,,"mf_insert_file()
mf_get_next()
mf_get_next_at()
mf_get_num_tracks()
mf_get_prev()
mf_get_prev_at()
mf_get_last()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,176,6573,16. MIDI Object Commands,mf_get_id(),mf_get_id,,"Returns the ID of the currently selected event, when using the navigation commands like
mf_get_first(), mf_get_next(), etc.",,,"mf_get_first()
mf_get_next()
mf_get_next_at()
mf_get_prev()
mf_get_prev_at()
mf_get_last()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,177,6589,16. MIDI Object Commands,mf_get_last(),mf_get_last,track-index,"Moves the position marker to the last event in the MIDI track.
<track-index>: The number of the track you want to edit. -1 refers to the whole file.",- Using this command will also select the event at the position marker for editing.,,"mf_insert_file()
mf_get_first()
mf_get_next()
mf_get_next_at()
mf_get_num_tracks()
mf_get_prev()
mf_get_prev_at()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,178,6610,16. MIDI Object Commands,mf_get_last_filename(),mf_get_last_filename,,"Returns the filename (not the full path!) of the last MIDI file that was inserted into Kontakt, either via
mf_insert_file(), or via drag and drop operation on ui_mouse_area.","- This command will pair Note On and Note Off events to a single Note On with a Note Length
parameter. The Note Off events will be discarded.","on init
    message("""")
    make_perfview

    declare const $DND_AREAS := 4

    declare ui_label $label1 (1,1)
    declare ui_label $label2 (1,1)
    declare ui_label $label3 (1,1)
    declare ui_label $label4 (1,1)

    declare $i
    declare %ID[$DND_AREAS]
    %ID[0] := get_ui_id($label1)
    %ID[1] := get_ui_id($label2)
    %ID[2] := get_ui_id($label3)
    %ID[3] := get_ui_id($label4)
    declare !track_names[$DND_AREAS]
    !track_names[0] := ""Synth 1""
    !track_names[1] := ""Synth 2""
    !track_names[2] := ""Bass""
    !track_names[3] := ""Melody""

    mf_insert_file(get_folder($GET_FOLDER_PATCH_DIR) & ""my_midi.mid"", 0, 0, 0)
    { declare export areas, area 0 serves as an edit buffer, so add one extra }
    mf_set_num_export_areas($DND_AREAS + 1)

    $i := 0
    while ($i < $DND_AREAS)
        set_control_par(%ID[$i], $CONTROL_PAR_DND_BEHAVIOUR, 1)
        set_control_par(%ID[$i], $CONTROL_PAR_MIDI_EXPORT_AREA_IDX, $i + 1)
        set_control_par_str(%ID[$i], $CONTROL_PAR_TEXT, mf_get_last_filename & "" ""
& !track_names[$i])

        mf_set_export_area(!track_names[$i], -1, -1, $i, $i)
        mf_copy_export_area($i + 1)

        inc($i)
    end while
end on
MIDI file  loader which allows exporting first  four tracks as individual MIDI files.  Utilizes
mf_get_last_filename() to show the exact name of the MIDI file  that was loaded.",mf_insert_file(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,180,6671,16. MIDI Object Commands,mf_get_mark(),mf_get_mark,"event-id,mark","Checks if an event is marked or not. Returns 1 if it is marked or 0 if it is not.
<event-id>: The ID of the event to be edited
<mark>: The event mark number, $MARK_1 ... $MARK_10 . You can also assign
more than one mark to a single event, either by typing the command again, or
by using the bitwise .or. operator, or by simply summing the event marks.",,,"mf_insert_file()
mf_insert_event()
mf_remove_event()
Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
by_marks()
by_track()
mf_set_mark()
mf_get_mark()
mf_get_id()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,181,6694,16. MIDI Object Commands,mf_get_next(),mf_get_next,track-index,"Moves the position marker to the next event in the MIDI track.
<track-index>: The number of the track you want to edit. -1 refers to the whole file.",- Using this command will also select the event at the position marker for editing.,,"load_midi_file()
mf_get_first()
mf_get_next_at()
mf_get_num_tracks()
mf_get_prev()
mf_get_prev_at()
mf_get_last()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,182,6715,16. MIDI Object Commands,mf_get_next_at(),mf_get_next_at,"track-index,pos","Moves the position marker to the next event in the MIDI track right after the defined position.
<track-index>: The number of the track you want to edit. -1 refers to the whole file.
<pos>: Position in MIDI ticks.",- Using this command will also select the event at the position marker for editing.,,"load_midi_file()
mf_get_first()
mf_get_next()
mf_get_num_tracks()
mf_get_prev()
mf_get_prev_at()
mf_get_last()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,183,6737,16. MIDI Object Commands,mf_get_num_tracks(),mf_get_num_tracks,,Returns the number of tracks in the MIDI object.,,,"mf_insert_file()
mf_get_first()
mf_get_next()
mf_get_next_at()
mf_get_prev()
mf_get_prev_at()
mf_get_last()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,184,6754,16. MIDI Object Commands,mf_get_prev(),mf_get_prev,track-index,"Moves the position marker to the previous event in the MIDI track.
<track-index>: The number of the track you want to edit. -1 refers to the whole file.",- Using this command will also select the event at the position marker for editing.,,"load_midi_file()
mf_get_first()
mf_get_next()
mf_get_next_at()
mf_get_num_tracks()
mf_get_prev_at()
mf_get_last()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,185,6775,16. MIDI Object Commands,mf_get_prev_at(),mf_get_prev_at,"track-index,pos","Moves the position marker to the first event before the defined position.
<track-index>: The number of the track you want to edit. -1 refers to the whole file.
<pos>: Position in MIDI ticks.",- Using this command will also select the event at the position marker for editing.,,"load_midi_file()
mf_get_first()
mf_get_next()
mf_get_next_at()
mf_get_num_tracks()
mf_get_prev()
mf_get_last()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,186,6797,16. MIDI Object Commands,mf_insert_event(),mf_insert_event,"track,pos,command,byte1,byte2","Activates an inactive MIDI event in the MIDI object. However, because the command and position
are defined in this command, it can be considered as an insertion.
<track>: The track into which the event will be inserted.
<pos>: The position at which the event will be inserted, in ticks.
<command>: Defines the command type of the event, can be one of the following:
$MIDI_COMMAND_NOTE_ON
$MIDI_COMMAND_POLY_AT
$MIDI_COMMAND_CC
$MIDI_COMMAND_PROGRAM_CHANGE
$MIDI_COMMAND_MONO_AT
$MIDI_COMMAND_PITCH_BEND
<byte1>The first byte of the command.
<byte2>The second byte of the command.","- It is not possible to insert MIDI events without first setting an event buffer size with the
mf_set_buffer_size() command.
- Using this command when the buffer is full, i.e. has a size of zero, will do nothing.
- You can retrieve the event ID of the inserted event into a variable by writing:
<variable> := mf_insert_event(<track>, <pos>, <command>, <byte1>,
<byte2>)",,"mf_insert_file()
mf_set_buffer_size()
mf_get_buffer_size()
mf_reset()
mf_remove_event()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,187,6832,16. MIDI Object Commands,mf_insert_file(),mf_insert_file,"path,track-offset,position-offset,mode","Inserts a MIDI file into the object.
<path>: The absolute path of the MIDI file, including the file name.
<track-offset>: Applies a track offset to the MIDI data.
<position-offset>: Applies a position offset, in ticks, to the MIDI data.
<mode>: Defines the mode of insertion:
0: Replaces all existing events
1: Replaces only overlapping events
2: Merges all events","- This command runs synchronously in on init callback and asynchronously in all other
callbacks, so it is advised to use the on async_complete callback to verify the loading
status.
- This command will pair Note On and Note Off events to a single Note On with a length
parameter. The Note Off events will be discarded.
- Always use forwards slash (/) when working with absolute file paths in Kontakt!","on init
    declare $load_mf_id := -1
    declare @file_name
    declare @filepath

    @file_name := ""test.mid""
    @filepath := get_folder($GET_FOLDER_FACTORY_DIR) & @file_name

    declare ui_button $load_file
end on

on ui_control($load_file)
    $load_mf_id := mf_insert_file(@filepath, 0, 0, 0)
end on

on async_complete
    if ($NI_ASYNC_ID = $load_mf_id)
        $load_mf_id := -1

        if ($NI_ASYNC_EXIT_STATUS = 0)
            message(""ERROR: MIDI file not found!"")
        else
            message(""Loaded MIDI file: "" & @file_name & ""!"")
        end if
    end if
end on
Loading a MIDI file  with a button. In order for this to work, you will need to put a MIDI file
called ""test.mid"" into your Kontakt factory data folder. Otherwise, the defined  error message will
be displayed.","on async_complete
save_midi_file()
mf_set_event_par()
mf_get_event_par()
General: $NI_ASYNC_ID, $NI_ASYNC_EXIT_STATUS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,189,6894,16. MIDI Object Commands,mf_remove_event(),mf_remove_event,event-id,"Deactivates an event in the MIDI object, effectively removing it.
<event-id>: The ID of the event to be deactivated.",- Using this command will decrease the MIDI event buffer size by one.,,"mf_insert_file()
mf_set_buffer_size()
mf_get_buffer_size()
mf_reset()
mf_insert_event()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,190,6913,16. MIDI Object Commands,mf_reset(),mf_reset,,"Resets the MIDI object, sets the event buffer to zero, and removes all events.","- This command purges all data in the MIDI object. Use with caution!
- This command is asynchronous, thus it returns an async ID and calls the on
async_complete callback.",,"mf_insert_file()
mf_set_buffer_size()
mf_reset()
mf_insert_event()
mf_remove_event()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,191,6933,16. MIDI Object Commands,mf_set_buffer_size(),mf_set_buffer_size,num-events,"Defines a number of inactive MIDI events, that can be activated and edited.
<num-events>: The size of the MIDI object edit buffer.","- Using the mf_insert_event() and mf_remove_event() technically activates or
deactivates events in the buffer.
- It is not possible to insert MIDI events without setting a buffer size first.
- The maximum buffer size is 1000000 events, including both active and inactive events.
- This command runs synchronously in on init callback and asynchronously in all other
callbacks, so it is advised to use the on async_complete callback to verify the loading
status.
- Inserting a MIDI event will decrease the buffer size by one. Removing an event will increase it
by one.
- Inserting a MIDI file will not affect the buffer.",,"mf_insert_file()
mf_get_buffer_size()
mf_reset()
mf_insert_event()
mf_remove_event()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,192,6961,16. MIDI Object Commands,mf_set_event_par(),mf_set_event_par,"event-id,parameter,value","Sets an event parameter.
<event-id>: The ID of the event to be edited.
<parameter>: The event parameter, either one of four freely assignable event parameters:
$EVENT_PAR_0
$EVENT_PAR_1
$EVENT_PAR_2
$EVENT_PAR_3
Or the built-in parameters of a event:
$EVENT_PAR_MIDI_CHANNEL
$EVENT_PAR_MIDI_COMMAND
$EVENT_PAR_MIDI_BYTE_1
$EVENT_PAR_MIDI_BYTE_2
$EVENT_PAR_POS
$EVENT_PAR_NOTE_LENGTH
$EVENT_PAR_ID
$EVENT_PAR_TRACK_NR
<value>: The value of the event parameter.","- You can control all events in the MIDI object by using the $ALL_EVENTS constant as the event
ID.
- You can access the currently selected event by using the $CURRENT_EVENT constant.
- You can also control events by track, or group them with event marks by using the
by_track() and by_marks() commands.",,"mf_insert_file()
mf_insert_event()
mf_remove_event()
Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
by_marks()
by_track()
mf_set_mark()
mf_get_id()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,193,7002,16. MIDI Object Commands,mf_set_export_area(),mf_set_export_area,"name,start-pos,end-pos,start-track,end-track","Defines the part of the object that will be exported when using a drag and drop area, or when using
save_midi_file() command.
<name>: Sets the name of the exported file.
<start-pos>: Defines the start position (in ticks) of the export area.
Use -1 to set this to the start of the object.
<end-pos>: Defines the end position (in ticks) of the export area.
Use -1 to set this to the end of the object.
<start-track>: Defines the first track to be included in the export area.Use -1 to set this to the first track of the object.

<end-track>: Defines the last track to be included in the export area.
Use -1 to set this to the last track of the object.","- If a start point is given a value greater than the end point, the values will be swapped.
- When this command is executed, the events in the range are checked if they are valid MIDI
commands. The command will return a value of 0 if all events are valid, otherwise it will return
the event ID of the first invalid event.","on init
    declare $area_status
    declare @filepath
    @filepath := get_folder($GET_FOLDER_FACTORY_DIR) & ""test.mid""

    declare ui_button $CheckMIDI

    mf_insert_file(@filepath, 0, 0, 0)
end on

on ui_control($CheckMIDI)
    $area_status := mf_set_export_area(“name”, -1, -1,-1,-1)

    if ($area_status = 0)
        message(“All Good”)
    else
        message(“Error: Check event with ID ” & $area_status & ""!"")
    end if

    $CheckMIDI := 0
end on
A simple script, using this command to check if all events in a MIDI file  are valid. If there is an error it
will display the event ID of the first  invalid event. In order for this to work you will have to put a MIDI
file  called ""test.mid"" into your Kontakt factory data folder.","mf_insert_file()
save_midi_file()
Specific UI Widgets: $CONTROL_PAR_DND_BEHAVIOUR",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,195,7057,16. MIDI Object Commands,mf_set_mark(),mf_set_mark,"event-id,mark,status","Marks an event, so that you may group events together and process that group quickly.
<event-id>: The ID of the event to be marked.
<mark>: The event mark number, $MARK_1 ... $MARK_10 . You can also assign
more than one mark to a single event, either by typing the command again, or
by using the bitwise .or. operator, or by simply summing the event marks.
<status>: Set this to 1 to mark an event or to 0 to unmark an event.",,,"mf_insert_file()
mf_insert_event()
mf_remove_event()
Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
by_marks()
by_track()
mf_get_mark()
mf_get_id()
save_midi_file()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,196,7080,16. MIDI Object Commands,mf_set_num_export_areas(),mf_set_num_export_areas,num-areas,"Sets the number of export areas, with a maximum of 512.","- Area index 0 is always set with mf_set_export_area().
- The contents of area index 0 can be copied to other areas by calling
mf_copy_export_area().",,"mf_set_export_area()
mf_copy_export_area()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,198,7107,17. Music Information Retrieval,detect_key(),detect_key,"zone-id,key-result","Assigns <key-result> a $NI_DETECT_KEY tag describing the musical key of the audio sample.
If detection fails, the function will return $NI_DETECT_KEY_INVALID.
<zone-id>: The ID of the zone.
<key-result>: The detected musical key, can be one of the following:
$NI_DETECT_KEY_C_MAJOR
$NI_DETECT_KEY_CSHARP_MAJOR
$NI_DETECT_KEY_D_MAJOR
$NI_DETECT_KEY_DSHARP_MAJOR
$NI_DETECT_KEY_E_MAJOR
$NI_DETECT_KEY_F_MAJOR
$NI_DETECT_KEY_FSHARP_MAJOR
$NI_DETECT_KEY_G_MAJOR
$NI_DETECT_KEY_GSHARP_MAJOR
$NI_DETECT_KEY_A_MAJOR
$NI_DETECT_KEY_ASHARP_MAJOR
$NI_DETECT_KEY_B_MAJOR
$NI_DETECT_KEY_C_MINOR
$NI_DETECT_KEY_CSHARP_MINOR
$NI_DETECT_KEY_D_MINOR
$NI_DETECT_KEY_DSHARP_MINOR
$NI_DETECT_KEY_E_MINOR
$NI_DETECT_KEY_F_MINOR
$NI_DETECT_KEY_FSHARP_MINOR
$NI_DETECT_KEY_G_MINOR
$NI_DETECT_KEY_GSHARP_MINOR
$NI_DETECT_KEY_A_MINOR
$NI_DETECT_KEY_ASHARP_MINOR
$NI_DETECT_KEY_B_MINOR",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,199,7141,17. Music Information Retrieval,detect_pitch(),detect_pitch,"zone-id,pitch-result","Returns a real value representing the fundamental frequency of an audio sample, in semitones and
cents. If detection fails, the function will return ~NI_DETECT_PITCH_INVALID.
<zone-id>: The ID of the zone.
<pitch-result>: The MIDI note value of the detected pitch.",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,200,7151,17. Music Information Retrieval,detect_loudness(),detect_loudness,"zone-id,loudness-result","Returns a real value representing the loudness of an audio sample in decibels. Loudness is
measured according to the standard established by the International Telecommunication Union:
Algorithms to measure audio program loudness and true-peak audio level - ITU-R BS.1770-4 (2015). If
detection fails, the function will return ~NI_DETECT_LOUDNESS_INVALID.
<zone-id>: The ID of the zone.
<loudness-result>: The real value of the detected loudness in decibels.",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,201,7163,17. Music Information Retrieval,detect_peak(),detect_peak,"zone-id,peak-result","Returns a real value representing peak level of an audio sample in decibels. Peak is measured
according to the standard established by the International Telecommunication Union: Algorithms
to measure audio program loudness and true-peak audio level - ITU-R BS.1770-4 (2015). If detection
fails, the function will set <peak-result> to ~NI_DETECT_PEAK_INVALID.
<zone-id>: The ID of the zone.
<peak-result>: The real value of the detected peak level in decibels.",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,202,7175,17. Music Information Retrieval,detect_rms(),detect_rms,"zone-id,rms-result","Returns a real value representing the RMS level of an audio sample in decibels. If detection fails, the
function will return ~NI_DETECT_RMS_INVALID.
<zone-id>: The ID of the zone.
<rms-result>: The real value of the RMS level of the audio sample in decibels.",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,203,7185,17. Music Information Retrieval,detect_tempo(),detect_tempo,"zone-id,tempo-result","Returns a real value representing the detected tempo of the audio sample, in BPM. If detection fails,
the function will return ~NI_DETECT_TEMPO_INVALID.
<zone-id>: The ID of the zone.
<tempo-result>: The BPM value of the detected tempo.",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,204,7195,17. Music Information Retrieval,detect_sample_type(),detect_sample_type,"zone-id,sample-type-result","Assigns <sample-type-result> a $NI_DETECT_SAMPLE_TYPE tag describing the whether
an audio sample is a drum or an instrument. If detection fails, the function will return
$NI_DETECT_SAMPLE_TYPE_INVALID.
<zone-id>: The ID of the zone.
<sample-type-result>: The detected sample type, can be one of the following:$NI_DETECT_SAMPLE_TYPE_INVALID
$NI_DETECT_SAMPLE_TYPE_INSTRUMENT
$NI_DETECT_SAMPLE_TYPE_DRUM",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,205,7208,17. Music Information Retrieval,detect_drum_type(),detect_drum_type,"zone-id,drum-type-result","Assigns <drum-type-result> a $NI_DETECT_DRUM_TYPE tag describing the drum type of an
audio sample. You can use this function if detect_sample_type() determines that a given audio
sample is of type $NI_DETECT_SAMPLE_TYPE_DRUM. If detection fails, the function will return
~NI_DETECT_DRUM_TYPE_INVALID.
<zone-id>: The ID of the zone.
<drum-type-result>: The detected drum type, can be one of the following:$NI_DETECT_DRUM_TYPE_INVALID
$NI_DETECT_DRUM_TYPE_KICK
$NI_DETECT_DRUM_TYPE_SNARE
$NI_DETECT_DRUM_TYPE_CLOSED_HH
$NI_DETECT_DRUM_TYPE_OPEN_HH
$NI_DETECT_DRUM_TYPE_TOM
$NI_DETECT_DRUM_TYPE_CYMBAL
$NI_DETECT_DRUM_TYPE_CLAP
$NI_DETECT_DRUM_TYPE_SHAKER
$NI_DETECT_DRUM_TYPE_PERC_DRUM
$NI_DETECT_DRUM_TYPE_PERC_OTHER",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,206,7230,17. Music Information Retrieval,detect_instrument_type(),detect_instrument_type,"zone-id,instr-type-result","Assigns <instr-type-result> a $NI_DETECT_INSTRUMENT_TYPE tag describing the
instrument type of an audio sample. Hint: use this function if detect_sample_type()
determines that a given audio sample is of type $NI_DETECT_SAMPLE_TYPE_INSTRUMENT. If
detection fails, the function will return $NI_DETECT_INSTRUMENT_TYPE_INVALID.
<zone-id>: The ID of the zone
<instr-type-result>: The detected instrument type, can be one of the following:$NI_DETECT_INSTRUMENT_TYPE_INVALID
$NI_DETECT_INSTRUMENT_TYPE_BASS
$NI_DETECT_INSTRUMENT_TYPE_BOWED_STRING
$NI_DETECT_INSTRUMENT_TYPE_BRASS
$NI_DETECT_INSTRUMENT_TYPE_FLUTE
$NI_DETECT_INSTRUMENT_TYPE_GUITAR
$NI_DETECT_INSTRUMENT_TYPE_KEYBOARD
$NI_DETECT_INSTRUMENT_TYPE_MALLET
$NI_DETECT_INSTRUMENT_TYPE_ORGAN
$NI_DETECT_INSTRUMENT_TYPE_PLUCKED_STRING
$NI_DETECT_INSTRUMENT_TYPE_REED
$NI_DETECT_INSTRUMENT_TYPE_SYNTH
$NI_DETECT_INSTRUMENT_TYPE_VOCAL",,"on init
    message("""")

    declare ~pitch_result

    set_num_user_zones(1)

    declare ui_mouse_area $Drop
    declare ui_label $Info (1, 1)

    set_text($Info, ""Drop sample here!"")

    move_control_px($Drop, 66, 2)
    move_control_px($Info, 66, 2)

    set_control_par(get_ui_id($Drop), $CONTROL_PAR_DND_ACCEPT_AUDIO,
$NI_DND_ACCEPT_ONE)
    set_control_par(get_ui_id($Drop), $CONTROL_PAR_WIDTH, 150)
    set_control_par(get_ui_id($Info), $CONTROL_PAR_WIDTH, 150)

    set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_HIGH_KEY, 127)
    set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_LOW_VELO, 1)
    set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_HIGH_VELO, 127)
    set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, 0)
end on

on ui_control ($Drop)
    if ($NI_MOUSE_EVENT_TYPE = $NI_MOUSE_EVENT_TYPE_DROP)
        wait_async(set_sample(%NI_USER_ZONE_IDS[0], !NI_DND_ITEMS_AUDIO[0]))

        wait_async(detect_pitch(%NI_USER_ZONE_IDS[0], ~pitch_result))
        wait_async(set_zone_par(%NI_USER_ZONE_IDS[0], ...
                                $ZONE_PAR_ROOT_KEY, ...
                                int(round(~pitch_result))))
        wait_async(set_zone_par(%NI_USER_ZONE_IDS[0], ...
                                $ZONE_PAR_TUNE, ...
                                int(100.0 * (round(~pitch_result) - ~pitch_result))
    end if
end on
Set the zone root key by rounding the pitch result to an integer value, then set the zone tune to
correct for the pitch offset.
on init
    message("""")

    set_num_user_zones(1)

    declare ui_mouse_area $Drop
    declare ui_label $Info (1, 1)

    declare $sample_type
    declare $instrument_type
    declare $drum_type
    declare !drum_types[10]
    !drum_types[$NI_DETECT_DRUM_TYPE_KICK]       := ""Kick""
    !drum_types[$NI_DETECT_DRUM_TYPE_SNARE]      := ""Snare""
    !drum_types[$NI_DETECT_DRUM_TYPE_CLOSED_HH]  := ""Closed Hi-Hat""
    !drum_types[$NI_DETECT_DRUM_TYPE_OPEN_HH]    := ""Open Hi-Hat""
    !drum_types[$NI_DETECT_DRUM_TYPE_TOM]        := ""Tomr""
    !drum_types[$NI_DETECT_DRUM_TYPE_CYMBAL]     := ""Cymbal""
    !drum_types[$NI_DETECT_DRUM_TYPE_CLAP]       := ""Clap""
    !drum_types[$NI_DETECT_DRUM_TYPE_SHAKER]     := ""Shaker""
    !drum_types[$NI_DETECT_DRUM_TYPE_PERC_DRUM]  := ""Drum Percussion""
    !drum_types[$NI_DETECT_DRUM_TYPE_PERC_OTHER] := ""Misc Percussion""
    declare !instrument_types[12]
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_BASS]           := ""Bass""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_BOWED_STRING]   := ""Bowed String""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_BRASS]          := ""Brass""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_FLUTE]          := ""Flute""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_GUITAR]         := ""Guitar""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_KEYBOARD]       := ""Keyboard""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_MALLET]         := ""Mallet""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_ORGAN]          := ""Organ""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_PLUCKED_STRING] := ""Plucked String""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_REED]           := ""Reed""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_SYNTH]          := ""Synth""
    !instrument_types[$NI_DETECT_INSTRUMENT_TYPE_VOCAL]          := ""Vocal""

    set_text($Info, ""Drop sample here!"")

    move_control_px($Drop, 66, 2)
    move_control_px($Info, 66, 2)

    set_control_par(get_ui_id($Drop), $CONTROL_PAR_DND_ACCEPT_AUDIO,
$NI_DND_ACCEPT_ONE)
    set_control_par(get_ui_id($Drop), $CONTROL_PAR_WIDTH, 150)
    set_control_par(get_ui_id($Info), $CONTROL_PAR_WIDTH, 150)

    set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_HIGH_KEY, 127)
    set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_LOW_VELO, 1)
    set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_HIGH_VELO, 127)
    set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, 0)
end on

on ui_control ($Drop)
    if ($NI_MOUSE_EVENT_TYPE = $NI_MOUSE_EVENT_TYPE_DROP)
        wait_async(set_sample(%NI_USER_ZONE_IDS[0], !NI_DND_ITEMS_AUDIO[0]))
        wait_async(detect_sample_type(%NI_USER_ZONE_IDS[0], $sample_type))

        select ($sample_type)
            case $NI_DETECT_SAMPLE_TYPE_INSTRUMENT
                wait_async(detect_instrument_type(%NI_USER_ZONE_IDS[0],
$instrument_type))
            case $NI_DETECT_SAMPLE_TYPE_DRUM
                wait_async(detect_drum_type(%NI_USER_ZONE_IDS[0], $drum_type))
            case $NI_DETECT_SAMPLE_TYPE_INVALID
                set_text($Info, ""Cannot recognize sample type!"")
        end select

        if ($sample_type = $NI_DETECT_SAMPLE_TYPE_INSTRUMENT)
            if ($instrument_type = $NI_DETECT_INSTRUMENT_TYPE_INVALID)
                set_text($Info, ""Cannot recognize instrument type!"")
            else
                set_text($Info, ""Instrument: "" & !
instrument_types[$instrument_type])
            end if
        else
            if ($drum_type = $NI_DETECT_DRUM_TYPE_INVALID)
                set_text($Info, ""Cannot recognize drum type!"")
            else
                set_text($Info, ""Instrument: "" & !drum_types[$drum_type])
            end if
        end if
    end if
end on
Detect whether a sample is of type instrument or drum, and detect the corresponding drum or
instrument type.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,210,7388,18. Time-Related Commands,change_listener_par(),change_listener_par,"signal-type,parameter","Changes the parameters of the on listener callback. It can be used in any callback.
<signal-type>: The signal to be changed, can be:
$NI_SIGNAL_TIMER_MS
$NI_SIGNAL_TIMER_BEAT
<parameter>: Dependent on the specified signal type:
$NI_SIGNAL_TIMER_MS: Time interval in microseconds (minimum value is
1000 microseconds, which equals one millisecond)
$NI_SIGNAL_TIMER_BEAT: Time interval in fractions of a beat/quarter note
(1 ... 24)","- It is also possible to completely disable a particular listener signal by setting <parameter> to
0.","on init
    declare ui_value_edit $Tempo (20, 300, 1)
    declare ui_switch $Play

    make_persistent($Tempo)
    read_persistent_var($Tempo)

    $Tempo := 120

    set_listener($NI_SIGNAL_TIMER_MS, 60000000 / $Tempo)
end on

on listener
    if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_MS and $Play = 1)
        play_note(60, 127, 0, $DURATION_EIGHTH)
    end if
end on

on ui_control($Tempo)
    change_listener_par($NI_SIGNAL_TIMER_MS, 60000000 / $Tempo)
end on
A very basic metronome.","on listener
set_listener()
Callbacks and UI: $NI_SIGNAL_TYPE",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,211,7437,18. Time-Related Commands,ms_to_ticks(),ms_to_ticks,microseconds,Converts a microseconds value into a value in tempo-dependent MIDI ticks.,,"on init
    declare ui_label $bpm (1, 1)
    set_text($bpm, ms_to_ticks(60000000) / 960)
end on
Displaying the current host tempo.","ticks_to_ms()
Time and Transport: $NI_SONG_POSITION",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,212,7456,18. Time-Related Commands,set_listener(),set_listener,"signal-type,parameter","Sets the signals on which the listener callback should react to. Can only be used in the on init
callback.
<signal-type>: The event on which the listener callback should react. The following types are
available:
$NI_SIGNAL_TRANSP_STOP
$NI_SIGNAL_TRANSP_START
$NI_SIGNAL_TIMER_MS
$NI_SIGNAL_TIMER_BEAT
<parameter>: User defined parameter, dependant on the specified signal type:
$NI_SIGNAL_TIMER_MS: Time interval in microseconds (minimum value is
1000, which equals one millisecond)
$NI_SIGNAL_TIMER_BEAT: Time interval in fractions of a beat/quarter note
(1 ... 24)
$NI_SIGNAL_TRANSP_START: Set to 1 if the listener callback should react to
the host's transport start command
$NI_SIGNAL_TRANSP_STOP: Set to 1 if the listener callback should react to
the host's transport stop command","- When using $NI_SIGNAL_TIMER_BEAT, the maximum resolution is 24 ticks per beat/quarter
note.","on init
    set_listener($NI_SIGNAL_TIMER_BEAT, 1)
end on

on listener
    if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_BEAT)
        message($ENGINE_UPTIME)
    end if
end on
Triggering the listener callback every beat. Triggering will occur even when transport is stopped.","change_listener_par()
Callbacks and UI: $NI_SIGNAL_TYPE",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,213,7500,18. Time-Related Commands,stop_wait(),stop_wait,"callback-id,parameter","Stops wait commands in the specified callback.
<callback-id>: The callback’s ID number in which the wait commands will be stopped.
<parameter>: 0: stops only the current wait.
1: stops the current wait and ignores all following wait commands in this
callback.",- Be careful with while loops when stopping all wait() commands in a callback!,"on init
    declare $id

    declare ui_button $Play
end on

on ui_control ($Play)
    if ($Play = 1)
        $id := $NI_CALLBACK_ID

        play_note(60, 127, 0, $DURATION_QUARTER)

        wait($DURATION_QUARTER)

        if ($Play = 1)
            play_note(64, 127, 0, $DURATION_QUARTER)
        end if

        wait($DURATION_QUARTER)

        if ($Play = 1)
            play_note(67, 127, 0, $DURATION_QUARTER)
        end if
    else
        stop_wait($id, 1)
        fade_out($ALL_EVENTS, 10000, 1)
    end if
end on
The Play button triggers a simple triad arpeggio. Without the stop_wait() command, parallel
callbacks could occur when pressing the Play button quickly in succession resulting in multiple
arpeggios.","wait()
wait_async()
wait_ticks()
Callbacks and UI: Callback Type Variables and Constants",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,214,7553,18. Time-Related Commands,reset_ksp_timer,reset_ksp_timer,,Resets the KSP timer built-in variable ($KSP_TIMER) to zero.,"- Note that the $KSP_TIMER variable, due to its 32-bit signed nature, will reach its limit after
2147483648 microseconds, or roughly 35 minutes and 47 seconds.
- Since the KSP timer is based on the CPU clock, the main reason to use it is for debugging and
optimization. It is a great tool to measure the efficiency of certain script passages. However,
it should not be used for musical timing, as it remains at a real-time constant rate, even if
Kontakt is being used in an offline bounce.","on init
    declare $a
    declare $b
    declare $c
end on

on note
    reset_ksp_timer

    $c := 0
    while ($c < 128)
        $a := 0
        while($a < 128)
            set_event_par($EVENT_ID, $EVENT_PAR_TUNE, random(-1000, 1000))

            inc($a)
        end while

        inc($c)
    end while

    message($KSP_TIMER)
end on
A nested while loop – takes about 5400 to 5800 microseconds.","Time and Transport: $ENGINE_UPTIME, $KSP_TIMER",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,215,7598,18. Time-Related Commands,ticks_to_ms(),ticks_to_ms,ticks,Converts a tempo-dependent MIDI ticks value into a value in microseconds.,"- Since the returned value is in microseconds, note that due to its 32-bit signed nature it will not
return correct values if specified number of ticks at the current tempo exceeds 2147483648
microseconds, or roughly 35 minutes and 47 seconds.","on init
    declare $msec
    declare $sec
    declare $min

    declare ui_label $label (2, 1)

    set_listener($NI_SIGNAL_TIMER_MS, 1000)
end on

on listener
    if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_MS)
        $msec := ticks_to_ms($NI_SONG_POSITION) / 1000
        $sec := $msec / 1000
        $min := $sec / 60

        set_text($label, $min & "":"" & $sec mod 60 & ""."" & $msec mod 1000)
    end if
end on
Displaying the song position in realtime.","ms_to_ticks()
Time and Transport: $NI_SONG_POSITION",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,216,7636,18. Time-Related Commands,wait(),wait,wait-time,Pauses the callback for the specified time in microseconds.,"- wait() stops the callback at the position in the script for the specified time. In other words, it
freezes the callback, although other callbacks can still be processed during this time. After the
specified time, period the callback continues.","on note
    ignore_event($EVENT_ID)

    if ($DURATION_BAR = 0)
        wait(($DURATION_QUARTER * 4) - $DISTANCE_BAR_START)
    else
        wait($DURATION_BAR - $DISTANCE_BAR_START)
    end if

    play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
end on
Quantize all notes to the downbeat of the next measure. This script also takes care of the fact that in
Kontakt standalone, $DURATION_BAR returns 0, so instead of that we use the quarter note duration
to make up a 4/4 bar.","stop_wait()
wait_async()
wait_ticks()
while ()
Time and Transport: $DURATION_QUARTER",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,217,7672,18. Time-Related Commands,wait_async(),wait_async,async-id,Waits until the async command identified by the <async-id> is finished.,"- When performing multiple operations it is also possible to collect them together and then
calling the wait_async() function on the collection. When the operations are collected
in this manner they will be calculated in one block, resulting in a performance gain. If the
async operation is not in the pipeline anymore or is invalid, there is no waiting and the script
continues.","wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, ... $EFFECT_TYPE_CHORUS, -1, 2,
1))
Performing a single async operation.
%asyncid[0] := async_operation
%asyncid[1] := another_async_operation
...
%asyncid[x] := last_async_operation

$i := 0
while($i < num_elements(%asyncid))
    wait_async(%asyncid[$i])

    inc($i)
end while
Performing multiple async operations.","General: $NI_ASYNC_EXIT_STATUS, $NI_ASYNC_ID",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,218,7707,18. Time-Related Commands,wait_ticks(),wait_ticks,ticks,Pauses the callback for the specified time in MIDI ticks.,"- Same as wait() but with MIDI ticks as the wait time parameter.
- 960 MIDI ticks equals one quarter note.",,"stop_wait()
wait()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,219,7724,19. User Interface Commands,add_menu_item(),add_menu_item,"variable,text,value","Create an entry in a ui_menu widget.
<variable>: The variable name of the ui_menu widget.
<text>: The text of the menu entry.
<value>: The value of the menu entry.","- You can create menu entries only in the on init callback, but you can change their text and
value afterwards by using set_menu_item_str() and set_menu_item_value(). You
can add as many menu entries as you want, then show or hide them dynamically by using
set_menu_item_visibility().
- Using the $CONTROL_PAR_VALUE control parameter with the get_control_par()
command will return the currently selected menu index, not the currently selected value. If
you want to get the menu value instead, use the get_menu_item_value() command.","on init
    declare ui_menu $menu
    add_menu_item($menu, ""First Entry"", 0)
    add_menu_item($menu, ""Second Entry"", 1)
    add_menu_item($menu, ""Third Entry"", 2)
end on
A simple menu.","get_menu_item_str()
get_menu_item_value()
get_menu_item_visibility()
set_menu_item_str()
set_menu_item_visibility()
ui_menu
Specific UI Widgets: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,220,7761,19. User Interface Commands,add_text_line(),add_text_line,"variable,text","Add a new text line in the specified ui_label, without erasing existing text.
<variable>: The variable name of the ui_label widget.
<text>: The text to be displayed.",,"on init
    declare $count
    declare ui_label $label (1, 4)

    set_text($label, """")
end on

on note
    inc($count)

    select ($count)
        case 1
            set_text($label, $count & "": "" & $EVENT_NOTE)
        case 2 to 4
            add_text_line($label, $count & "": "" & $EVENT_NOTE)
    end select

    if ($count = 4)
        $count := 0
    end if
end on
Monitoring the last four played notes.","set_text()
ui_label",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,221,7799,19. User Interface Commands,attach_level_meter(),attach_level_meter,"ui-id,group,slot,channel,generic","Attach a ui_level_meter to a certain location within the instrument to read volume data.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<group>: The index of the group you want to access. Should be set to -1 if not using the
group level.
<slot>: The index of the FX slot you wish to access. Should be set to -1 if not
accessing an FX slot.
<channel>: Select from 0 to 15 to set the audio channel the level meter will be displaying.
<generic>: Can be one of the following:
- NI_LEVEL_METER_MAIN: used to access Main FX chain
- NI_LEVEL_METER_GROUP: used to access the Group FX chain
- NI_LEVEL_METER_INSERT: used to access the Insert FX chain
- 0 ... 15: used to access individual instrument buses","- Level meters can be attached to the output of an instrument bus and the instrument main
output. They can also be attached to compressor and limiter effects to display gain reduction
data, with the ability to set minimum and maximum display values and inverting the display by
using $CONTROL_PAR_RANGE_MIN and $CONTROL_PAR_RANGE_MAX control parameters.","on init
    declare const $GROUP_IDX := 0
    declare const $BUS_IDX := 0
    declare const $SLOT_IDX := 0
    declare const $CHANNEL_L := 0
    declare const $CHANNEL_R := 1

    declare ui_label $InstOutputL (1, 1)
    declare ui_label $InstOutputR (1, 1)
    declare ui_label $BusOutput (1, 1)
    declare ui_label $MainFX (1, 1)
    declare ui_label $BusFX (1, 1)
    declare ui_label $GroupFX (1, 1)

    declare ui_level_meter $inst_output_l_lvl
    declare ui_level_meter $inst_output_r_lvl
    declare ui_level_meter $bus_output_lvl
    declare ui_level_meter $mainfx_output_lvl
    declare ui_level_meter $busfx_output_lvl
    declare ui_level_meter $groupfx_output_lvl

    attach_level_meter(get_ui_id($inst_output_l_lvl), -1, -1, $CHANNEL_L, -1)
    attach_level_meter(get_ui_id($inst_output_r_lvl), -1, -1, $CHANNEL_R, -1)
    attach_level_meter(get_ui_id($bus_output_lvl), -1, -1, $CHANNEL_L, $BUS_IDX)
    attach_level_meter(get_ui_id($mainfx_output_lvl), -1, $SLOT_IDX, $CHANNEL_L, -2)
    attach_level_meter(get_ui_id($busfx_output_lvl), -1, $SLOT_IDX, $CHANNEL_L, $BUS_IDX)
    attach_level_meter(get_ui_id($groupfx_output_lvl), $GROUP_IDX, $SLOT_IDX, $CHANNEL_L, -1)
end on
Various level meters.","ui_level_meter
Specific UI Widgets: $CONTROL_PAR_BG_COLOR,
$CONTROL_PAR_OFF_COLOR, $CONTROL_PAR_ON_COLOR, $CONTROL_PAR_OVERLOAD_COLOR,
$CONTROL_PAR_PEAK_COLOR, $CONTROL_PAR_VERTICAL, $CONTROL_PAR_RANGE_MIN,
$CONTROL_PAR_RANGE_MAX",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,223,7863,19. User Interface Commands,attach_zone(),attach_zone,"variable,zone-id,flags","Connects the corresponding zone to the waveform so that it shows up on the ui_waveform
widget.
<variable>: The variable name of the ui_waveform widget.
<zone-id>: The ID number of the zone that you want to attach.
<flags>: You can control different settings of the widget via the following flags:
$UI_WAVEFORM_USE_SLICES
$UI_WAVEFORM_USE_TABLE
$UI_WAVEFORM_TABLE_IS_BIPOLAR
$UI_WAVEFORM_USE_MIDI_DRAG","- Use the bitwise .or. operator to combine flags.
- The $UI_WAVEFORM_USE_TABLE and $UI_WAVEFORM_USE_MIDI_DRAG flags will only work
if $UI_WAVEFORM_USE_SLICES is already set.","on init
    declare ui_waveform $Waveform (6, 6)
    attach_zone ($Waveform,find_zone(”Test”), $UI_WAVEFORM_USE_SLICES .or.
$UI_WAVEFORM_USE_TABLE)
end on
Attaches a zone named “Test” to the ui_waveform widget, also showing the zone’s slices and a table.","set_ui_wf_property()
get_ui_wf_property()
ui_waveform
Zone and Slice Functions: find_zone()
Specific UI Widgets: Waveform Flag Constants, Waveform Property Constants",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,224,7898,19. User Interface Commands,expose_controls,expose_controls,,"Exposes all UI widgets declared in all five script slots, making them available as parameters to
Komplete UI.","- This command is only available in the on init callback.
- All UI widgets are exposed only via their identifiers (name without a variable type symbol like $,
%,.
- If multiple script slots use the same identifier, only the first one will be taken into account.
- Overview of all exposed controls is available in Kontakt's Monitor → Parameter pane, when the
instrument is selected and outside of Edit view.
- More information in the Komplete UI documentation.","on init
    make_perfview
    set_ui_width_px(1000)
    set_ui_height_px(500)
    load_komplete_ui(“main”)
    expose_controls

    declare ui_slider $Foo (0, 100)
    declare ui_switch $Bar

    make_persistent($Foo)
    make_persistent($Bar)
end on
Loads a Komplete UI file,  sets up the performance view size and visibility, and exposes some UI
widgets as parameters and persistent state for Komplete UI.","make_perfview
set_ui_height_px()
set_ui_width_px()
load_komplete_ui()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,225,7939,19. User Interface Commands,fs_get_filename(),fs_get_filename,"ui-id,return-parameter","Return the filename of the last selected file in a ui_file_selector widget.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<return-parameter>: 0: Returns the filename without extension.
1: Returns the filename with extension.
2: Returns the whole path.","- This command is only available in the on ui_control callbacks of ui_file_selectors.
- Always use forwards slash (/) when working with absolute file paths in Kontakt!",,"fs_navigate()
ui_file_selector",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,226,7958,19. User Interface Commands,fs_navigate(),fs_navigate,"ui-id,direction","Jump to the previous or next file in a ui_file_selector widget and trigger its callback.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<direction>: 0: The previous file (in relation to the currently selected one) is selected
1: The next file (in relation to the currently selected one) is selected","- This command is only available in the on ui_control callbacks of ui_file_selectors.
- It will always call the UI callback of the ui_file_selector it is pointed to.",,"fs_get_filename()
ui_file_selector",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,227,7976,19. User Interface Commands,get_control_par(),get_control_par,"ui-id,control-parameter","Retrieve various parameters of the specified UI widget.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<control-parameter>: Parameter of the UI widget we want to retrieve, i.e. $CONTROL_PAR_WIDTH.","- get_control_par_str() is an additional flavor of the command for use with strings (i.e.
retrieving text from ui_label or automation name from ui_slider).","on init
    declare ui_value_edit $Test (0, 100, 1)
    message(get_control_par(get_ui_id($Test), $CONTROL_PAR_WIDTH))
end on
Retrieving the width of a value edit in pixels.","set_control_par()
General: $CONTROL_PAR_KEY_SHIFT, $CONTROL_PAR_KEY_ALT,
$CONTROL_PAR_KEY_CONTROL",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,228,8002,19. User Interface Commands,get_control_par_arr(),get_control_par_arr,"ui-id,control-parameter,index","Retrieve various parameters of the specified UI widget
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<control-parameter>: Parameter of the UI widget we want to retrieve, i.e. $CONTROL_PAR_WIDTH.
<index>: Array index of the UI widget we want to retrieve.","- get_control_par_arr() comes in two additional flavors:
- get_control_par_str_arr() (i.e. retrieving automation name of a particular ui_xy
cursor)
- get_control_par_real_arr() (i.e. retrieving values of ui_xy cursor X and Y axes)","on init
    declare ui_xy ?XY1[2]
    declare ui_xy ?XY2[2]
    declare ui_xy ?XY3[2]
    declare ui_xy ?XY4[2]
    declare ui_button $Random

    declare $i
    declare ~val
end on

on ui_control ($Random)
    $i := 0
    while ($i < 8)
        { randomize X axis value }
        ~val := int_to_real(random(0, 1000000)) / 1000000.0
        set_control_par_real_arr(get_ui_id(?XY1) + $i / 2, $CONTROL_PAR_VALUE, ~val, $i mod 2)

        { randomize Y axis value }
        ~val := int_to_real(random(0, 1000000)) / 1000000.0
        set_control_par_real_arr(get_ui_id(?XY1) + $i / 2, $CONTROL_PAR_VALUE, ~val, ($i mod 2) + 1)

        inc($i)
    end while

    $Random := 0
end on
Randomize the values of the first  cursor for 4 different XY pads in one loop.","get_control_par()
set_control_par()
set_control_par_arr()
General: $CONTROL_PAR_KEY_SHIFT, $CONTROL_PAR_KEY_ALT,
$CONTROL_PAR_KEY_CONTROL",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,230,8057,19. User Interface Commands,get_font_id(),get_font_id,file-name,"Returns a font ID generated for a custom font based on an image file. This font ID can be used on
any control that has dynamic text elements.
<file-name>: Name of the image, without extension. The image has to be in PNG format and
reside in the ""pictures"" subfolder of the resource container.","- This command is only available in the on init callback.
- Custom font images need to be formatted in a special way to be interpreted correctly as
custom fonts. All characters need to be placed side-by-side, following the Windows-1252
character set, with a fully red (#FF0000) pixel at the top left of every character frame. Also,
alpha layer of this image needs to be solid (contain only one color). We recommend using the
SuperPNG addon for Adobe Photoshop (use the ""Clean Transparent"" option during export), or
KSP Font Generator plugin for Figma.
- NOTE: Kontakt has to be restarted after any change of the font image, reapplying the script is
not enough!","on init
    declare ui_text_edit @textEdit
    set_control_par(get_ui_id(@textEdit), $CONTROL_PAR_FONT_TYPE,
get_font_id(""Font1""))
end on
Using a custom font on a ui_text_edit control.","set_control_par()
General: $CONTROL_PAR_FONT_TYPE",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,231,8091,19. User Interface Commands,get_menu_item_str(),get_menu_item_str,"ui-id,index","Returns the string value of a particular ui_menu entry.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<index>: The index (not the value!) of the menu item.","- The <index> is defined by the order in which the menu items are added within the on init
callback; it cannot be changed afterwards.","on init
    declare ui_button $button
    declare ui_menu $menu

    add_menu_item($menu, ""First Entry"", 0)
    add_menu_item($menu, ""Second Entry"", 5)
    add_menu_item($menu, ""Third Entry"", 10)
end on

on ui_control ($button)
    message(get_menu_item_str(get_ui_id($menu), 1))
end on
Displays the message “Second Entry” when clicking on the button, since we are reading the text of
menu item index 1.","add_menu_item()
get_menu_item_value()
get_menu_item_visibility()
get_menu_item_str()
set_menu_item_value()
set_menu_item_visibility()
Specific UI Widgets: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,232,8130,19. User Interface Commands,get_menu_item_value(),get_menu_item_value,"ui-id,index","Returns the value of a particular ui_menu entry.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<index>: The index (not the value!) of the menu item.","- The <index> is defined by the order in which the menu items are added within the on init
callback; it cannot be changed afterwards.","on init
    declare ui_button $button
    declare ui_menu $menu

    add_menu_item($menu, ""First Entry"", 0)
    add_menu_item($menu, ""Second Entry"", 5)
    add_menu_item($menu, ""Third Entry"", 10)
end on

on ui_control ($button)
    message(get_menu_item_value(get_ui_id($menu), 1))
end on
Displays the number 5, since we're reading the value of menu item index 1.","add_menu_item()
get_menu_item_str()
get_menu_item_visibility()
set_menu_item_str()
set_menu_item_value()
set_menu_item_visibility()
Specific UI Widgets: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,233,8168,19. User Interface Commands,get_menu_item_visibility(),get_menu_item_visibility,"ui-id,index","Returns 1 if a particular ui_menu entry is visible, otherwise 0.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<index>: The index (not the value!) of the menu entry.","- The <index> is defined by the order in which the menu items are added within the on init
callback; it cannot be changed afterwards.","on init
    declare ui_button $visibility
    declare ui_button $value
    declare ui_menu $menu

    add_menu_item($menu, ""First Entry"", 0)
    add_menu_item($menu, ""Second Entry"", 5)
    add_menu_item($menu, ""Third Entry"", 10)
end on

on ui_control ($visibility)
    set_menu_item_visibility(get_ui_id($menu), 1, $visibility)
end on

on ui_control ($value)
    message(get_menu_item_visibility(get_ui_id($menu), 1))
end on
Clicking on Visibility button shows or hides the second menu entry, while clicking on Value button
shows the visibility state of that same menu entry.","add_menu_item()
get_menu_item_str()
get_menu_item_value()
set_menu_item_str()
set_menu_item_value()
set_menu_item_visibility()
Specific UI Widgets: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,234,8211,19. User Interface Commands,get_ui_id(),get_ui_id,variable,Retrieves the UI ID number of a UI widget.,"- UI IDs are assigned sequentially from the very first variable or constant declared in the script,
which starts at 32768.
- Even regular variables and constants (those that are not UI widgets) get a UI ID assigned,
however this ID cannot be used with various get_control_par()/set_control_par()
commands!","on init
    declare const $NUM_KNOBS := 4

    declare ui_knob $Knob_1 (0, 100, 1)
    declare ui_knob $Knob_2 (0, 100, 1)
    declare ui_knob $Knob_3 (0, 100, 1)
    declare ui_knob $Knob_4 (0, 100, 1)

    declare ui_value_edit $Set (0, 100, 1)

    declare $i
    declare %ID[$NUM_KNOBS]

    while ($i < $NUM_KNOBS)
        %ID[$i] := get_ui_id($Knob_1) + $i

        inc($i)
    end while
end on

on ui_control ($Set)
    $i := 0
    while ($i < $NUM_KNOBS)
        set_control_par(%ID[$i], $CONTROL_PAR_VALUE, $Set)
        inc($i)
    end while
end on
Store IDs in an array and use those IDs to set multiple knobs to the same value.","set_control_par()
get_control_par()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,235,8260,19. User Interface Commands,get_ui_wf_property(),get_ui_wf_property,"variable,property,index","Returns the values of different properties pertaining to the ui_waveform widget.
<variable>: Variable name of the ui_waveform widget.

<property>: The following properties are available:
$UI_WF_PROP_PLAY_CURSOR
$UI_WF_PROP_FLAGS
$UI_WF_PROP_TABLE_VAL
$UI_WF_PROP_TABLE_IDX_HIGHLIGHT
$UI_WF_PROP_MIDI_DRAG_START_NOTE
<index>: The index of the slice.",,"on init
    declare $play_pos

    declare ui_waveform $Waveform (6, 6)

    attach_zone($Waveform, find_zone(""Test""), 0)
end on

on note
    while ($NOTE_HELD = 1)
        $play_pos := get_event_par($EVENT_ID, $EVENT_PAR_PLAY_POS)

        set_ui_wf_property($Waveform, $UI_WF_PROP_PLAY_CURSOR, $play_pos)
        message(get_ui_wf_property($Waveform, $UI_WF_PROP_PLAY_CURSOR, 0))

        wait(10000)
    end while
end on
Displays the current play position value.","set_ui_wf_property()
ui_waveform
attach_zone()
Zone and Slice Functions: find_zone()
Specific UI Widgets: Waveform Flag Constants, Waveform Property Constants",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,236,8305,19. User Interface Commands,hide_part(),hide_part,"variable,hide-mask","Hide specific parts of various widgets.
<variable>: The variable name of the widget.
<hide-mask>: Bitmask of visibility states for various parts of UI controls, consisting of the
following constants:
$HIDE_PART_BG (background of ui_knob, ui_label, ui_value_edit and ui_table)
$HIDE_PART_VALUE (value of ui_knob and ui_table)
$HIDE_PART_TITLE (title of ui_knob)
$HIDE_PART_MOD_LIGHT (mod ring light of ui_knob)
$HIDE_PART_CURSOR (hide a particular ui_xy cursor)",,"on init
    declare ui_knob $Knob (0, 100, 1)

    hide_part($Knob, $HIDE_PART_BG .or. $HIDE_PART_MOD_LIGHT .or. $HIDE_PART_TITLE .or. $HIDE_PART_VALUE)
end on
A naked knob.
on init
    declare ui_label $label_1 (1, 1)
    set_text($label_1, ""Small Label"")
    hide_part($label_1, $HIDE_PART_BG)
end on
Hide the background of a label. This is also possible with other UI elements.","Specific UI Widgets: $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING, $HIDE_WHOLE_CONTROL",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,237,8338,19. User Interface Commands,load_komplete_ui(),load_komplete_ui,filename,"Loads a Komplete UI file (.kscript) that defines the modern user interface.
<filename>: The filename of the .kscriptfile without extension, entered as a string.","- Only one Komplete UI file can be loaded for the whole instrument.
- This command is only available in the on init callback.
- Komplete UI requires the KSP script to enable the performance view and set its size.
- The Komplete UI file (.kscript) should be in the komplete_scripts subfolder of the
Resource Container.
- More information in the Komplete UI documentation.","on init
    make_perfview
    set_ui_width_px(1000)
    set_ui_height_px(500)
    load_komplete_ui(“main”)
end on
Loads a Komplete UI file  and sets up the performance view size and visibility.","Resource Container
make_perfview
set_ui_height_px()
set_ui_width_px()
expose_controls",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,238,8371,19. User Interface Commands,load_performance_view(),load_performance_view,filename,"Loads a performance view file (.nckp) that was created in the Creator Tools GUI Designer.
<filename>: The filename of the .nckp file without extension, entered as a string.","- Only one .nkcp performance view file can be loaded per script slot.
- This command is only available in the on init callback.
- This command cannot be used alongside make_perfview.
- The performance view file (.nkcp) should be in the performance_view subfolder of the
resource container.
- All contained controls are accessible as if they were declared and set up in KSP; variable
names can be identified in Creator Tools.
- More information in the Creator Tools manual.","on init
    load_performance_view(“performanceView”)
end on

on ui_control ($testButton)
    if ($testButton = 0)
        set_control_par(get_ui_id($testSlider), $CONTROL_PAR_HIDE, $HIDE_PART_WHOLE_CONTROL)
    else
        set_control_par(get_ui_id($testSlider), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
    end if
end on
Loads a performance view file and then defines some basic behavior involving two of the contained
controls.",Resource Container,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,239,8408,19. User Interface Commands,make_perfview,make_perfview,,Activates the performance view for the respective script slot.,"- This command can only be used in the on init callback.
- Cannot be used alongside the load_performance_view() command.","on init
    message("""")

    make_perfview
    set_script_title(""My Cool Instrument"")
    set_ui_height(6)
end on
Many KSP scripts will start something like this.","set_skin_offset()
set_ui_height()
set_ui_height_px()
set_ui_width_px()
set_ui_color()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,240,8437,19. User Interface Commands,move_control(),move_control,"variable,x-position,y-position","Position UI widgets in the standard Kontakt grid.
<variable>: The variable name of the UI widget.
<x-position>: The horizontal position of the widget in grid units (0 ... 6).
<y-position>: The vertical position of the widget in grid units (0 ... 16).","- move_control() can be used in all callbacks.
- Note that using move_control() outside of the on init callback is more CPU intensive, so
handle with care.
- move_control(<variable>, 0, 0) will hide the UI widget.
- Pixel-based control parameters cannot be mixed with grid-based ones, so if you want to set
$CONTROL_PAR_WIDTH for a ui_label that is positioned to grid coordinates (2, 1), this will not
work - you would have to use $CONTROL_PAR_GRID_WIDTH instead.","on init
    set_ui_height(3)

    declare ui_label $label (1, 1)
    set_text($label, ""Move the wheel!"")
    move_control($label, 3, 6)
end on

on controller
    if ($CC_NUM = 1)
        move_control($label, 3,  6 - ((%CC[1] * 5) / 127))
    end if
end on
Move a UI element with the modwheel.","move_control_px()
General: $CONTROL_PAR_HIDE",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,241,8476,19. User Interface Commands,move_control_px(),move_control_px,"variable,x-position,y-position","Position UI widgets in pixels.
<variable>: The variable name of the UI widget.
<x-position>: The horizontal position of the widget in pixels (0 ... 1000).
<y-position>: The vertical position of the widget in pixels (0 ... 750).","- Pixel-based control parameters cannot be mixed with grid-based ones, so if you want to set
$CONTROL_PAR_WIDTH for a ui_label that is positioned to grid coordinates (2, 1), this will not
work - you would have to use $CONTROL_PAR_GRID_WIDTH instead.
- move_control_px() can be used in all callbacks.
- Note that using move_control_px() outside of the on init callback is more CPU
intensive, so handle with care.
- In order to match Kontakt standard grid sizes to pixel position, the following formulae can be
used:
- X position: ((grid_value - 1) * 92) + 66
- Y position: ((grid_value - 1) * 21) + 2
- Width ($CONTROL_PAR_WIDTH): (grid_value * 92) - 5
- Height ($CONTROL_PAR_HEIGHT): (grid_value * 21) - 3","on init
    declare ui_label $label (1, 1)
    set_text($label, ""Move the wheel!"")
    move_control_px($label, 66, 2)
end on

on controller
    if ($CC_NUM = 1)
        move_control_px($label, 66 + %CC[1], 2)
    end if
end on
Transform CC values into pixel position. This might be useful for reference.","move_control()
General: $CONTROL_PAR_POS_X, $CONTROL_PAR_POS_Y",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,242,8519,19. User Interface Commands,set_control_help(),set_control_help,"variable,text","Assigns a text string to be displayed when hovering over a UI widget. The text will appear in
Kontakt's info pane.
<variable>: The variable name of the UI widget.
<text>: The info text to be displayed.",- The text string used can contain a maximum of 320 characters.,"on init
    declare ui_knob $Knob (0, 100, 1)
    set_control_help($Knob, ""I'm the only knob, folks!"")
end on
set_control_help() in action.","set_script_title()
General:
$CONTROL_PAR_HELP",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,243,8545,19. User Interface Commands,set_control_par(),set_control_par,"ui-id,control-parameter,value","Change various parameters of the specified UI widget.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<control-parameter>: Parameter of the UI control we wish to set, i.e. $CONTROL_PAR_WIDTH.
<value>: The value of the control parameter we wish to set.","- set_control_par_str() is an additional flavor of the command for use with strings (i.e.
setting the text of a ui_label, or automation name of a ui_slider).","on init
    declare ui_value_edit $test (0, 100, $VALUE_EDIT_MODE_NOTE_NAMES)
    set_text($test,"""")
    set_control_par(get_ui_id($test), $CONTROL_PAR_WIDTH, 45)
    move_control_px($test, 100, 10)
end on
Changing the width of a value edit to 45 pixels. Note that you also have to specify its position in
pixels once you use pixel-based control parameters.
on init
    declare ui_label $test (1, 1)
    set_control_par_str(get_ui_id($test), $CONTROL_PAR_TEXT, ""This is Text"")
    set_control_par(get_ui_id($test), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
end on
Set and center text in labels.","get_control_par()
set_control_par_arr()
get_ui_id()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,244,8581,19. User Interface Commands,set_control_par_arr(),set_control_par_arr,"ui-id,control-parameter,value,index","Change various parameters of an element within an array-based UI widget, e.g. ui_xy cursors.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<control-parameter>: Parameter of the UI widgetwe wish to set,e.g. $CONTROL_PAR_AUTOMATION_ID.

<value>: The value of the control parameter we wish to set.
<index>: The array index of the UI control we wish to set.","- set_control_par_arr() comes in two additional flavors:
- set_control_par_str_arr() (i.e. setting automation names of individual ui_xy
cursors)
- set_control_par_real_arr() (i.e. values of individual ui_xy cursor X and Y axes)","on init
    make_perfview
    set_ui_height_px(350)

    declare ui_xy ?myXY[4]
    declare $xyID
    $xyID := get_ui_id(?myXY)

    set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 0, 0)
    set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 1, 1)
    set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 2, 2)
    set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 3, 3)

    set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, ""Cutoff"", 0)
    set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, ""Resonance"", 1)
    set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, ""Delay Pan"", 2)
    set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, ""Delay Feedback"",
3)
end on
Setting automation IDs and names of an XY pad with two cursors.","General: $CONTROL_PAR_AUTOMATION_ID, $CONTROL_PAR_AUTOMATION_NAME
Specific UI Widgets: $CONTROL_PAR_CURSOR_PICTURE, $HIDE_PART_CURSOR",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,245,8626,19. User Interface Commands,set_knob_defval(),set_knob_defval,"variable,value","Assign a default value to a ui_knob to which it will be reset when pressing [Ctrl] (on Windows)
or [Cmd] (on macOS) and clicking the knob.","- In order to assign a default value to a ui_slider, use set_control_par() with
$CONTROL_PAR_DEFAULT_VALUE control parameter.","on init
    declare ui_knob $Knob (-100, 100, 0)
    set_knob_defval($Knob, 0)
    $Knob := 0

    declare ui_slider $Slider (-100, 100)
    set_control_par(get_ui_id($Slider), $CONTROL_PAR_DEFAULT_VALUE, 0)
    $Slider := 0
end on
Assigning default values for a knob and a slider.",General: $CONTROL_PAR_DEFAULT_VALUE,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,246,8654,19. User Interface Commands,set_knob_label(),set_knob_label,"variable,text",Assign a text string to a ui_knob.,,"on init
    declare !rate_names[18]
    !rate_names[ 0] := ""1/128""
    !rate_names[ 1] := ""1/64""
    !rate_names[ 2] := ""1/32""
    !rate_names[ 3] := ""1/16 T""
    !rate_names[ 4] := ""1/32 D""
    !rate_names[ 5] := ""1/16""
    !rate_names[ 6] := ""1/8 T""
    !rate_names[ 7] := ""1/16 D""
    !rate_names[ 8] := ""1/8""
    !rate_names[ 9] := ""1/4 T""
    !rate_names[10] := ""1/8 D""
    !rate_names[11] := ""1/4""
    !rate_names[12] := ""1/2 T""
    !rate_names[13] := ""1/4 D""
    !rate_names[14] := ""1/2""
    !rate_names[15] := ""1/1 T""
    !rate_names[16] := ""1/2 D""
    !rate_names[17] := ""1/1""

    declare ui_knob $Rate (0, 17, 1)
    set_knob_label($Rate, !rate_names[$Rate])
end on

on persistence_changed
    set_knob_label($Rate, !rate_names[$Rate])
end on

on ui_control ($Rate)
    set_knob_label($Rate, !rate_names[$Rate])
end on
Useful for displaying rhythmical values.",General: $CONTROL_PAR_LABEL,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,247,8700,19. User Interface Commands,set_knob_unit(),set_knob_unit,"variable,knob-unit-constant","Assign a unit mark to a ui_knob. The following constants are available:
$KNOB_UNIT_NONE
$KNOB_UNIT_DB
$KNOB_UNIT_HZ
$KNOB_UNIT_PERCENT
$KNOB_UNIT_MS
$KNOB_UNIT_OCT
$KNOB_UNIT_ST",,"on init
    declare ui_knob $Time (0, 1000, 10)
    set_knob_unit($Time, $KNOB_UNIT_MS)

    declare ui_knob $Octave (1, 6, 1)
    set_knob_unit($Octave, $KNOB_UNIT_OCT)

    declare ui_knob $Volume (-600, 600, 100)
    set_knob_unit($Volume, $KNOB_UNIT_DB)

    declare ui_knob $Scale (0, 100, 1)
    set_knob_unit($Scale, $KNOB_UNIT_PERCENT)

    declare ui_knob $Tune (4300, 4500, 10)
    set_knob_unit($Tune, $KNOB_UNIT_HZ)
end on
Various knob unit marks.",General: $CONTROL_PAR_UNIT,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,248,8737,19. User Interface Commands,set_menu_item_str(),set_menu_item_str,"ui-id,index,string","Sets the value of a ui_menu entry.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<index>: The index of the menu item.
<string>: The text you wish to set for the selected menu item.","- The <index> is defined by the order in which the menu items are added within the on init
callback; it can’t be changed afterwards.","on init
    declare ui_menu $menu
    declare ui_button $button

    add_menu_item ($menu, ""First Entry"", 0)
    add_menu_item ($menu, ""Second Entry"", 5)
    add_menu_item ($menu, ""Third Entry"", 10)
end on

on ui_control ($button)
    set_menu_item_str(get_ui_id($menu), 1, ""Renamed"")
end on
Renaming the second menu entry.","add_menu_item()
get_menu_item_str()
get_menu_item_value()
get_menu_item_visibility()
set_menu_item_value()
set_menu_item_visibility()
Specific UI Widgets: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,249,8776,19. User Interface Commands,set_menu_item_value(),set_menu_item_value,"ui-id,index,value","Sets the value of a ui_menu entry.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<index>: The index of the menu item.
<value>: The value you want to give the menu item.","- The <index> is defined by the order in which the menu items are added within the on init
callback; it can’t be changed afterwards.
- The <value> is set by the third parameter of the add_menu_item() command.","on init
    declare ui_menu $menu

    add_menu_item ($menu, ""First Entry"", 0)
    add_menu_item ($menu, ""Second Entry"", 5)
    add_menu_item ($menu, ""Third Entry"", 10)

    set_menu_item_value(get_ui_id($menu), 1, 20)
end on
Changing the value of the second menu entry to 20.","add_menu_item()
get_menu_item_str()
get_menu_item_value()
get_menu_item_visibility()
set_menu_item_str()
set_menu_item_visibility()
Specific UI Widgets: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,250,8812,19. User Interface Commands,set_menu_item_visibility(),set_menu_item_visibility,"ui-id,index,visibility","Sets the visibility of a ui_menu entry.
<ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
<index>: The index of the menu item.
<visibility>: Set to either 0 (invisible) or 1 (visible).","- The <index> is defined by the order in which the menu items are added within the on init
callback; it can’t be changed afterwards.
- Add as many menu entries as you would possibly need within the on init callback, then
show or hide them dynamically by using set_menu_item_visibility().
- If you set the currently selected menu item to invisible, the item will remain visible until it is no
longer selected.","on init
    declare ui_menu $menu
    declare ui_button $button

    add_menu_item ($menu, ""First Entry"", 0)
    add_menu_item ($menu, ""Second Entry"", 5)
    add_menu_item ($menu, ""Third Entry"", 10)
end on

on ui_control ($button)
    set_menu_item_visibility(get_ui_id($menu), 1, $button)
end on
Hiding the second menu entry with a button.","add_menu_item()
get_menu_item_str()
get_menu_item_value()
get_menu_item_visibility()
set_menu_item_str()
set_menu_item_value()
Specific UI Widgets: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,251,8855,19. User Interface Commands,set_table_steps_shown(),set_table_steps_shown,"variable,num-of-steps","Changes the number of displayed columns in a ui_table widget.
<variable>: The variable name of the ui_table widget.

<num-of-steps>: The number of displayed steps.",,"on init
    declare ui_table %table[32] (5, 4, 127)
    declare ui_value_edit $Steps (2, 32, 1)

    $Steps := 16
    set_table_steps_shown(%table, $Steps)
end on

on ui_control($Steps)
    set_table_steps_shown(%table, $Steps)
end on
Changing the number of shown steps.",ui_table,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,252,8882,19. User Interface Commands,set_script_title(),set_script_title,text,Set the script title.,- This command overrides any manually set script titles.,"on init
    message("""")

    make_perfview
    set_script_title(""My Cool Instrument"")
    set_ui_height(6)
end on
Many performance view scripts start like this.",make_perfview,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,253,8905,19. User Interface Commands,set_skin_offset(),set_skin_offset,offset-in-px,Offsets the chosen background picture file by the specified number of pixels.,"- If a PNG file used for the background has been set and is larger than the maximum height
of the performance view, you can use this command to offset the background graphic, thus
creating separate backgrounds for each of the script slots while only using one picture file.","on init
    make_perfview
    set_ui_height(1)
end on

on controller
    if ($CC_NUM = 1)
        set_skin_offset(%CC[1])
    end if
end on","make_perfview
set_ui_height_px()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,254,8933,19. User Interface Commands,set_text(),set_text,"variable,text","When applied to a ui_label: replace the text currently visible in the specified label and add new
text.
When applied to ui_knob, ui_button, ui_switch and ui_value_edit: set the display name
of the widget.",,"on init
    declare ui_label $label_1 (1, 1)
    set_text($label_1, ""Small Label"")

    declare ui_label $label_2 (3, 6)
    set_text($label_2, ""Big Label"")
    add_text_line($label_2, ""...with a second text line"")
end on
Two labels with different sizes.
on init
    declare ui_label $label_1 (1, 1)
    set_text ($label_1, ""Small Label"")
    hide_part ($label_1, $HIDE_PART_BG)
end on
Hide the background of a label. This is also possible with other widgets.","add_text_line()
set_control_par(): set_control_par_str()
General: $CONTROL_PAR_TEXT",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,255,8965,19. User Interface Commands,set_ui_color(),set_ui_color,hex-value,"Set the main background color of the performance view.
<hex value>The hexadecimal color value in the following format:
0ff0000h {red}
The 0 at the start lets Kontakt know the value is a number.
The h at the end indicates that it is a hexadecimal value. You can also use
uppercase H.",- This command can be used in all callbacks.,"on init
    make_perfview
    set_ui_color(0000000H)
end on
Paint it black.","set_ui_height()
set_ui_height_px()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,256,8991,19. User Interface Commands,set_ui_height(),set_ui_height,height,"Set the height of a script performance view in grid units.
<height>: The height of script in grid units (1 ... 8).",- This command can only be used in the on init callback.,"on init
    message("""")

    make_perfview
    set_script_title(""My Cool Instrument"")
    set_ui_height(6)
end on
Many performance view scripts start like this.",set_ui_height_px(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,257,9015,19. User Interface Commands,set_ui_height_px(),set_ui_height_px,height,"Set the height of a script performance view in pixels.
<height>: The height of script in pixels (50 ... 750).",- This command can only be used in the on init callback.,"on init
    make_perfview

    declare const $SIZE := 1644    { picture height }
    declare const $NUM_FRAMES := 4
    declare const $HEADER_SIZE := 68

    declare ui_value_edit $Slide (1, $NUM_SLIDES, 1)

    set_ui_height_px(($SIZE / $NUM_FRAMES) - $HEADER_SIZE)
    set_skin_offset(($Slide - 1) * ($SIZE / $NUM_FRAMES))
end on

on ui_control ($Slide)
    set_skin_offset(($Slide - 1) * ($SIZE / $NUM_FRAMES))
end on","set_ui_height()
set_ui_height_px()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,258,9048,19. User Interface Commands,set_ui_width_px(),set_ui_width_px,width,"Set the width of a script performance view in pixels.
<width>: The width of the script in pixels (633 ... 1000).",- This command can only be used in the on init callback.,"on init
    make_perfview
    set_ui_height_px(750)
    set_ui_width_px(1000)
end on
Making a performance view with the largest possible size.",set_ui_height_px(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,259,9070,19. User Interface Commands,set_ui_wf_property(),set_ui_wf_property,"variable,property,index,value","Sets different properties for the ui_waveform widget.
<variable>: Variable name of the ui_waveform widget.

<property>: The following properties are available:
$UI_WF_PROP_PLAY_CURSOR
$UI_WF_PROP_FLAGS
$UI_WF_PROP_TABLE_VAL
$UI_WF_PROP_TABLE_IDX_HIGHLIGHT
$UI_WF_PROP_MIDI_DRAG_START_NOTE
<index>: The index of the slice to which the selected property applies.
Only valid for $UI_WF_PROP_TABLE_IDX_HIGHLIGHT and
$UI_WF_PROP_TABLE_VAL
<value>: The value of the selected property.",,"on init
    declare $play_pos
    declare ui_waveform $Waveform (6, 6)

    attach_zone($Waveform, find_zone(""Test""), 0)
end on

on note
    while ($NOTE_HELD = 1)
        $play_pos := get_event_par($EVENT_ID, $EVENT_PAR_PLAY_POS)
        set_ui_wf_property($Waveform, $UI_WF_PROP_PLAY_CURSOR, 0, $play_pos)
        wait(10000)
    end while
end on
Attaches a zone named “Test” to the waveform display and shows a play cursor within the waveform
as long as you play a note.","get_ui_wf_property()
ui_waveform
attach_zone()
Zone and Slice Functions: find_zone()
Specific UI Widgets: Waveform Flag Constants, Waveform Property Constants",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,261,9130,20. Zone Commands,find_zone(),find_zone,zone-name,Returns the zone ID for the specified zone name. Only available in the on init callback.,,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,261,9137,20. Zone Commands,get_sample_length(),get_sample_length,zone-id,Returns the length of the specified zone's sample in microseconds.,,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,261,9144,20. Zone Commands,num_slices_zone(),num_slices_zone,zone-id,Returns the number of slices in the specified zone.,,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,261,9151,20. Zone Commands,zone_slice_length(),zone_slice_length,"zone-id,slice-index","Returns the length of the specified slice in microseconds, with respect to the current tempo.",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,261,9158,20. Zone Commands,zone_slice_start(),zone_slice_start,"zone-id,slice-index","Returns the absolute start point of the specified slice in microseconds, independent of the current
tempo.",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,261,9166,20. Zone Commands,zone_slice_idx_loop_start(),zone_slice_idx_loop_start,"zone-id,loop-index",Returns the index number of the slice at the loop start.,,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,261,9173,20. Zone Commands,zone_slice_idx_loop_end(),zone_slice_idx_loop_end,"zone-id,loop-index",Returns the index number of the slice at the loop end.,,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,261,9180,20. Zone Commands,zone_slice_loop_count(),zone_slice_loop_count,"zone-id,loop-index",Returns the loop count of the specified loop.,,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,261,9187,20. Zone Commands,dont_use_machine_mode(),dont_use_machine_mode,ID-number,"Play the specified event in Sampler mode (only makes sense when the groups allowed for playback
are in one of Machine modes).",,,,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,262,9195,20. Zone Commands,get_loop_par(),get_loop_par,"zone-id,loop-index,parameter","Returns the value of a particular loop parameter of a zone.
<zone-id>: The ID of the zone.
<loop-index>: The index of the loop (0 ... 7).
<parameter>: The following parameters are available:
$LOOP_PAR_MODE
$LOOP_PAR_START
$LOOP_PAR_LENGTH
$LOOP_PAR_XFADE
$LOOP_PAR_COUNT
$LOOP_PAR_TUNING",- get_loop_par() works on both normal and user zones.,"message(get_loop_par($myZoneId, 0, $LOOP_PAR_MODE))",set_loop_par(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,263,9221,20. Zone Commands,get_num_zones(),get_num_zones,,Returns the total number of all zones that are present in the instrument (normal and user zones).,,"on init
    message(get_num_zones())
end on
Quite self-explanatory.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,264,9235,20. Zone Commands,get_sample(),get_sample,"zone-id,return-parameter","Returns paths, file names and extensions of samples.
<zone-id>: The ID of the zone.
<return-parameter>: The following parameters are available:$NI_FILE_NAME
$NI_FILE_FULL_PATH
$NI_FILE_FULL_PATH_OS
$NI_FILE_EXTENSION","- get_sample() works on both normal and user zones.
- Always use forwards slash (/) when working with absolute file paths in Kontakt!","message(get_sample(%NI_USER_ZONE_IDS[0], $NI_FILE_NAME))","set_sample()
Sample Parameters",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,265,9259,20. Zone Commands,get_sel_zones_idx(),get_sel_zones_idx,array-name,"Fills the specified array with indices of all selected zones in Kontakt's Mapping Editor.
<array-name>: Array to be filled with indices of selected zones.","- The command overwrites all existing values as long as there are selected zones. If there
are more selected zones than array indices, the array will be filled until it is full, ignoring the
remaining selected zones.
- If there are less selected zones than array indices, the array will be filled from the beginning
with all selected zone indices, followed by one array index with its value set to -1.
- This command allows relative adjustment of various zone parameters like zone volume, pan,
tune, etc.","on init
    message("""")

    set_snapshot_type(3) { Must be 2 or 3 or else set_zone_par works only on user zones }

    declare $a
    declare $i
    declare $zone_id
    declare %sel_zones[1000]
    declare %zone_par[4] := ($ZONE_PAR_VOLUME, $ZONE_PAR_VOLUME, $ZONE_PAR_TUNE, $ZONE_PAR_TUNE)
    declare %offset[4] := (-1, 1, -1, 1)
end on

on note
    { pressing the lowest A on an 88-key MIDI controler will gather all selected zones }
    if ($EVENT_NOTE = 21)
        get_sel_zones_idx(%sel_zones)
    end if

    { pressing the following 4 keys will adjust volume down and up 0.01 dB, then tuning down and up 1 cent }
    if (in_range($EVENT_NOTE, 22, 25))
        ignore_event($EVENT_ID)

        $a := $EVENT_NOTE - 22
        $i := 0
        while ($i < num_elements(%sel_zones))
            if (%sel_zones[$i] > -1)
                $zone_id := get_zone_id(%sel_zones[$i])

                set_zone_par($zone_id, ...
                             %zone_par[$a], ...
                             get_zone_par($zone_id, %zone_par[$a]) + %offset[$a])
            end if

            inc($i)
        end while
        exit
    end if
end on
Using the lowest keys of an 88 key MIDI controller to finely  adjust zone volume and tuning in 0.01
steps",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,267,9321,20. Zone Commands,get_zone_id(),get_zone_id,zone-index,"Returns the ID of the zone with the specified zone index.
<zone-index>: Index of the zone (see Index column in Monitor → Zones pane in Kontakt) .",,"on init
    set_snapshot_type(3) { Must be 2 or 3 or else set_zone_par works only on user zones }

    declare ui_slider $slider (0, 127)
    declare ui_label $label (1, 1)

    $slider := get_zone_par(get_zone_id(0), $ZONE_PAR_ROOT_KEY)

    message(""This instrument contains "" & get_num_zones() & "" zones."")
end on

on ui_control ($slider)
    set_zone_par(get_zone_id(0), $ZONE_PAR_ROOT_KEY, $slider)
    set_text($label, get_zone_par(0, $ZONE_PAR_ROOT_KEY))
end on
Adjusting the root key of the first  zone in the instrument.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,268,9348,20. Zone Commands,get_zone_par(),get_zone_par,"zone-id,parameter","Returns the value of a particular zone parameter.
<zone-id>: The ID of the zone.
<parameter>: The following parameters are available:
$ZONE_PAR_HIGH_KEY
$ZONE_PAR_LOW_KEY
$ZONE_PAR_HIGH_VELO
$ZONE_PAR_LOW_VELO
$ZONE_PAR_ROOT_KEY
$ZONE_PAR_FADE_LOW_KEY
$ZONE_PAR_FADE_HIGH_KEY
$ZONE_PAR_FADE_LOW_VELO
$ZONE_PAR_FADE_HIGH_VELO
$ZONE_PAR_VOLUME
$ZONE_PAR_PAN
$ZONE_PAR_TUNE
$ZONE_PAR_GROUP
$ZONE_PAR_SAMPLE_START
$ZONE_PAR_SAMPLE_END
$ZONE_PAR_SAMPLE_MOD_RANGE
$ZONE_PAR_SAMPLE_RATE
$ZONE_PAR_SELECTED
$ZONE_PAR_BPM","- get_zone_par() works on both normal and user zones.
- $ZONE_PAR_BPM returns the BPM value multiplied by 1000, so 120 BPM would be 120000.","get_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_PAN)",set_zone_par(),BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,269,9387,20. Zone Commands,get_zone_status(),get_zone_status,zone-ID,"Queries the status of the zone ID in question. Zone status has four possible states:
- $NI_ZONE_STATUS_EMPTY Zone is a user zone and has no sample loaded
- $NI_ZONE_STATUS_LOADED Zone is a user zone and has a sample loaded
- $NI_ZONE_STATUS_PURGED Zone is purged from memory (valid for both regular and user
zones)
- $NI_ZONE_STATUS_IGNORED Zone is ignored by the user response in the Content Missing
dialog (valid for both regular and user zones)
<zone-ID>: The ID of the zone.","- This command requires a valid zone ID that exists in the instrument. For example, if when
using get_event_par() a zone ID is not found (which would happen when attempting
playback of an empty user zone or a purged zone), get_zone_status() will throw a script
warning.
- get_zone_status() works on both normal and user zones.","on init
    declare ui_value_edit $ZoneID (0, 1000, 1)
end on

on ui_control ($ZoneID)
    select (get_zone_status($ZoneID))
        case $NI_ZONE_STATUS_EMPTY
            message(""Zone ID "" & $zoneID & "" is empty!"")
        case $NI_ZONE_STATUS_LOADED
            message(""Zone ID "" & $zoneID & "" is loaded!"")
        case $NI_ZONE_STATUS_PURGED
            message(""Zone ID "" & $zoneID & "" is purged!"")
        case $NI_ZONE_STATUS_IGNORED
            message(""Zone ID "" & $zoneID & "" is ignored!"")
    end select
end on
Query the status of the first  1001 zone IDs.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,270,9428,20. Zone Commands,set_loop_par(),set_loop_par,"zone-id,loop-index,parameter,value","Sets the loop parameters of a user zone.
<zone-id>: The ID of the zone.
<loop-index>: The index of the loop (0 ... 7).
<parameter>: The following parameters are available:
$LOOP_PAR_MODE
$LOOP_PAR_START
$LOOP_PAR_LENGTH
$LOOP_PAR_XFADE
$LOOP_PAR_COUNT
$LOOP_PAR_TUNING
<value>: The value of the loop parameter.","- set_loop_par() only works on user zones.
- When executed in the on init callback, this function runs synchronously and returns -1.
- When executed outside of the on init callback, this function returns an async ID and triggers
the on async_complete callback.
- Since Kontakt 7.2, the performance of this command has been improved. Previously, every
execution of this command required suspending then resuming the audio engine. Moving
forward, execution of this command has been delayed until the first wait() command, or
until the end of the callback, whichever comes first. So, if it is required to set a lot of zone
parameters in batch, it is recommended to first collect all the async IDs into an array, and only
then run any wait() commands, as shown in the description of wait_async() command.","wait_async(set_loop_par(%NI_USER_ZONE_IDS[0], 0, $LOOP_PAR_MODE, $SampleLoopOnA))","get_loop_par()
wait_async()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,271,9464,20. Zone Commands,set_num_user_zones(),set_num_user_zones,value,"Creates empty user zones.
<value>: Defines the number of user zones to be created. %NI_USER_ZONE_IDS is the
array of size <value> with all the user zone IDs.","- A maximum of 1024 user zones per instrument can be created.
- User zones are shown with a different color in Kontakt's Mapping Editor.
- User zones cannot be modified from Mapping Editor or Wave Editor.
- In order to manipulate the user zones, the IDs stored in the %NI_USER_ZONE_IDS array
should be used instead of the hard-coded zone IDs.","on init
    set_num_user_zones(2)

    set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, 0)
    set_zone_par(%NI_USER_ZONE_IDS[1], $ZONE_PAR_GROUP, 1)
end on
Create two empty zones and place each to its own group.",,BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,272,9489,20. Zone Commands,set_sample(),set_sample,"zone-id,path","Sets the user sample in a zone.
<zone-id>: The ID of the zone.
<path>: The file path to the sample to be loaded.","- set_sample() only works on user zones.
- When executed in the on init callback, this function runs synchronously and returns -1.
- When executed outside of the on init callback, this function returns an async ID and triggers
the on async_complete callback.
- Since Kontakt 7.2, the performance of this command has been improved. Previously, every
execution of this command required suspending then resuming the audio engine. Moving
forward, execution of this command has been delayed until the first wait() command, or
until the end of the callback, whichever comes first. So, if it is required to set a lot of zone
parameters in batch, it is recommended to first collect all the async IDs into an array, and only
then run any wait() commands, as shown in the description of wait_async() command.
- Always use forwards slash (/) when working with absolute file paths in Kontakt!","on ui_control ($myMouseArea)
    if ($NI_MOUSE_EVENT_TYPE = $NI_MOUSE_EVENT_TYPE_DROP)
        if (num_elements(!NI_DND_ITEMS_AUDIO) = 1)
            wait_async(set_sample(%NI_USER_ZONE_IDS[0], !NI_DND_ITEMS_AUDIO[0]))
        end if
    end if
end on","get_sample()
wait_async()",BUILT-IN
KSP_Reference_Manual_Fixed.txt.py,273,9525,20. Zone Commands,set_zone_par(),set_zone_par,"zone-id,parameter,value","Sets the user zone parameters.
<zone-id>: The ID of the zone.
<parameter>: The following flags are available:
$ZONE_PAR_HIGH_KEY
$ZONE_PAR_LOW_KEY
$ZONE_PAR_HIGH_VELO
$ZONE_PAR_LOW_VELO
$ZONE_PAR_ROOT_KEY
$ZONE_PAR_FADE_LOW_KEY
$ZONE_PAR_FADE_HIGH_KEY
$ZONE_PAR_FADE_LOW_VELO
$ZONE_PAR_FADE_HIGH_VELO
$ZONE_PAR_VOLUME
$ZONE_PAR_PAN
$ZONE_PAR_TUNE
$ZONE_PAR_GROUP
$ZONE_PAR_SAMPLE_START
$ZONE_PAR_SAMPLE_END
$ZONE_PAR_SAMPLE_MOD_RANGE
$ZONE_PAR_BPM
<value>: The value of the zone parameter","- set_zone_par() only works on user zones when using snapshot modes 0 and 1. In case of
using snapshot modes 2 and 3, set_zone_par() will work on both normal and user zones,
from any callback (please excercise caution with ""fast"" callback types, like on controller or
on listener)!
- When executed in the on init callback, this function runs synchronously and returns -1.
- When executed outside of the on init callback, this function returns an async ID and triggers
the on async_complete callback.
- $ZONE_PAR_BPM requires an input value multiplied by 1000, so 120 BPM would be 120000.
Valid BPM input range is 0.1 to 400 BPM. Setting the BPM is not supported for REX files!
- Since Kontakt 7.2, the performance of this command has been improved. Previously, every
execution of this command required suspending then resuming the audio engine. Moving
forward, execution of this command has been delayed until the first wait() command, or
until the end of the callback, whichever comes first. So, if it is required to set a lot of zone
parameters in batch, it is recommended to first collect all the async IDs into an array, and only
then run any wait() commands, as shown in the description of wait_async() command.","set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, 0)","get_zone_par()
wait_async()",BUILT-IN
