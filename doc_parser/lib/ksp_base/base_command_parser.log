C:\Python39\python.exe C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\lib\ksp_base\base_main_parser.py
[2024-05-09 18:59:19] Parse C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py for headlines and categories
[2024-05-09 18:59:19] 28 headlines found
[2024-05-09 18:59:19] 292 categories found
[2024-05-09 18:59:19] --------------------------------------------------------------------------------
[2024-05-09 18:59:19] Parse C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py for commands
[2024-05-09 18:59:19] 161 commands found
[2024-05-09 18:59:19] 1 duplicate commands
[2024-05-09 18:59:19] Export commands to C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\out\ksp_7_8\built_in_commands.csv
[2024-05-09 18:59:19] ============================== COMMANDS ==============================
[2024-05-09 18:59:19] ------------------------------ random ------------------------------
[2024-05-09 18:59:19] Page 42, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 1687
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] random(<min>, <max>)
[2024-05-09 18:59:19] Generates a random integer between (and including) <min> and <max>.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $rnd_amt
[2024-05-09 18:59:19]     declare $new_vel
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     $rnd_amt := $EVENT_VELOCITY * 10 / 100
[2024-05-09 18:59:19]     $new_vel := random($EVENT_VELOCITY - $rnd_amt, $EVENT_VELOCITY + $rnd_amt)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     { mirror invalid velocity values into the allowed velocity range }
[2024-05-09 18:59:19]     if ($new_vel > 127)
[2024-05-09 18:59:19]         $new_vel := 127 - ($new_vel mod 127)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     if ($new_vel < 1)
[2024-05-09 18:59:19]         $new_vel := 1 + abs($new_vel)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     change_velo($EVENT_ID, $new_vel)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Randomly changing velocities by ±10 percent.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 5. Arithmetic Commands & Operators
[2024-05-09 18:59:19] Category: random()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: random
[2024-05-09 18:59:19] Parameters: min,max
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Generates a random integer between (and including) <min> and <max>.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $rnd_amt
[2024-05-09 18:59:19]     declare $new_vel
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     $rnd_amt := $EVENT_VELOCITY * 10 / 100
[2024-05-09 18:59:19]     $new_vel := random($EVENT_VELOCITY - $rnd_amt, $EVENT_VELOCITY + $rnd_amt)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     { mirror invalid velocity values into the allowed velocity range }
[2024-05-09 18:59:19]     if ($new_vel > 127)
[2024-05-09 18:59:19]         $new_vel := 127 - ($new_vel mod 127)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     if ($new_vel < 1)
[2024-05-09 18:59:19]         $new_vel := 1 + abs($new_vel)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     change_velo($EVENT_ID, $new_vel)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Randomly changing velocities by ±10 percent.
[2024-05-09 18:59:19] ------------------------------ real ------------------------------
[2024-05-09 18:59:19] Page 43, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 1717
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] real(<integer-value>)
[2024-05-09 18:59:19] Converts an integer value into a real number.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare ~velocity_disp
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     ~velocity_disp := real($EVENT_VELOCITY) / 127.0
[2024-05-09 18:59:19]     message(~velocity_disp)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Displays the event velocity in the range from 0.0 to 1.0.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] int()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 5. Arithmetic Commands & Operators
[2024-05-09 18:59:19] Category: real()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: real
[2024-05-09 18:59:19] Parameters: integer-value
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Converts an integer value into a real number.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare ~velocity_disp
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     ~velocity_disp := real($EVENT_VELOCITY) / 127.0
[2024-05-09 18:59:19]     message(~velocity_disp)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Displays the event velocity in the range from 0.0 to 1.0.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] int()
[2024-05-09 18:59:19] ------------------------------ int ------------------------------
[2024-05-09 18:59:19] Page 44, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 1738
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] int(<real-value>)
[2024-05-09 18:59:19] Converts a real number into an integer.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     Using this command without any rounding function will cause the real value to be truncated, so
[2024-05-09 18:59:19] performing this function with real values 2.2 and 2.8 will both return an integer value of 2
[2024-05-09 18:59:19] •     Be aware that this command reduces precision from 64-bit to 32-bit, which means that valid
[2024-05-09 18:59:19] real numbers outside of 32-bit signed integer range (-2147483648 ... 2147483647) will not be
[2024-05-09 18:59:19] properly converted, since they end up in overflow.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $test_int
[2024-05-09 18:59:19]     declare ~test_real := 2.8
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     $test_int := int(~test_real)
[2024-05-09 18:59:19]     message($test_int)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Converting a variable from real to integer and then displaying it.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] real()
[2024-05-09 18:59:19] Rounding Commands: ceil(), floor(), round()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 5. Arithmetic Commands & Operators
[2024-05-09 18:59:19] Category: int()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: int
[2024-05-09 18:59:19] Parameters: real-value
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Converts a real number into an integer.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - Using this command without any rounding function will cause the real value to be truncated, so
[2024-05-09 18:59:19] performing this function with real values 2.2 and 2.8 will both return an integer value of 2
[2024-05-09 18:59:19] - Be aware that this command reduces precision from 64-bit to 32-bit, which means that valid
[2024-05-09 18:59:19] real numbers outside of 32-bit signed integer range (-2147483648 ... 2147483647) will not be
[2024-05-09 18:59:19] properly converted, since they end up in overflow.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $test_int
[2024-05-09 18:59:19]     declare ~test_real := 2.8
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     $test_int := int(~test_real)
[2024-05-09 18:59:19]     message($test_int)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Converting a variable from real to integer and then displaying it.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] real()
[2024-05-09 18:59:19] Rounding Commands: ceil(), floor(), round()
[2024-05-09 18:59:19] ------------------------------ msb ------------------------------
[2024-05-09 18:59:19] Page 45, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 1766
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] msb(<value>)
[2024-05-09 18:59:19] Returns the most significant byte portion of a 14-bit value.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on rpn
[2024-05-09 18:59:19]     message(msb($RPN_VALUE))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Commonly used when working with RPN and NRPN messages.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare ui_value_edit $Value (0, 16383, 1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on ui_control ($Value)
[2024-05-09 18:59:19]     message("MSB: " & msb($Value) & " - LSB: " & lsb($Value))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Understanding MSB and LSB.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] lsb()
[2024-05-09 18:59:19] Events and MIDI: $RPN_ADDRESS, $RPN_VALUE
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 5. Arithmetic Commands & Operators
[2024-05-09 18:59:19] Category: msb()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: msb
[2024-05-09 18:59:19] Parameters: value
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Returns the most significant byte portion of a 14-bit value.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on rpn
[2024-05-09 18:59:19]     message(msb($RPN_VALUE))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Commonly used when working with RPN and NRPN messages.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare ui_value_edit $Value (0, 16383, 1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on ui_control ($Value)
[2024-05-09 18:59:19]     message("MSB: " & msb($Value) & " - LSB: " & lsb($Value))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Understanding MSB and LSB.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] lsb()
[2024-05-09 18:59:19] Events and MIDI: $RPN_ADDRESS, $RPN_VALUE
[2024-05-09 18:59:19] ------------------------------ lsb ------------------------------
[2024-05-09 18:59:19] Page 46, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 1792
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] lsb(<value>)
[2024-05-09 18:59:19] Returns the least significant byte portion of a 14-bit value.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on rpn
[2024-05-09 18:59:19]     message(lsb($RPN_VALUE))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Commonly used when working with RPN and NRPN messages.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare ui_value_edit $Value (0, 16383, 1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on ui_control ($Value)
[2024-05-09 18:59:19]     message("MSB: " & msb($Value) & " - LSB: " & lsb($Value))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Understanding MSB and LSB.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] msb()
[2024-05-09 18:59:19] Events and MIDI: $RPN_ADDRESS, $RPN_VALUE
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 5. Arithmetic Commands & Operators
[2024-05-09 18:59:19] Category: lsb()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: lsb
[2024-05-09 18:59:19] Parameters: value
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Returns the least significant byte portion of a 14-bit value.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on rpn
[2024-05-09 18:59:19]     message(lsb($RPN_VALUE))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Commonly used when working with RPN and NRPN messages.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare ui_value_edit $Value (0, 16383, 1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on ui_control ($Value)
[2024-05-09 18:59:19]     message("MSB: " & msb($Value) & " - LSB: " & lsb($Value))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Understanding MSB and LSB.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] msb()
[2024-05-09 18:59:19] Events and MIDI: $RPN_ADDRESS, $RPN_VALUE
[2024-05-09 18:59:19] ------------------------------ disable_logging ------------------------------
[2024-05-09 18:59:19] Page 73, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 2715
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] disable_logging(<event-type>)
[2024-05-09 18:59:19] Disables emission of messages, warnings or watched variable events to both the Kontakt status bar
[2024-05-09 18:59:19] and Creator Tools Debugger.
[2024-05-09 18:59:19] <event-type>: Which event type emission to deactivate. Available options:
[2024-05-09 18:59:19] •  $NI_LOG_MESSAGE
[2024-05-09 18:59:19] •  $NI_LOG_WARNING
[2024-05-09 18:59:19] •  $NI_LOG_WATCHING
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     This command is only available in the on init callback.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     disable_logging($NI_LOG_MESSAGE)
[2024-05-09 18:59:19]     disable_logging($NI_LOG_WARNING)
[2024-05-09 18:59:19]     disable_logging($NI_LOG_WATCHING)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Keep the lines above commented out while development and bring them back in right before
[2024-05-09 18:59:19] shipping your product to disable any debugging-related content.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] watch_var()
[2024-05-09 18:59:19] watch_array_idx()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 9. General Commands
[2024-05-09 18:59:19] Category: disable_logging()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: disable_logging
[2024-05-09 18:59:19] Parameters: event-type
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Disables emission of messages, warnings or watched variable events to both the Kontakt status bar
[2024-05-09 18:59:19] and Creator Tools Debugger.
[2024-05-09 18:59:19] <event-type>: Which event type emission to deactivate. Available options:
[2024-05-09 18:59:19] - $NI_LOG_MESSAGE
[2024-05-09 18:59:19] - $NI_LOG_WARNING
[2024-05-09 18:59:19] - $NI_LOG_WATCHING
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - This command is only available in the on init callback.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     disable_logging($NI_LOG_MESSAGE)
[2024-05-09 18:59:19]     disable_logging($NI_LOG_WARNING)
[2024-05-09 18:59:19]     disable_logging($NI_LOG_WATCHING)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Keep the lines above commented out while development and bring them back in right before
[2024-05-09 18:59:19] shipping your product to disable any debugging-related content.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] watch_var()
[2024-05-09 18:59:19] watch_array_idx()
[2024-05-09 18:59:19] ------------------------------ exit ------------------------------
[2024-05-09 18:59:19] Page 74, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 2743
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] exit
[2024-05-09 18:59:19] Immediately stops a callback or exits a function.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  exit is a very strong command. Be careful when using it, especially when dealing with larger
[2024-05-09 18:59:19] scripts.
[2024-05-09 18:59:19] •     If used within a function, exit only exits the function, but not the entire callback.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if (not in_range($EVENT_NOTE, 60, 71))
[2024-05-09 18:59:19]         exit
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     { from here on, only notes between C3 to B3 will be processed }
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Useful for quickly setting up key ranges to be affected by the script.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] wait()
[2024-05-09 18:59:19] stop_wait()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 9. General Commands
[2024-05-09 18:59:19] Category: exit
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: exit
[2024-05-09 18:59:19] Parameters:
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Immediately stops a callback or exits a function.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - exit is a very strong command. Be careful when using it, especially when dealing with larger
[2024-05-09 18:59:19] scripts.
[2024-05-09 18:59:19] - If used within a function, exit only exits the function, but not the entire callback.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if (not in_range($EVENT_NOTE, 60, 71))
[2024-05-09 18:59:19]         exit
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     { from here on, only notes between C3 to B3 will be processed }
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Useful for quickly setting up key ranges to be affected by the script.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] wait()
[2024-05-09 18:59:19] stop_wait()
[2024-05-09 18:59:19] ------------------------------ ignore_controller ------------------------------
[2024-05-09 18:59:19] Page 75, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 2769
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] ignore_controller
[2024-05-09 18:59:19] Ignores a MIDI Continuous Controller, Pitch Bend or Channel Aftertouch event in the on
[2024-05-09 18:59:19] controller callback.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 1)
[2024-05-09 18:59:19]         ignore_controller
[2024-05-09 18:59:19]         set_controller($VCC_MONO_AT, %CC[1])
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Transform the modwheel into aftertouch.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] ignore_event()
[2024-05-09 18:59:19] set_controller()
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 9. General Commands
[2024-05-09 18:59:19] Category: ignore_controller
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: ignore_controller
[2024-05-09 18:59:19] Parameters:
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Ignores a MIDI Continuous Controller, Pitch Bend or Channel Aftertouch event in the on
[2024-05-09 18:59:19] controller callback.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 1)
[2024-05-09 18:59:19]         ignore_controller
[2024-05-09 18:59:19]         set_controller($VCC_MONO_AT, %CC[1])
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Transform the modwheel into aftertouch.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] ignore_event()
[2024-05-09 18:59:19] set_controller()
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19] ------------------------------ message ------------------------------
[2024-05-09 18:59:19] Page 76, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 2791
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] message(<variable-or-string>)
[2024-05-09 18:59:19] Displays text in the status line of Kontakt.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     This command is intended to be used for debugging and testing while programming a script.
[2024-05-09 18:59:19] Since there is only one status line in Kontakt, it should not be used as a generic means of
[2024-05-09 18:59:19] communication with the user. Use a label widget instead.
[2024-05-09 18:59:19] •     Make it a habit to write message("") at the start of the on init callback. You can then be
[2024-05-09 18:59:19] sure that all previous messages (by the script or by the system) are deleted and you see only
[2024-05-09 18:59:19] new messages.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     message("Hello, world!")
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] The inevitable implementation of "Hello, world!" in KSP.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     message("Note " & $EVENT_NOTE & " received at " &  $ENGINE_UPTIME & "milliseconds")
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Concatenating strings and expressions in a message() command.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] reset_ksp_timer
[2024-05-09 18:59:19] ui_label
[2024-05-09 18:59:19] set_text()
[2024-05-09 18:59:19] Transport and Timing: $ENGINE_UPTIME, $KSP_TIMER
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 9. General Commands
[2024-05-09 18:59:19] Category: message()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: message
[2024-05-09 18:59:19] Parameters: variable-or-string
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Displays text in the status line of Kontakt.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - This command is intended to be used for debugging and testing while programming a script.
[2024-05-09 18:59:19] Since there is only one status line in Kontakt, it should not be used as a generic means of
[2024-05-09 18:59:19] communication with the user. Use a label widget instead.
[2024-05-09 18:59:19] - Make it a habit to write message("") at the start of the on init callback. You can then be
[2024-05-09 18:59:19] sure that all previous messages (by the script or by the system) are deleted and you see only
[2024-05-09 18:59:19] new messages.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     message("Hello, world!")
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] The inevitable implementation of "Hello, world!" in KSP.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     message("Note " & $EVENT_NOTE & " received at " &  $ENGINE_UPTIME & "milliseconds")
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Concatenating strings and expressions in a message() command.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] reset_ksp_timer
[2024-05-09 18:59:19] ui_label
[2024-05-09 18:59:19] set_text()
[2024-05-09 18:59:19] Transport and Timing: $ENGINE_UPTIME, $KSP_TIMER
[2024-05-09 18:59:19] ------------------------------ note_off ------------------------------
[2024-05-09 18:59:19] Page 77, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 2823
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] note_off(<event-id>)
[2024-05-09 18:59:19] Sends a MIDI Note Off message for a specific note event ID.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be changed.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  note_off() is equivalent to releasing a key, thus it will always trigger an on release
[2024-05-09 18:59:19] callback, as well as jump to the release portion of a volume envelope. Notice the difference
[2024-05-09 18:59:19] between note_off() and fade_out(), since fade_out() works on voice level.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 1)
[2024-05-09 18:59:19]         note_off($ALL_EVENTS)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] A custom "All Notes Off" implementation triggered by the modwheel.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare polyphonic $new_id
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     ignore_event($EVENT_ID)
[2024-05-09 18:59:19]     $new_id := play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, 0)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on release
[2024-05-09 18:59:19]     ignore_event($EVENT_ID)
[2024-05-09 18:59:19]     wait(200000)
[2024-05-09 18:59:19]     note_off($new_id)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Delaying the release of each note by 200 milliseconds.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] fade_out()
[2024-05-09 18:59:19] play_note()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 9. General Commands
[2024-05-09 18:59:19] Category: note_off()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: note_off
[2024-05-09 18:59:19] Parameters: event-id
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Sends a MIDI Note Off message for a specific note event ID.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be changed.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - note_off() is equivalent to releasing a key, thus it will always trigger an on release
[2024-05-09 18:59:19] callback, as well as jump to the release portion of a volume envelope. Notice the difference
[2024-05-09 18:59:19] between note_off() and fade_out(), since fade_out() works on voice level.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 1)
[2024-05-09 18:59:19]         note_off($ALL_EVENTS)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] A custom "All Notes Off" implementation triggered by the modwheel.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare polyphonic $new_id
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     ignore_event($EVENT_ID)
[2024-05-09 18:59:19]     $new_id := play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, 0)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on release
[2024-05-09 18:59:19]     ignore_event($EVENT_ID)
[2024-05-09 18:59:19]     wait(200000)
[2024-05-09 18:59:19]     note_off($new_id)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Delaying the release of each note by 200 milliseconds.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] fade_out()
[2024-05-09 18:59:19] play_note()
[2024-05-09 18:59:19] ------------------------------ play_note ------------------------------
[2024-05-09 18:59:19] Page 78, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 2864
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] play_note(<note-number>, <velocity>, <sample-offset>, <duration>)
[2024-05-09 18:59:19] Generates a note event, i.e. a Note On message followed by a Note Off message.
[2024-05-09 18:59:19] <note-number>: The MIDI note number to be generated (0 ... 127).
[2024-05-09 18:59:19] <velocity>: Velocity of the generated note (1 ... 127).
[2024-05-09 18:59:19] <sample-offset>: Sample offset in microseconds.
[2024-05-09 18:59:19] <duration>: Length of the generated note in microseconds.
[2024-05-09 18:59:19] This parameter also accepts two special values:
[2024-05-09 18:59:19] -1: releasing the note which started the callback stops the sample.
[2024-05-09 18:59:19] 0: the entire sample is played (be careful with looped samples, as they would
[2024-05-09 18:59:19] be played indefinitely in this case!).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     In DFD mode, the sample offset is dependent on the Sample Mod (S. Mod)  value of the
[2024-05-09 18:59:19] respective zones (found in Kontakt's Wave Editor). Sample offset value greater than the zone's
[2024-05-09 18:59:19] S. Mod setting will be ignored and no sample offset will be applied.
[2024-05-09 18:59:19] •     You can retrieve the event ID of the played note event in a variable by writing:
[2024-05-09 18:59:19] <variable> := play_note(<note>, <velocity>, <sample-offset>,
[2024-05-09 18:59:19] <duration>)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     play_note($EVENT_NOTE + 12, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Harmonizes the played note with the upper octave.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $new_id
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 64)
[2024-05-09 18:59:19]         if (%CC[64] = 127)
[2024-05-09 18:59:19]             $new_id := play_note(60, 100, 0, 0)
[2024-05-09 18:59:19]         else
[2024-05-09 18:59:19]             note_off($new_id)
[2024-05-09 18:59:19]         end if
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Trigger a MIDI note by pressing the sustain pedal.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] note_off()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 9. General Commands
[2024-05-09 18:59:19] Category: play_note()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: play_note
[2024-05-09 18:59:19] Parameters: note-number,velocity,sample-offset,duration
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Generates a note event, i.e. a Note On message followed by a Note Off message.
[2024-05-09 18:59:19] <note-number>: The MIDI note number to be generated (0 ... 127).
[2024-05-09 18:59:19] <velocity>: Velocity of the generated note (1 ... 127).
[2024-05-09 18:59:19] <sample-offset>: Sample offset in microseconds.
[2024-05-09 18:59:19] <duration>: Length of the generated note in microseconds.
[2024-05-09 18:59:19] This parameter also accepts two special values:
[2024-05-09 18:59:19] -1: releasing the note which started the callback stops the sample.
[2024-05-09 18:59:19] 0: the entire sample is played (be careful with looped samples, as they would
[2024-05-09 18:59:19] be played indefinitely in this case!).
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - In DFD mode, the sample offset is dependent on the Sample Mod (S. Mod)  value of the
[2024-05-09 18:59:19] respective zones (found in Kontakt's Wave Editor). Sample offset value greater than the zone's
[2024-05-09 18:59:19] S. Mod setting will be ignored and no sample offset will be applied.
[2024-05-09 18:59:19] - You can retrieve the event ID of the played note event in a variable by writing:
[2024-05-09 18:59:19] <variable> := play_note(<note>, <velocity>, <sample-offset>,
[2024-05-09 18:59:19] <duration>)
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     play_note($EVENT_NOTE + 12, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Harmonizes the played note with the upper octave.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $new_id
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 64)
[2024-05-09 18:59:19]         if (%CC[64] = 127)
[2024-05-09 18:59:19]             $new_id := play_note(60, 100, 0, 0)
[2024-05-09 18:59:19]         else
[2024-05-09 18:59:19]             note_off($new_id)
[2024-05-09 18:59:19]         end if
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Trigger a MIDI note by pressing the sustain pedal.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] note_off()
[2024-05-09 18:59:19] ------------------------------ set_controller ------------------------------
[2024-05-09 18:59:19] Page 79, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 2911
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] set_controller(<controller>, <value>)
[2024-05-09 18:59:19] Sends a MIDI Continuous Controller, Pitch Bend or Channel Pressure message
[2024-05-09 18:59:19] <controller>: This parameter sets the type, and in the case of MIDI CCs, sets the CC number:
[2024-05-09 18:59:19] • A number (0 ... 127) designates a MIDI CC number
[2024-05-09 18:59:19] • $VCC_PITCH_BEND indicates MIDI Pitch Bend
[2024-05-09 18:59:19] • $VCC_MONO_AT indicates MIDI Channel Pressure (monophonic aftertouch)
[2024-05-09 18:59:19] <value>: The value of the specified controller.
[2024-05-09 18:59:19] • MIDI CC and Channel Pressure value range: 0 ... 127
[2024-05-09 18:59:19] • MIDI Pitch Bend value range: -8192 ... 8191
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  set_controller() cannot be used in the on init callback. If for some reason you wat to
[2024-05-09 18:59:19] send a controller value upon instrument load, use on persistence_changed callback.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if ($EVENT_NOTE = 36)
[2024-05-09 18:59:19]         ignore_event($EVENT_ID)
[2024-05-09 18:59:19]         set_controller($VCC_MONO_AT, $EVENT_VELOCITY)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on release
[2024-05-09 18:59:19]     if ($EVENT_NOTE = 36)
[2024-05-09 18:59:19]         ignore_event($EVENT_ID)
[2024-05-09 18:59:19]         set_controller($VCC_MONO_AT, 0)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] If you have a keyboard with no aftertouch, press C1 instead.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] ignore_controller
[2024-05-09 18:59:19] Events and MIDI: $VCC_PITCH_BEND, $VCC_MONO_AT
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 9. General Commands
[2024-05-09 18:59:19] Category: set_controller()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: set_controller
[2024-05-09 18:59:19] Parameters: controller,value
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Sends a MIDI Continuous Controller, Pitch Bend or Channel Pressure message
[2024-05-09 18:59:19] <controller>: This parameter sets the type, and in the case of MIDI CCs, sets the CC number:
[2024-05-09 18:59:19] - A number (0 ... 127) designates a MIDI CC number
[2024-05-09 18:59:19] - $VCC_PITCH_BEND indicates MIDI Pitch Bend
[2024-05-09 18:59:19] - $VCC_MONO_AT indicates MIDI Channel Pressure (monophonic aftertouch)
[2024-05-09 18:59:19] <value>: The value of the specified controller.
[2024-05-09 18:59:19] - MIDI CC and Channel Pressure value range: 0 ... 127
[2024-05-09 18:59:19] - MIDI Pitch Bend value range: -8192 ... 8191
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - set_controller() cannot be used in the on init callback. If for some reason you wat to
[2024-05-09 18:59:19] send a controller value upon instrument load, use on persistence_changed callback.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if ($EVENT_NOTE = 36)
[2024-05-09 18:59:19]         ignore_event($EVENT_ID)
[2024-05-09 18:59:19]         set_controller($VCC_MONO_AT, $EVENT_VELOCITY)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on release
[2024-05-09 18:59:19]     if ($EVENT_NOTE = 36)
[2024-05-09 18:59:19]         ignore_event($EVENT_ID)
[2024-05-09 18:59:19]         set_controller($VCC_MONO_AT, 0)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] If you have a keyboard with no aftertouch, press C1 instead.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] ignore_controller
[2024-05-09 18:59:19] Events and MIDI: $VCC_PITCH_BEND, $VCC_MONO_AT
[2024-05-09 18:59:19] ------------------------------ set_rpn ------------------------------
[2024-05-09 18:59:19] Page 80, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 2948
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] set_nrpn(<address>, <value>)
[2024-05-09 18:59:19] Sends a MIDI RPN or NRPN message.
[2024-05-09 18:59:19] <address>: The RPN or NRPN address (0 ... 16383).
[2024-05-09 18:59:19] <value>: The value of the RPN or NRPN message (0 ... 16383).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     Kontakt cannot handle RPN or NRPN messages as external modulation sources. You can
[2024-05-09 18:59:19] however use these messages for simple inter-script communication.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] on rpn/nrpn
[2024-05-09 18:59:19] set_controller()
[2024-05-09 18:59:19] msb()
[2024-05-09 18:59:19] lsb()
[2024-05-09 18:59:19] Events and MIDI: $RPN_ADDRESS, $RPN_VALUE
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 9. General Commands
[2024-05-09 18:59:19] Category: set_rpn()/set_nrpn()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: set_rpn
[2024-05-09 18:59:19] Parameters: address,value
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Sends a MIDI RPN or NRPN message.
[2024-05-09 18:59:19] <address>: The RPN or NRPN address (0 ... 16383).
[2024-05-09 18:59:19] <value>: The value of the RPN or NRPN message (0 ... 16383).
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - Kontakt cannot handle RPN or NRPN messages as external modulation sources. You can
[2024-05-09 18:59:19] however use these messages for simple inter-script communication.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] on rpn/nrpn
[2024-05-09 18:59:19] set_controller()
[2024-05-09 18:59:19] msb()
[2024-05-09 18:59:19] lsb()
[2024-05-09 18:59:19] Events and MIDI: $RPN_ADDRESS, $RPN_VALUE
[2024-05-09 18:59:19] ------------------------------ set_nrpn ------------------------------
[2024-05-09 18:59:19] Page 80, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 2948
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] set_nrpn(<address>, <value>)
[2024-05-09 18:59:19] Sends a MIDI RPN or NRPN message.
[2024-05-09 18:59:19] <address>: The RPN or NRPN address (0 ... 16383).
[2024-05-09 18:59:19] <value>: The value of the RPN or NRPN message (0 ... 16383).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     Kontakt cannot handle RPN or NRPN messages as external modulation sources. You can
[2024-05-09 18:59:19] however use these messages for simple inter-script communication.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] on rpn/nrpn
[2024-05-09 18:59:19] set_controller()
[2024-05-09 18:59:19] msb()
[2024-05-09 18:59:19] lsb()
[2024-05-09 18:59:19] Events and MIDI: $RPN_ADDRESS, $RPN_VALUE
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 9. General Commands
[2024-05-09 18:59:19] Category: set_rpn()/set_nrpn()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: set_nrpn
[2024-05-09 18:59:19] Parameters: address,value
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Sends a MIDI RPN or NRPN message.
[2024-05-09 18:59:19] <address>: The RPN or NRPN address (0 ... 16383).
[2024-05-09 18:59:19] <value>: The value of the RPN or NRPN message (0 ... 16383).
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - Kontakt cannot handle RPN or NRPN messages as external modulation sources. You can
[2024-05-09 18:59:19] however use these messages for simple inter-script communication.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] on rpn/nrpn
[2024-05-09 18:59:19] set_controller()
[2024-05-09 18:59:19] msb()
[2024-05-09 18:59:19] lsb()
[2024-05-09 18:59:19] Events and MIDI: $RPN_ADDRESS, $RPN_VALUE
[2024-05-09 18:59:19] ------------------------------ set_snapshot_type ------------------------------
[2024-05-09 18:59:19] Page 81, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 2967
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] set_snapshot_type(<type>)
[2024-05-09 18:59:19] Configures the behavior of all five slots when a snapshot is saved or recalled.
[2024-05-09 18:59:19] <type>: The available types are:
[2024-05-09 18:59:19] 0: The init callback will always be executed upon snapshot change, then the on
[2024-05-09 18:59:19] persistence_changed callback will be executed (default behavior).
[2024-05-09 18:59:19] 1: the init callback will not be executed upon loading a snapshot, only the on
[2024-05-09 18:59:19] persistence_callback will be executed.
[2024-05-09 18:59:19] 2: same as type 0, but only KSP variables are saved with the snapshot.
[2024-05-09 18:59:19] 3: same as type 1, but only KSP variables are saved with the snapshot.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     This command acts globally, i.e. it can applied in any script slot.
[2024-05-09 18:59:19] •     In snapshot types 1 and 3, values of persistent and instrument persistent variables are
[2024-05-09 18:59:19] preserved.
[2024-05-09 18:59:19] •     Loading a snapshot always resets Kontakt's audio engine, i.e. audio is stopped and all active
[2024-05-09 18:59:19] events are deleted.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     set_snapshot_type(1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     declare ui_knob $knob_1 (0, 127, 1)
[2024-05-09 18:59:19]     set_text($knob_1, "Knob")
[2024-05-09 18:59:19]     make_persistent($knob_1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     declare ui_button $gui_btn
[2024-05-09 18:59:19]     set_text($gui_btn, "Page 1")
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] function show_gui()
[2024-05-09 18:59:19]     if ($gui_btn = 1)
[2024-05-09 18:59:19]         set_control_par(get_ui_id($knob_1), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
[2024-05-09 18:59:19]     else
[2024-05-09 18:59:19]         set_control_par(get_ui_id($knob_1), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end function
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on persistence_changed
[2024-05-09 18:59:19]     call show_gui()
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on ui_control ($gui_btn)
[2024-05-09 18:59:19]     call show_gui()
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Retaining the GUI upon loading snapshots.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19] on persistence_changed
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 9. General Commands
[2024-05-09 18:59:19] Category: set_snapshot_type()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: set_snapshot_type
[2024-05-09 18:59:19] Parameters: type
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Configures the behavior of all five slots when a snapshot is saved or recalled.
[2024-05-09 18:59:19] <type>: The available types are:
[2024-05-09 18:59:19] 0: The init callback will always be executed upon snapshot change, then the on
[2024-05-09 18:59:19] persistence_changed callback will be executed (default behavior).
[2024-05-09 18:59:19] 1: the init callback will not be executed upon loading a snapshot, only the on
[2024-05-09 18:59:19] persistence_callback will be executed.
[2024-05-09 18:59:19] 2: same as type 0, but only KSP variables are saved with the snapshot.
[2024-05-09 18:59:19] 3: same as type 1, but only KSP variables are saved with the snapshot.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - This command acts globally, i.e. it can applied in any script slot.
[2024-05-09 18:59:19] - In snapshot types 1 and 3, values of persistent and instrument persistent variables are
[2024-05-09 18:59:19] preserved.
[2024-05-09 18:59:19] - Loading a snapshot always resets Kontakt's audio engine, i.e. audio is stopped and all active
[2024-05-09 18:59:19] events are deleted.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     set_snapshot_type(1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     declare ui_knob $knob_1 (0, 127, 1)
[2024-05-09 18:59:19]     set_text($knob_1, "Knob")
[2024-05-09 18:59:19]     make_persistent($knob_1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     declare ui_button $gui_btn
[2024-05-09 18:59:19]     set_text($gui_btn, "Page 1")
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] function show_gui()
[2024-05-09 18:59:19]     if ($gui_btn = 1)
[2024-05-09 18:59:19]         set_control_par(get_ui_id($knob_1), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
[2024-05-09 18:59:19]     else
[2024-05-09 18:59:19]         set_control_par(get_ui_id($knob_1), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end function
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on persistence_changed
[2024-05-09 18:59:19]     call show_gui()
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on ui_control ($gui_btn)
[2024-05-09 18:59:19]     call show_gui()
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Retaining the GUI upon loading snapshots.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19] on persistence_changed
[2024-05-09 18:59:19] ------------------------------ by_marks ------------------------------
[2024-05-09 18:59:19] Page 82, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3022
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] by_marks(<mark>)
[2024-05-09 18:59:19] A user-defined group of events.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] <mark>: One of 28 marks, $MARK_1 ... $MARK_28, which was assigned to the event.
[2024-05-09 18:59:19] You can also select more than one event group by using the bitwise .or.
[2024-05-09 18:59:19] operator, or by simply summing the event marks.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  by_marks() is a user-defined group of events which can be set with set_event_mark().
[2024-05-09 18:59:19] It can be used with all commands which take event ID as an argument, like note_off(),
[2024-05-09 18:59:19] change_tune() etc.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if ($EVENT_NOTE mod 12 = 0) { if played note is a C }
[2024-05-09 18:59:19]         set_event_mark($EVENT_ID, $MARK_1)
[2024-05-09 18:59:19]         change_tune(by_marks($MARK_1), %CC[1] * 1000, 0)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 1)
[2024-05-09 18:59:19]         change_tune(by_marks($MARK_1), %CC[1] * 1000, 0)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Moving the modwheel changes the tuning of all C notes (C-2, C-1…C8).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] set_event_mark()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_ID, $ALL_EVENTS, $MARK_1 … $MARK_28
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: by_marks()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: by_marks
[2024-05-09 18:59:19] Parameters: mark
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] A user-defined group of events.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] <mark>: One of 28 marks, $MARK_1 ... $MARK_28, which was assigned to the event.
[2024-05-09 18:59:19] You can also select more than one event group by using the bitwise .or.
[2024-05-09 18:59:19] operator, or by simply summing the event marks.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - by_marks() is a user-defined group of events which can be set with set_event_mark().
[2024-05-09 18:59:19] It can be used with all commands which take event ID as an argument, like note_off(),
[2024-05-09 18:59:19] change_tune() etc.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if ($EVENT_NOTE mod 12 = 0) { if played note is a C }
[2024-05-09 18:59:19]         set_event_mark($EVENT_ID, $MARK_1)
[2024-05-09 18:59:19]         change_tune(by_marks($MARK_1), %CC[1] * 1000, 0)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 1)
[2024-05-09 18:59:19]         change_tune(by_marks($MARK_1), %CC[1] * 1000, 0)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Moving the modwheel changes the tuning of all C notes (C-2, C-1…C8).
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] set_event_mark()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_ID, $ALL_EVENTS, $MARK_1 … $MARK_28
[2024-05-09 18:59:19] ------------------------------ by_marks (DUPLICATE 1) ------------------------------
[2024-05-09 18:59:19] Page 232, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8092
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] by_marks(<mark>)
[2024-05-09 18:59:19] Used to access a user-defined group of MIDI object events.
[2024-05-09 18:59:19] <mark>: The event mark number, $MARK_1 ... $MARK_10 .
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] mf_insert_file()
[2024-05-09 18:59:19] mf_insert_event()
[2024-05-09 18:59:19] mf_remove_event()
[2024-05-09 18:59:19] Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
[2024-05-09 18:59:19] by_track()
[2024-05-09 18:59:19] mf_set_mark()
[2024-05-09 18:59:19] mf_get_mark()
[2024-05-09 18:59:19] mf_get_id()
[2024-05-09 18:59:19] save_midi_file()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:19] Category: by_marks()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: by_marks
[2024-05-09 18:59:19] Parameters: mark
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Used to access a user-defined group of MIDI object events.
[2024-05-09 18:59:19] <mark>: The event mark number, $MARK_1 ... $MARK_10 .
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] mf_insert_file()
[2024-05-09 18:59:19] mf_insert_event()
[2024-05-09 18:59:19] mf_remove_event()
[2024-05-09 18:59:19] Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
[2024-05-09 18:59:19] by_track()
[2024-05-09 18:59:19] mf_set_mark()
[2024-05-09 18:59:19] mf_get_mark()
[2024-05-09 18:59:19] mf_get_id()
[2024-05-09 18:59:19] save_midi_file()
[2024-05-09 18:59:19] ------------------------------ change_note ------------------------------
[2024-05-09 18:59:19] Page 83, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3057
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] change_note(<event-id>, <note-number>)
[2024-05-09 18:59:19] Changes the note number of a specific event ID.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  change_note() is only allowed in the on note callback and only works before the first
[2024-05-09 18:59:19] wait() statement. If the voice is already running, only the value of the $EVENT_NOTE variable
[2024-05-09 18:59:19] changes.
[2024-05-09 18:59:19] •     Once the note number of a particular note event is changed, it becomes the new
[2024-05-09 18:59:19] $EVENT_NOTE.
[2024-05-09 18:59:19] •     It is not possible to address events via event groups like $ALL_EVENTS.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare %black_keys[5] := (1, 3, 6, 8, 10)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if (search(%black_keys, $EVENT_NOTE mod 12) # -1)
[2024-05-09 18:59:19]         change_note($EVENT_ID, $EVENT_NOTE - 1)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Constrain all notes to white keys, i.e. C major.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] change_velo()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_NOTE
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: change_note()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: change_note
[2024-05-09 18:59:19] Parameters: event-id,note-number
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Changes the note number of a specific event ID.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - change_note() is only allowed in the on note callback and only works before the first
[2024-05-09 18:59:19] wait() statement. If the voice is already running, only the value of the $EVENT_NOTE variable
[2024-05-09 18:59:19] changes.
[2024-05-09 18:59:19] - Once the note number of a particular note event is changed, it becomes the new
[2024-05-09 18:59:19] $EVENT_NOTE.
[2024-05-09 18:59:19] - It is not possible to address events via event groups like $ALL_EVENTS.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare %black_keys[5] := (1, 3, 6, 8, 10)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if (search(%black_keys, $EVENT_NOTE mod 12) # -1)
[2024-05-09 18:59:19]         change_note($EVENT_ID, $EVENT_NOTE - 1)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Constrain all notes to white keys, i.e. C major.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] change_velo()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_NOTE
[2024-05-09 18:59:19] ------------------------------ change_pan ------------------------------
[2024-05-09 18:59:19] Page 84, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3088
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] change_pan(<event-id>, <panorama>, <relative-bit>)
[2024-05-09 18:59:19] Changes the pan position of a specific note event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be changed.
[2024-05-09 18:59:19] <panorama>: The pan position of the note event, from -1000 (left) to 1000 (right).
[2024-05-09 18:59:19] <relative-bit>: If set to 0, the amount is absolute , i.e. the amount overwrites any previous
[2024-05-09 18:59:19] set values of that event. Note that this mode also overwrites any zone volume
[2024-05-09 18:59:19] adjustments!
[2024-05-09 18:59:19] If set to 1, the amount is relative  to the actual value of the event.
[2024-05-09 18:59:19] If set to 2, it behaves like mode 0 (absolute  adjustment), except any zone
[2024-05-09 18:59:19] volume adjustments are preserved.
[2024-05-09 18:59:19] The different implications between absolute and relative adjustments are more
[2024-05-09 18:59:19] apparent with more than one change_pan() statement applied to the same
[2024-05-09 18:59:19] event.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  change_pan() works on the note event level and does not change any panorama settings in
[2024-05-09 18:59:19] the instrument itself. It is also not related to any modulations regarding panorama.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $pan_position
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     $pan_position := ($EVENT_NOTE * 2000 / 127) - 1000
[2024-05-09 18:59:19]     change_pan($EVENT_ID, $pan_position, 0)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Panning the entire key range from left to right, i.e. C-2 all the way to the left, G8 all the way to the
[2024-05-09 18:59:19] right.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if ($EVENT_NOTE < 60)
[2024-05-09 18:59:19]         change_pan($EVENT_ID, 1000, 0)
[2024-05-09 18:59:19]         wait(500000)
[2024-05-09 18:59:19]         change_pan($EVENT_ID, -1000, 0) { absolute, pan is at -1000 }
[2024-05-09 18:59:19]     else
[2024-05-09 18:59:19]         change_pan($EVENT_ID, 1000, 1)
[2024-05-09 18:59:19]         wait(500000)
[2024-05-09 18:59:19]         change_pan($EVENT_ID, -1000, 1) { relative, pan is at 0 }
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Notes below C3 utilize a relative bit of 0. C3 and above utilize a relative bit of 1.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] change_vol()
[2024-05-09 18:59:19] change_tune()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: change_pan()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: change_pan
[2024-05-09 18:59:19] Parameters: event-id,panorama,relative-bit
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Changes the pan position of a specific note event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be changed.
[2024-05-09 18:59:19] <panorama>: The pan position of the note event, from -1000 (left) to 1000 (right).
[2024-05-09 18:59:19] <relative-bit>: If set to 0, the amount is absolute , i.e. the amount overwrites any previous
[2024-05-09 18:59:19] set values of that event. Note that this mode also overwrites any zone volume
[2024-05-09 18:59:19] adjustments!
[2024-05-09 18:59:19] If set to 1, the amount is relative  to the actual value of the event.
[2024-05-09 18:59:19] If set to 2, it behaves like mode 0 (absolute  adjustment), except any zone
[2024-05-09 18:59:19] volume adjustments are preserved.
[2024-05-09 18:59:19] The different implications between absolute and relative adjustments are more
[2024-05-09 18:59:19] apparent with more than one change_pan() statement applied to the same
[2024-05-09 18:59:19] event.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - change_pan() works on the note event level and does not change any panorama settings in
[2024-05-09 18:59:19] the instrument itself. It is also not related to any modulations regarding panorama.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $pan_position
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     $pan_position := ($EVENT_NOTE * 2000 / 127) - 1000
[2024-05-09 18:59:19]     change_pan($EVENT_ID, $pan_position, 0)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Panning the entire key range from left to right, i.e. C-2 all the way to the left, G8 all the way to the
[2024-05-09 18:59:19] right.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if ($EVENT_NOTE < 60)
[2024-05-09 18:59:19]         change_pan($EVENT_ID, 1000, 0)
[2024-05-09 18:59:19]         wait(500000)
[2024-05-09 18:59:19]         change_pan($EVENT_ID, -1000, 0) { absolute, pan is at -1000 }
[2024-05-09 18:59:19]     else
[2024-05-09 18:59:19]         change_pan($EVENT_ID, 1000, 1)
[2024-05-09 18:59:19]         wait(500000)
[2024-05-09 18:59:19]         change_pan($EVENT_ID, -1000, 1) { relative, pan is at 0 }
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Notes below C3 utilize a relative bit of 0. C3 and above utilize a relative bit of 1.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] change_vol()
[2024-05-09 18:59:19] change_tune()
[2024-05-09 18:59:19] ------------------------------ change_tune ------------------------------
[2024-05-09 18:59:19] Page 85, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3139
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] change_tune(<event-id>, <tune-amount>, <relative-bit>)
[2024-05-09 18:59:19] Changes the tuning of a specific note event in millicents.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be changed.
[2024-05-09 18:59:19] <tune-amount>: The tune amount in millicents. 100000 equals 100 cents (one semitone).
[2024-05-09 18:59:19] <relative-bit>: If set to 0, the amount is absolute , i.e. the amount overwrites any previous set
[2024-05-09 18:59:19] values of that event.
[2024-05-09 18:59:19] If set to 1, the amount is relative  to the actual value of the event.
[2024-05-09 18:59:19] The different implications between absolute and relative adjustments are more
[2024-05-09 18:59:19] apparent with more than one change_tune() statement applied to the same
[2024-05-09 18:59:19] event.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  change_tune() works on the note event level and does not change any tune settings in the
[2024-05-09 18:59:19] instrument itself. It is also not related to any modulations regarding tuning.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $tune_amount
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     $tune_amount := random(-50000, 50000)
[2024-05-09 18:59:19]     change_tune($EVENT_ID, $tune_amount, 1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Randomly detune every played note by ±50 cents
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] change_vol()
[2024-05-09 18:59:19] change_pan()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: change_tune()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: change_tune
[2024-05-09 18:59:19] Parameters: event-id,tune-amount,relative-bit
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Changes the tuning of a specific note event in millicents.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be changed.
[2024-05-09 18:59:19] <tune-amount>: The tune amount in millicents. 100000 equals 100 cents (one semitone).
[2024-05-09 18:59:19] <relative-bit>: If set to 0, the amount is absolute , i.e. the amount overwrites any previous set
[2024-05-09 18:59:19] values of that event.
[2024-05-09 18:59:19] If set to 1, the amount is relative  to the actual value of the event.
[2024-05-09 18:59:19] The different implications between absolute and relative adjustments are more
[2024-05-09 18:59:19] apparent with more than one change_tune() statement applied to the same
[2024-05-09 18:59:19] event.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - change_tune() works on the note event level and does not change any tune settings in the
[2024-05-09 18:59:19] instrument itself. It is also not related to any modulations regarding tuning.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $tune_amount
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     $tune_amount := random(-50000, 50000)
[2024-05-09 18:59:19]     change_tune($EVENT_ID, $tune_amount, 1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Randomly detune every played note by ±50 cents
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] change_vol()
[2024-05-09 18:59:19] change_pan()
[2024-05-09 18:59:19] ------------------------------ change_velo ------------------------------
[2024-05-09 18:59:19] Page 86, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3173
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] change_velo(<event-id>, <velocity>)
[2024-05-09 18:59:19] Changes the velocity of a specific note event ID.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  change_velo() is only allowed in the on note callback and only works before the first
[2024-05-09 18:59:19] wait() statement. If the voice is already running, only the value of the variable changes.
[2024-05-09 18:59:19] •     Once the velocity of a particular note event is changed, it becomes the new
[2024-05-09 18:59:19] $EVENT_VELOCITY.
[2024-05-09 18:59:19] •     It is not possible to address events via event groups like $ALL_EVENTS.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     change_velo($EVENT_ID, 100)
[2024-05-09 18:59:19]     message($EVENT_VELOCITY)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] All velocities are set to 100. Note that $EVENT_VELOCITY will also change to 100.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] change_note()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_VELOCITY
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: change_velo()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: change_velo
[2024-05-09 18:59:19] Parameters: event-id,velocity
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Changes the velocity of a specific note event ID.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - change_velo() is only allowed in the on note callback and only works before the first
[2024-05-09 18:59:19] wait() statement. If the voice is already running, only the value of the variable changes.
[2024-05-09 18:59:19] - Once the velocity of a particular note event is changed, it becomes the new
[2024-05-09 18:59:19] $EVENT_VELOCITY.
[2024-05-09 18:59:19] - It is not possible to address events via event groups like $ALL_EVENTS.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     change_velo($EVENT_ID, 100)
[2024-05-09 18:59:19]     message($EVENT_VELOCITY)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] All velocities are set to 100. Note that $EVENT_VELOCITY will also change to 100.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] change_note()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_VELOCITY
[2024-05-09 18:59:19] ------------------------------ change_vol ------------------------------
[2024-05-09 18:59:19] Page 87, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3198
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] change_vol(<event-id>, <volume>, <relative-bit>)
[2024-05-09 18:59:19] Changes the volume of a specific note event in millidecibels.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be changed.
[2024-05-09 18:59:19] <volume>: The volume change in millidecibels (1000 millidecibels = 1 decibel).
[2024-05-09 18:59:19] <relative-bit>: If set to 0, the amount is absolute , i.e. the amount overwrites any previous
[2024-05-09 18:59:19] set values of that event. Note that this mode also overwrites any zone volume
[2024-05-09 18:59:19] adjustments!
[2024-05-09 18:59:19] If set to 1, the amount is relative  to the actual value of the event.
[2024-05-09 18:59:19] If set to 2, it behaves like mode 0 (absolute  adjustment), except any zone
[2024-05-09 18:59:19] volume adjustments are preserved.
[2024-05-09 18:59:19] The different implications between absolute and relative adjustments are more
[2024-05-09 18:59:19] apparent with more than one change_vol() statement applied to the same
[2024-05-09 18:59:19] event.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  change_vol() works on the note event level and does not change any tune settings in the
[2024-05-09 18:59:19] instrument itself. It is also not related to any MIDI modulations regarding volume (e.g. MIDI CC
[2024-05-09 18:59:19] #7).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Example
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $vol_amount
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     $vol_amount := (($EVENT_VELOCITY - 1) * 12000 / 126) - 6000
[2024-05-09 18:59:19]     change_vol ($EVENT_ID, $vol_amount, 1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] A simple dynamic expander: lightly played notes will be softer, harder played notes will be louder.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] change_tune()
[2024-05-09 18:59:19] change_pan()
[2024-05-09 18:59:19] fade_in()
[2024-05-09 18:59:19] fade_out()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: change_vol()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: change_vol
[2024-05-09 18:59:19] Parameters: event-id,volume,relative-bit
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Changes the volume of a specific note event in millidecibels.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be changed.
[2024-05-09 18:59:19] <volume>: The volume change in millidecibels (1000 millidecibels = 1 decibel).
[2024-05-09 18:59:19] <relative-bit>: If set to 0, the amount is absolute , i.e. the amount overwrites any previous
[2024-05-09 18:59:19] set values of that event. Note that this mode also overwrites any zone volume
[2024-05-09 18:59:19] adjustments!
[2024-05-09 18:59:19] If set to 1, the amount is relative  to the actual value of the event.
[2024-05-09 18:59:19] If set to 2, it behaves like mode 0 (absolute  adjustment), except any zone
[2024-05-09 18:59:19] volume adjustments are preserved.
[2024-05-09 18:59:19] The different implications between absolute and relative adjustments are more
[2024-05-09 18:59:19] apparent with more than one change_vol() statement applied to the same
[2024-05-09 18:59:19] event.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - change_vol() works on the note event level and does not change any tune settings in the
[2024-05-09 18:59:19] instrument itself. It is also not related to any MIDI modulations regarding volume (e.g. MIDI CC
[2024-05-09 18:59:19] #7).
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $vol_amount
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     $vol_amount := (($EVENT_VELOCITY - 1) * 12000 / 126) - 6000
[2024-05-09 18:59:19]     change_vol ($EVENT_ID, $vol_amount, 1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] A simple dynamic expander: lightly played notes will be softer, harder played notes will be louder.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] change_tune()
[2024-05-09 18:59:19] change_pan()
[2024-05-09 18:59:19] fade_in()
[2024-05-09 18:59:19] fade_out()
[2024-05-09 18:59:19] ------------------------------ delete_event_mark ------------------------------
[2024-05-09 18:59:19] Page 88, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3238
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] delete_event_mark(<event-id>, <mark>)
[2024-05-09 18:59:19] Delete an event mark, i.e. ungroup the specified event from an event group.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be ungrouped.
[2024-05-09 18:59:19] <mark>: One of 28 marks, $MARK_1 ... $MARK_28, which was assigned to the event.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] set_event_mark()
[2024-05-09 18:59:19] by_marks()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_ID, $ALL_EVENTS, $MARK_1 … $MARK_28
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: delete_event_mark()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: delete_event_mark
[2024-05-09 18:59:19] Parameters: event-id,mark
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Delete an event mark, i.e. ungroup the specified event from an event group.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be ungrouped.
[2024-05-09 18:59:19] <mark>: One of 28 marks, $MARK_1 ... $MARK_28, which was assigned to the event.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] set_event_mark()
[2024-05-09 18:59:19] by_marks()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_ID, $ALL_EVENTS, $MARK_1 … $MARK_28
[2024-05-09 18:59:19] ------------------------------ event_status ------------------------------
[2024-05-09 18:59:19] Page 89, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3251
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] event_status(<event-id>)
[2024-05-09 18:59:19] Retrieves the status of a particular note event (or MIDI event in the multi script). These are the
[2024-05-09 18:59:19] possible states:
[2024-05-09 18:59:19] •  $EVENT_STATUS_NOTE_QUEUE (note is active - instrument script only)
[2024-05-09 18:59:19] •  $EVENT_STATUS_MIDI_QUEUE (MIDI event is active - multi script only)
[2024-05-09 18:59:19] •  $EVENT_STATUS_INACTIVE (note or MIDI event is inactive)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  event_status() can be used to find out if a note event is still "alive" or not.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare %key_id[128]
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if (event_status(%key_id[$EVENT_NOTE]) = $EVENT_STATUS_NOTE_QUEUE)
[2024-05-09 18:59:19]         fade_out(%key_id[$EVENT_NOTE], 10000, 1)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     %key_id[$EVENT_NOTE] := $EVENT_ID
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Limit the number of active note events to one per MIDI key.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] get_event_ids()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_STATUS_INACTIVE, $EVENT_STATUS_NOTE_QUEUE,
[2024-05-09 18:59:19] $EVENT_STATUS_MIDI_QUEUE
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: event_status()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: event_status
[2024-05-09 18:59:19] Parameters: event-id
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Retrieves the status of a particular note event (or MIDI event in the multi script). These are the
[2024-05-09 18:59:19] possible states:
[2024-05-09 18:59:19] - $EVENT_STATUS_NOTE_QUEUE (note is active - instrument script only)
[2024-05-09 18:59:19] - $EVENT_STATUS_MIDI_QUEUE (MIDI event is active - multi script only)
[2024-05-09 18:59:19] - $EVENT_STATUS_INACTIVE (note or MIDI event is inactive)
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - event_status() can be used to find out if a note event is still "alive" or not.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare %key_id[128]
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if (event_status(%key_id[$EVENT_NOTE]) = $EVENT_STATUS_NOTE_QUEUE)
[2024-05-09 18:59:19]         fade_out(%key_id[$EVENT_NOTE], 10000, 1)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     %key_id[$EVENT_NOTE] := $EVENT_ID
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Limit the number of active note events to one per MIDI key.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] get_event_ids()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_STATUS_INACTIVE, $EVENT_STATUS_NOTE_QUEUE,
[2024-05-09 18:59:19] $EVENT_STATUS_MIDI_QUEUE
[2024-05-09 18:59:19] ------------------------------ fade_in ------------------------------
[2024-05-09 18:59:19] Page 90, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3284
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] fade_in(<event-id>, <fade-time>)
[2024-05-09 18:59:19] Performs a fade in for a specific note event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be faded in.
[2024-05-09 18:59:19] <fade-time>: The fade in time in microseconds.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $note_1_id
[2024-05-09 18:59:19]     declare $note_2_id
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     $note_1_id := play_note($EVENT_NOTE + 12, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]     $note_2_id := play_note($EVENT_NOTE + 19, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     fade_in ($note_1_id, 1000000)
[2024-05-09 18:59:19]     fade_in ($note_2_id, 5000000)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Fading in the first two harmonics.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] change_vol()
[2024-05-09 18:59:19] fade_out()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: fade_in()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: fade_in
[2024-05-09 18:59:19] Parameters: event-id,fade-time
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Performs a fade in for a specific note event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be faded in.
[2024-05-09 18:59:19] <fade-time>: The fade in time in microseconds.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $note_1_id
[2024-05-09 18:59:19]     declare $note_2_id
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     $note_1_id := play_note($EVENT_NOTE + 12, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]     $note_2_id := play_note($EVENT_NOTE + 19, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     fade_in ($note_1_id, 1000000)
[2024-05-09 18:59:19]     fade_in ($note_2_id, 5000000)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Fading in the first two harmonics.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] change_vol()
[2024-05-09 18:59:19] fade_out()
[2024-05-09 18:59:19] ------------------------------ fade_out ------------------------------
[2024-05-09 18:59:19] Page 91, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3312
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] fade_out(<event-id>, <fade-time>, <stop-voice>)
[2024-05-09 18:59:19] Performs a fade-out for a specific note event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be faded out.
[2024-05-09 18:59:19] <fade-time>: The fade out time in microseconds.
[2024-05-09 18:59:19] <stop-voice>: If set to 1, the voice is stopped after the fade out.
[2024-05-09 18:59:19] If set to 0, the voice will still be running after the fade out.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 1)
[2024-05-09 18:59:19]         if (%CC[1] mod 2 # 0)
[2024-05-09 18:59:19]             fade_out($ALL_EVENTS, 5000, 0)
[2024-05-09 18:59:19]         else
[2024-05-09 18:59:19]             fade_in($ALL_EVENTS, 5000)
[2024-05-09 18:59:19]         end if
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Use the modwheel on held notes to create a stutter effect.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 1)
[2024-05-09 18:59:19]         fade_out($ALL_EVENTS, 5000, 1)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] A custom All Sound Off implementation triggered by the modwheel.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] change_vol()
[2024-05-09 18:59:19] fade_out()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: fade_out()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: fade_out
[2024-05-09 18:59:19] Parameters: event-id,fade-time,stop-voice
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Performs a fade-out for a specific note event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be faded out.
[2024-05-09 18:59:19] <fade-time>: The fade out time in microseconds.
[2024-05-09 18:59:19] <stop-voice>: If set to 1, the voice is stopped after the fade out.
[2024-05-09 18:59:19] If set to 0, the voice will still be running after the fade out.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 1)
[2024-05-09 18:59:19]         if (%CC[1] mod 2 # 0)
[2024-05-09 18:59:19]             fade_out($ALL_EVENTS, 5000, 0)
[2024-05-09 18:59:19]         else
[2024-05-09 18:59:19]             fade_in($ALL_EVENTS, 5000)
[2024-05-09 18:59:19]         end if
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Use the modwheel on held notes to create a stutter effect.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on controller
[2024-05-09 18:59:19]     if ($CC_NUM = 1)
[2024-05-09 18:59:19]         fade_out($ALL_EVENTS, 5000, 1)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] A custom All Sound Off implementation triggered by the modwheel.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] change_vol()
[2024-05-09 18:59:19] fade_out()
[2024-05-09 18:59:19] ------------------------------ get_event_ids ------------------------------
[2024-05-09 18:59:19] Page 92, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3346
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] get_event_ids(<array-name>)
[2024-05-09 18:59:19] Fills the specified array with all active event IDs.
[2024-05-09 18:59:19] <array-name>: Array to be filled with active event IDs.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     The command overwrites all existing values as long as there are active events, and writes 0 if
[2024-05-09 18:59:19] no events are active anymore. If there are more active events than array indices, the array will
[2024-05-09 18:59:19] be filled until it is full, ignoring the remaining event IDs.
[2024-05-09 18:59:19] •     If there are less active events than array indices, the array will be filled from the beginning with
[2024-05-09 18:59:19] all event IDs, followed by one array index with its value set to 0.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare const $ARRAY_SIZE := 500
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     declare $a
[2024-05-09 18:59:19]     declare $note_count
[2024-05-09 18:59:19]     declare %test_array[$ARRAY_SIZE]
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     get_event_ids(%test_array)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     $note_count := 0
[2024-05-09 18:59:19]     $a := 0
[2024-05-09 18:59:19]     while($a < $ARRAY_SIZE and %test_array[$a] # 0)
[2024-05-09 18:59:19]         inc($note_count)
[2024-05-09 18:59:19]         inc($a)
[2024-05-09 18:59:19]     end while
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     message("Active Events: " & $note_count)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Monitoring the number of active events.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] event_status()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: get_event_ids()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: get_event_ids
[2024-05-09 18:59:19] Parameters: array-name
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Fills the specified array with all active event IDs.
[2024-05-09 18:59:19] <array-name>: Array to be filled with active event IDs.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - The command overwrites all existing values as long as there are active events, and writes 0 if
[2024-05-09 18:59:19] no events are active anymore. If there are more active events than array indices, the array will
[2024-05-09 18:59:19] be filled until it is full, ignoring the remaining event IDs.
[2024-05-09 18:59:19] - If there are less active events than array indices, the array will be filled from the beginning with
[2024-05-09 18:59:19] all event IDs, followed by one array index with its value set to 0.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare const $ARRAY_SIZE := 500
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     declare $a
[2024-05-09 18:59:19]     declare $note_count
[2024-05-09 18:59:19]     declare %test_array[$ARRAY_SIZE]
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     get_event_ids(%test_array)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     $note_count := 0
[2024-05-09 18:59:19]     $a := 0
[2024-05-09 18:59:19]     while($a < $ARRAY_SIZE and %test_array[$a] # 0)
[2024-05-09 18:59:19]         inc($note_count)
[2024-05-09 18:59:19]         inc($a)
[2024-05-09 18:59:19]     end while
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     message("Active Events: " & $note_count)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Monitoring the number of active events.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] event_status()
[2024-05-09 18:59:19] ------------------------------ get_event_mark ------------------------------
[2024-05-09 18:59:19] Page 93, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3387
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] get_event_mark(<event-id>, <mark>)
[2024-05-09 18:59:19] Checks if the specified event ID belongs to a specific event group (returns 1 if the bit mark is set, 0
[2024-05-09 18:59:19] otherwise).
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be checked.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] <mark>: The bit mark, $MARK_1 ... $MARK_28 . You can also select more than one
[2024-05-09 18:59:19] event group by using the bitwise .or. operator, or by simply summing the
[2024-05-09 18:59:19] event marks.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if ($EVENT_NOTE mod 12 = 0)
[2024-05-09 18:59:19]         set_event_mark($EVENT_ID, $MARK_1)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on release
[2024-05-09 18:59:19]     if (get_event_mark($EVENT_ID, $MARK_1) = 1)
[2024-05-09 18:59:19]         message("You've played a C!")
[2024-05-09 18:59:19]     else
[2024-05-09 18:59:19]         message("")
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] A rather long-winded way to check if you've released a C key.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] set_event_mark()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: get_event_mark()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: get_event_mark
[2024-05-09 18:59:19] Parameters: event-id,mark
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Checks if the specified event ID belongs to a specific event group (returns 1 if the bit mark is set, 0
[2024-05-09 18:59:19] otherwise).
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be checked.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] <mark>: The bit mark, $MARK_1 ... $MARK_28 . You can also select more than one
[2024-05-09 18:59:19] event group by using the bitwise .or. operator, or by simply summing the
[2024-05-09 18:59:19] event marks.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     if ($EVENT_NOTE mod 12 = 0)
[2024-05-09 18:59:19]         set_event_mark($EVENT_ID, $MARK_1)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on release
[2024-05-09 18:59:19]     if (get_event_mark($EVENT_ID, $MARK_1) = 1)
[2024-05-09 18:59:19]         message("You've played a C!")
[2024-05-09 18:59:19]     else
[2024-05-09 18:59:19]         message("")
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] A rather long-winded way to check if you've released a C key.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] set_event_mark()
[2024-05-09 18:59:19] ------------------------------ get_event_par ------------------------------
[2024-05-09 18:59:19] Page 94, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3419
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] get_event_par(<event-id>, <parameter>)
[2024-05-09 18:59:19] Returns the value of a specific event parameter of the specified event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be changed.
[2024-05-09 18:59:19] <parameter>: The event parameter, either one of four freely assignable event parameters:
[2024-05-09 18:59:19] •  $EVENT_PAR_0
[2024-05-09 18:59:19] •  $EVENT_PAR_1
[2024-05-09 18:59:19] •  $EVENT_PAR_2
[2024-05-09 18:59:19] •  $EVENT_PAR_3
[2024-05-09 18:59:19] or the "built-in" parameters of a note event:
[2024-05-09 18:59:19] •  $EVENT_PAR_VOLUME
[2024-05-09 18:59:19] •  $EVENT_PAR_PAN
[2024-05-09 18:59:19] •  $EVENT_PAR_TUNE
[2024-05-09 18:59:19] •  $EVENT_PAR_NOTE
[2024-05-09 18:59:19] •  $EVENT_PAR_VELOCITY
[2024-05-09 18:59:19] •  $EVENT_PAR_REL_VELOCITY
[2024-05-09 18:59:19] •  $EVENT_PAR_MIDI_CHANNEL
[2024-05-09 18:59:19] •  $EVENT_PAR_SOURCE
[2024-05-09 18:59:19] •  $EVENT_PAR_PLAY_POS
[2024-05-09 18:59:19] •  $EVENT_PAR_ZONE_ID (use with care, see below)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     A note event always carries certain information like the note number, the played velocity, but
[2024-05-09 18:59:19] also volume, pan and tune. With get_event_par(), you can get either these parameters
[2024-05-09 18:59:19] or use the freely assignable parameters like $EVENT_PAR_0. This is especially useful when
[2024-05-09 18:59:19] chaining scripts, i.e. set an event parameter for an event in script slot 1, then retrieve this
[2024-05-09 18:59:19] information in script slot 2 by using get_event_par().
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     message(get_event_par($EVENT_ID, $EVENT_PAR_NOTE))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] The same functionality as message($EVENT_NOTE).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     message(get_event_par($EVENT_ID, $EVENT_PAR_SOURCE))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Check if the event comes from outside (returns -1 in this case) or if it was created in one of the five
[2024-05-09 18:59:19] script slots (returns 0-4).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     wait(1)
[2024-05-09 18:59:19]     message(get_event_par($EVENT_ID, $EVENT_PAR_ZONE_ID))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] An event itself does not carry a zone ID (only a voice can carry zone IDs), therefore you need to insert
[2024-05-09 18:59:19] wait(1) in order to properly retrieve the zone ID.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] set_event_par()
[2024-05-09 18:59:19] ignore_event()
[2024-05-09 18:59:19] set_event_par_arr()
[2024-05-09 18:59:19] get_event_par_arr()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: get_event_par()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: get_event_par
[2024-05-09 18:59:19] Parameters: event-id,parameter
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Returns the value of a specific event parameter of the specified event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be changed.
[2024-05-09 18:59:19] <parameter>: The event parameter, either one of four freely assignable event parameters:
[2024-05-09 18:59:19] - $EVENT_PAR_0
[2024-05-09 18:59:19] - $EVENT_PAR_1
[2024-05-09 18:59:19] - $EVENT_PAR_2
[2024-05-09 18:59:19] - $EVENT_PAR_3
[2024-05-09 18:59:19] or the "built-in" parameters of a note event:
[2024-05-09 18:59:19] - $EVENT_PAR_VOLUME
[2024-05-09 18:59:19] - $EVENT_PAR_PAN
[2024-05-09 18:59:19] - $EVENT_PAR_TUNE
[2024-05-09 18:59:19] - $EVENT_PAR_NOTE
[2024-05-09 18:59:19] - $EVENT_PAR_VELOCITY
[2024-05-09 18:59:19] - $EVENT_PAR_REL_VELOCITY
[2024-05-09 18:59:19] - $EVENT_PAR_MIDI_CHANNEL
[2024-05-09 18:59:19] - $EVENT_PAR_SOURCE
[2024-05-09 18:59:19] - $EVENT_PAR_PLAY_POS
[2024-05-09 18:59:19] - $EVENT_PAR_ZONE_ID (use with care, see below)
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - A note event always carries certain information like the note number, the played velocity, but
[2024-05-09 18:59:19] also volume, pan and tune. With get_event_par(), you can get either these parameters
[2024-05-09 18:59:19] or use the freely assignable parameters like $EVENT_PAR_0. This is especially useful when
[2024-05-09 18:59:19] chaining scripts, i.e. set an event parameter for an event in script slot 1, then retrieve this
[2024-05-09 18:59:19] information in script slot 2 by using get_event_par().
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     message(get_event_par($EVENT_ID, $EVENT_PAR_NOTE))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] The same functionality as message($EVENT_NOTE).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     message(get_event_par($EVENT_ID, $EVENT_PAR_SOURCE))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Check if the event comes from outside (returns -1 in this case) or if it was created in one of the five
[2024-05-09 18:59:19] script slots (returns 0-4).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     wait(1)
[2024-05-09 18:59:19]     message(get_event_par($EVENT_ID, $EVENT_PAR_ZONE_ID))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] An event itself does not carry a zone ID (only a voice can carry zone IDs), therefore you need to insert
[2024-05-09 18:59:19] wait(1) in order to properly retrieve the zone ID.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] set_event_par()
[2024-05-09 18:59:19] ignore_event()
[2024-05-09 18:59:19] set_event_par_arr()
[2024-05-09 18:59:19] get_event_par_arr()
[2024-05-09 18:59:19] ------------------------------ get_event_par_arr ------------------------------
[2024-05-09 18:59:19] Page 96, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3476
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] get_event_par_arr(<event-id>, <parameter>, <index>)
[2024-05-09 18:59:19] Retrieves the value of a specified event parameter of a specific event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event.
[2024-05-09 18:59:19] <parameter>: Can be one of the following:
[2024-05-09 18:59:19] •  $EVENT_PAR_ALLOW_GROUP
[2024-05-09 18:59:19] •  $EVENT_PAR_CUSTOM
[2024-05-09 18:59:19] •  $EVENT_PAR_MOD_VALUE_ID
[2024-05-09 18:59:19] •  $EVENT_PAR_MOD_VALUE_EX_ID
[2024-05-09 18:59:19] <index>: When used with:
[2024-05-09 18:59:19] •  $EVENT_PAR_ALLOW_GROUP: the group index (0 ... 4095, however this
[2024-05-09 18:59:19] depends on the amount of groups present in a particular Kontakt
[2024-05-09 18:59:19] instrument)
[2024-05-09 18:59:19] •  $EVENT_PAR_CUSTOM: the event parameter index (0 ... 15)
[2024-05-09 18:59:19] •  $EVENT_PAR_MOD_VALUE_ID/$EVENT_PAR_MOD_VALUE_EX_ID: the
[2024-05-09 18:59:19] "from script" modulator index, as set in the modulation assignment in
[2024-05-09 18:59:19] Kontakt (0 ... 1000)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •  get_event_par_arr() is the array variant of get_event_par(). You can use it to retrieve
[2024-05-09 18:59:19] the group allow state of a specific event, or if you need to access more than the four standard
[2024-05-09 18:59:19] event parameters. You can also use it to retrieve the value of event-specific modulations,
[2024-05-09 18:59:19] facilitated by "from script" modulators in Kontakt.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $count
[2024-05-09 18:59:19]     declare ui_label $label (2, 4)
[2024-05-09 18:59:19]     set_text($label, "")
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     set_text($label, "")
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     $count := 0
[2024-05-09 18:59:19]     while ($count < $NUM_GROUPS)
[2024-05-09 18:59:19]         if (get_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, $count) = 1)
[2024-05-09 18:59:19]             add_text_line($label,"Group ID " & $count & " allowed")
[2024-05-09 18:59:19]         else
[2024-05-09 18:59:19]             add_text_line($label,"Group ID " & $count & " disallowed")
[2024-05-09 18:59:19]         end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]         inc($count)
[2024-05-09 18:59:19]     end while
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] A simple group monitor.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] set_event_par_arr()
[2024-05-09 18:59:19] get_event_par()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_PAR_ALLOW_GROUP, $EVENT_PAR_MOD_VALUE_ID,
[2024-05-09 18:59:19] $EVENT_PAR_CUSTOM , %GROUPS_AFFECTED
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: get_event_par_arr()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: get_event_par_arr
[2024-05-09 18:59:19] Parameters: event-id,parameter,index
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Retrieves the value of a specified event parameter of a specific event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event.
[2024-05-09 18:59:19] <parameter>: Can be one of the following:
[2024-05-09 18:59:19] - $EVENT_PAR_ALLOW_GROUP
[2024-05-09 18:59:19] - $EVENT_PAR_CUSTOM
[2024-05-09 18:59:19] - $EVENT_PAR_MOD_VALUE_ID
[2024-05-09 18:59:19] - $EVENT_PAR_MOD_VALUE_EX_ID
[2024-05-09 18:59:19] <index>: When used with:
[2024-05-09 18:59:19] - $EVENT_PAR_ALLOW_GROUP: the group index (0 ... 4095, however this
[2024-05-09 18:59:19] depends on the amount of groups present in a particular Kontakt
[2024-05-09 18:59:19] instrument)
[2024-05-09 18:59:19] - $EVENT_PAR_CUSTOM: the event parameter index (0 ... 15)
[2024-05-09 18:59:19] - $EVENT_PAR_MOD_VALUE_ID/$EVENT_PAR_MOD_VALUE_EX_ID: the
[2024-05-09 18:59:19] "from script" modulator index, as set in the modulation assignment in
[2024-05-09 18:59:19] Kontakt (0 ... 1000)
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - get_event_par_arr() is the array variant of get_event_par(). You can use it to retrieve
[2024-05-09 18:59:19] the group allow state of a specific event, or if you need to access more than the four standard
[2024-05-09 18:59:19] event parameters. You can also use it to retrieve the value of event-specific modulations,
[2024-05-09 18:59:19] facilitated by "from script" modulators in Kontakt.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $count
[2024-05-09 18:59:19]     declare ui_label $label (2, 4)
[2024-05-09 18:59:19]     set_text($label, "")
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     set_text($label, "")
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     $count := 0
[2024-05-09 18:59:19]     while ($count < $NUM_GROUPS)
[2024-05-09 18:59:19]         if (get_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, $count) = 1)
[2024-05-09 18:59:19]             add_text_line($label,"Group ID " & $count & " allowed")
[2024-05-09 18:59:19]         else
[2024-05-09 18:59:19]             add_text_line($label,"Group ID " & $count & " disallowed")
[2024-05-09 18:59:19]         end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]         inc($count)
[2024-05-09 18:59:19]     end while
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] A simple group monitor.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] set_event_par_arr()
[2024-05-09 18:59:19] get_event_par()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_PAR_ALLOW_GROUP, $EVENT_PAR_MOD_VALUE_ID,
[2024-05-09 18:59:19] $EVENT_PAR_CUSTOM , %GROUPS_AFFECTED
[2024-05-09 18:59:19] ------------------------------ ignore_event ------------------------------
[2024-05-09 18:59:19] Page 98, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3533
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] ignore_event(<event-id>)
[2024-05-09 18:59:19] Ignores a note event in on note or on release callbacks.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     If you ignore an event, any volume, tune or pan information is lost. You can however retrieve
[2024-05-09 18:59:19] this infomation with get_event_par(), refer to the two examples below.
[2024-05-09 18:59:19] •  ignore_event() is a very "strong" command. Always check if you can get the same results
[2024-05-09 18:59:19] with the various change_...() commands without having to ignore the event.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     ignore_event($EVENT_ID)
[2024-05-09 18:59:19]     wait(500000)
[2024-05-09 18:59:19]     play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Delaying all notes by half a second. Not bad, but if you, for example insert a microtuner before this
[2024-05-09 18:59:19] script, the tuning information will be lost.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $new_id
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     ignore_event($EVENT_ID)
[2024-05-09 18:59:19]     wait(500000)
[2024-05-09 18:59:19]     $new_id := play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     change_vol($new_id, get_event_par($EVENT_ID, $EVENT_PAR_VOLUME), 1)
[2024-05-09 18:59:19]     change_tune($new_id, get_event_par($EVENT_ID, $EVENT_PAR_TUNE), 1)
[2024-05-09 18:59:19]     change_pan($new_id, get_event_par($EVENT_ID, $EVENT_PAR_PAN), 1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Better: the tuning (plus volume and pan, to be precise) information is retrieved and applied to the
[2024-05-09 18:59:19] played note.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] ignore_controller
[2024-05-09 18:59:19] get_event_par()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: ignore_event()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: ignore_event
[2024-05-09 18:59:19] Parameters: event-id
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Ignores a note event in on note or on release callbacks.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - If you ignore an event, any volume, tune or pan information is lost. You can however retrieve
[2024-05-09 18:59:19] this infomation with get_event_par(), refer to the two examples below.
[2024-05-09 18:59:19] - ignore_event() is a very "strong" command. Always check if you can get the same results
[2024-05-09 18:59:19] with the various change_...() commands without having to ignore the event.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     ignore_event($EVENT_ID)
[2024-05-09 18:59:19]     wait(500000)
[2024-05-09 18:59:19]     play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Delaying all notes by half a second. Not bad, but if you, for example insert a microtuner before this
[2024-05-09 18:59:19] script, the tuning information will be lost.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $new_id
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     ignore_event($EVENT_ID)
[2024-05-09 18:59:19]     wait(500000)
[2024-05-09 18:59:19]     $new_id := play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     change_vol($new_id, get_event_par($EVENT_ID, $EVENT_PAR_VOLUME), 1)
[2024-05-09 18:59:19]     change_tune($new_id, get_event_par($EVENT_ID, $EVENT_PAR_TUNE), 1)
[2024-05-09 18:59:19]     change_pan($new_id, get_event_par($EVENT_ID, $EVENT_PAR_PAN), 1)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Better: the tuning (plus volume and pan, to be precise) information is retrieved and applied to the
[2024-05-09 18:59:19] played note.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] ignore_controller
[2024-05-09 18:59:19] get_event_par()
[2024-05-09 18:59:19] ------------------------------ redirect_output ------------------------------
[2024-05-09 18:59:19] Page 99, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3575
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] redirect_output(<event-id>, <output-type>, <index>)
[2024-05-09 18:59:19] Routes the audio signal of the specified event to a specific output or bus.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be routed.
[2024-05-09 18:59:19] <output-type>: Can be one of the following:
[2024-05-09 18:59:19] •  $OUTPUT_TYPE_DEFAULT: The audio signal of the event is routed to the
[2024-05-09 18:59:19] default instrument output.
[2024-05-09 18:59:19] •  $OUTPUT_TYPE_MASTER_OUT: The audio signal of the event is routed
[2024-05-09 18:59:19] directly to the output channel specified with <index> (0 ... 63, depending
[2024-05-09 18:59:19] on number of output channels defined in Kontakt). The audio signal will not
[2024-05-09 18:59:19] be affected by any instrument effect.
[2024-05-09 18:59:19] •  $OUTPUT_TYPE_AUX_OUT: The audio signal of the event is routed directly
[2024-05-09 18:59:19] to the Aux channel specified with <index>. (0 ... 3) The audio signal will
[2024-05-09 18:59:19] not be affected by any instrument effect.
[2024-05-09 18:59:19] •  $OUTPUT_TYPE_BUS_OUT: The audio signal of the event is routed to the
[2024-05-09 18:59:19] instrument bus specified with <index> (0 ... 15).
[2024-05-09 18:59:19] <index>: Specifies the output channel, aux channel or instrument bus, depending on
[2024-05-09 18:59:19] <output-type>.
[2024-05-09 18:59:19] Has no effect when <output-type> is set to $OUTPUT_TYPE_DEFAULT.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     When using redirect_output(), the output selection of a group is completely ignored.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $new_id_0
[2024-05-09 18:59:19]     declare $new_id_1
[2024-05-09 18:59:19]     decalre $new_id_2
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     ignore_event($EVENT_ID)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     $new_id_0 := play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]     $new_id_1 := play_note($EVENT_NOTE + 4, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]     $new_id_2 := play_note($EVENT_NOTE + 7, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     redirect_output($new_id_0, $OUTPUT_TYPE_BUS_OUT, 0)
[2024-05-09 18:59:19]     redirect_output($new_id_1, $OUTPUT_TYPE_BUS_OUT, 1)
[2024-05-09 18:59:19]     redirect_output($new_id_2, $OUTPUT_TYPE_BUS_OUT, 2)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Creating a major triad and routing each note to a separate instrument bus.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: redirect_output()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: redirect_output
[2024-05-09 18:59:19] Parameters: event-id,output-type,index
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Routes the audio signal of the specified event to a specific output or bus.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event to be routed.
[2024-05-09 18:59:19] <output-type>: Can be one of the following:
[2024-05-09 18:59:19] - $OUTPUT_TYPE_DEFAULT: The audio signal of the event is routed to the
[2024-05-09 18:59:19] default instrument output.
[2024-05-09 18:59:19] - $OUTPUT_TYPE_MASTER_OUT: The audio signal of the event is routed
[2024-05-09 18:59:19] directly to the output channel specified with <index> (0 ... 63, depending
[2024-05-09 18:59:19] on number of output channels defined in Kontakt). The audio signal will not
[2024-05-09 18:59:19] be affected by any instrument effect.
[2024-05-09 18:59:19] - $OUTPUT_TYPE_AUX_OUT: The audio signal of the event is routed directly
[2024-05-09 18:59:19] to the Aux channel specified with <index>. (0 ... 3) The audio signal will
[2024-05-09 18:59:19] not be affected by any instrument effect.
[2024-05-09 18:59:19] - $OUTPUT_TYPE_BUS_OUT: The audio signal of the event is routed to the
[2024-05-09 18:59:19] instrument bus specified with <index> (0 ... 15).
[2024-05-09 18:59:19] <index>: Specifies the output channel, aux channel or instrument bus, depending on
[2024-05-09 18:59:19] <output-type>.
[2024-05-09 18:59:19] Has no effect when <output-type> is set to $OUTPUT_TYPE_DEFAULT.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - When using redirect_output(), the output selection of a group is completely ignored.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $new_id_0
[2024-05-09 18:59:19]     declare $new_id_1
[2024-05-09 18:59:19]     decalre $new_id_2
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     ignore_event($EVENT_ID)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     $new_id_0 := play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]     $new_id_1 := play_note($EVENT_NOTE + 4, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]     $new_id_2 := play_note($EVENT_NOTE + 7, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     redirect_output($new_id_0, $OUTPUT_TYPE_BUS_OUT, 0)
[2024-05-09 18:59:19]     redirect_output($new_id_1, $OUTPUT_TYPE_BUS_OUT, 1)
[2024-05-09 18:59:19]     redirect_output($new_id_2, $OUTPUT_TYPE_BUS_OUT, 2)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Creating a major triad and routing each note to a separate instrument bus.
[2024-05-09 18:59:19] ------------------------------ set_event_mark ------------------------------
[2024-05-09 18:59:19] Page 100, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3621
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] set_event_mark(<event-id>, <mark>)
[2024-05-09 18:59:19] Assigns the specified event ID to a specific event group.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event.
[2024-05-09 18:59:19] <mark>: One of 28 marks, from $MARK_1 to $MARK_28 which will be assigned to the
[2024-05-09 18:59:19] event. You can also assign more than one mark to a single event, either by
[2024-05-09 18:59:19] typing the command again, or by using the bitwise .or. operator, or by simply
[2024-05-09 18:59:19] summing the event marks.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     When working with commands that deal with event IDs, you can group events by using
[2024-05-09 18:59:19] by_marks() instead of using individual IDs, as Kontakt needs to know that you want to
[2024-05-09 18:59:19] address marks, and not IDs.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $new_id
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     set_event_mark($EVENT_ID, $MARK_1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     $new_id := play_note($EVENT_NOTE + 12, 120, 0, -1)
[2024-05-09 18:59:19]     set_event_mark($new_id, $MARK_1 + $MARK_2)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     change_pan(by_marks($MARK_1), -1000, 1) { both notes panned to left }
[2024-05-09 18:59:19]     change_pan(by_marks($MARK_2), 2000, 1) { new note panned to right }
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] The played note belongs to event mark 1, the harmonized note belongs to both event marks 1 and 2.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] by_marks()
[2024-05-09 18:59:19] delete_event_mark()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_ID, $ALL_EVENTS, $MARK_1 … $MARK_28
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: set_event_mark()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: set_event_mark
[2024-05-09 18:59:19] Parameters: event-id,mark
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Assigns the specified event ID to a specific event group.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event.
[2024-05-09 18:59:19] <mark>: One of 28 marks, from $MARK_1 to $MARK_28 which will be assigned to the
[2024-05-09 18:59:19] event. You can also assign more than one mark to a single event, either by
[2024-05-09 18:59:19] typing the command again, or by using the bitwise .or. operator, or by simply
[2024-05-09 18:59:19] summing the event marks.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - When working with commands that deal with event IDs, you can group events by using
[2024-05-09 18:59:19] by_marks() instead of using individual IDs, as Kontakt needs to know that you want to
[2024-05-09 18:59:19] address marks, and not IDs.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     declare $new_id
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     set_event_mark($EVENT_ID, $MARK_1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     $new_id := play_note($EVENT_NOTE + 12, 120, 0, -1)
[2024-05-09 18:59:19]     set_event_mark($new_id, $MARK_1 + $MARK_2)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     change_pan(by_marks($MARK_1), -1000, 1) { both notes panned to left }
[2024-05-09 18:59:19]     change_pan(by_marks($MARK_2), 2000, 1) { new note panned to right }
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] The played note belongs to event mark 1, the harmonized note belongs to both event marks 1 and 2.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] by_marks()
[2024-05-09 18:59:19] delete_event_mark()
[2024-05-09 18:59:19] Events and MIDI: $EVENT_ID, $ALL_EVENTS, $MARK_1 … $MARK_28
[2024-05-09 18:59:19] ------------------------------ set_event_par ------------------------------
[2024-05-09 18:59:19] Page 101, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3659
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] set_event_par(<event-id>, <parameter>, <value>)
[2024-05-09 18:59:19] Assigns a specific event parameter value to a specific event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event.
[2024-05-09 18:59:19] <parameter>: The event parameter, either one of four freely assignable event parameters:
[2024-05-09 18:59:19] •  $EVENT_PAR_0
[2024-05-09 18:59:19] •  $EVENT_PAR_1
[2024-05-09 18:59:19] •  $EVENT_PAR_2
[2024-05-09 18:59:19] •  $EVENT_PAR_3
[2024-05-09 18:59:19] or the "built-in" parameters of a note event:
[2024-05-09 18:59:19] •  $EVENT_PAR_VOLUME
[2024-05-09 18:59:19] •  $EVENT_PAR_PAN
[2024-05-09 18:59:19] •  $EVENT_PAR_TUNE
[2024-05-09 18:59:19] •  $EVENT_PAR_NOTE
[2024-05-09 18:59:19] •  $EVENT_PAR_VELOCITY
[2024-05-09 18:59:19] •  $EVENT_PAR_REL_VELOCITY
[2024-05-09 18:59:19] •  $EVENT_PAR_MIDI_CHANNNEL
[2024-05-09 18:59:19] <value>: The value of the event parameter.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Remarks
[2024-05-09 18:59:19] •     A note event always carries certain information like the note number, the played velocity, but
[2024-05-09 18:59:19] also volume, pan and tune. With set_event_par(), you can set either these parameters
[2024-05-09 18:59:19] or use the freely assignable parameters like $EVENT_PAR_0. This is especially useful when
[2024-05-09 18:59:19] chaining scripts, i.e. set an event parameter for an event in script slot 1, then retrieve this
[2024-05-09 18:59:19] information in script slot 2 by using get_event_par().
[2024-05-09 18:59:19] •     If you need access to more than four custom parameters, please use
[2024-05-09 18:59:19] set_event_par_arr() with $EVENT_PAR_CUSTOM.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] Examples
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     set_event_par($EVENT_ID, $EVENT_PAR_NOTE, 60)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Setting all notes to middle C3, same as change_note($EVENT_ID, 60).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     message("")
[2024-05-09 18:59:19]     declare ui_switch $switch
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     declare ui_label $midiChan1 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan2 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan3 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan4 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan5 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan6 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan7 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan8 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan9 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan10 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan11 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan12 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan13 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan14 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan15 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan16 (1, 1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     declare %midiChans[16]
[2024-05-09 18:59:19]     %midiChans[0] := get_ui_id($midiChan1)
[2024-05-09 18:59:19]     %midiChans[1] := get_ui_id($midiChan2)
[2024-05-09 18:59:19]     %midiChans[2] := get_ui_id($midiChan3)
[2024-05-09 18:59:19]     %midiChans[3] := get_ui_id($midiChan4)
[2024-05-09 18:59:19]     %midiChans[4] := get_ui_id($midiChan5)
[2024-05-09 18:59:19]     %midiChans[5] := get_ui_id($midiChan6)
[2024-05-09 18:59:19]     %midiChans[6] := get_ui_id($midiChan7)
[2024-05-09 18:59:19]     %midiChans[7] := get_ui_id($midiChan8)
[2024-05-09 18:59:19]     %midiChans[8] := get_ui_id($midiChan9)
[2024-05-09 18:59:19]     %midiChans[9] := get_ui_id($midiChan10)
[2024-05-09 18:59:19]     %midiChans[10] := get_ui_id($midiChan11)
[2024-05-09 18:59:19]     %midiChans[11] := get_ui_id($midiChan12)
[2024-05-09 18:59:19]     %midiChans[12] := get_ui_id($midiChan13)
[2024-05-09 18:59:19]     %midiChans[13] := get_ui_id($midiChan14)
[2024-05-09 18:59:19]     %midiChans[14] := get_ui_id($midiChan15)
[2024-05-09 18:59:19]     %midiChans[15] := get_ui_id($midiChan16)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on release
[2024-05-09 18:59:19]     if ($switch = 1)
[2024-05-09 18:59:19]         set_event_par($EVENT_ID, $EVENT_PAR_REL_VELOCITY, 127)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     set_control_par_str(%midiChans[$MIDI_CHANNEL], $CONTROL_PAR_TEXT,
[2024-05-09 18:59:19] get_event_par($EVENT_ID, $EVENT_PAR_REL_VELOCITY))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Release velocity in MPE (MIDI Polyphonic Expression) context.
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] See Also
[2024-05-09 18:59:19] get_event_par()
[2024-05-09 18:59:19] ignore_event()
[2024-05-09 18:59:19] set_event_par_arr()
[2024-05-09 18:59:19] get_event_par_arr()
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] ********** Parsed Text End **********
[2024-05-09 18:59:19] Headline: 10. Event Commands
[2024-05-09 18:59:19] Category: set_event_par()
[2024-05-09 18:59:19] Source: BUILT-IN
[2024-05-09 18:59:19] Name: set_event_par
[2024-05-09 18:59:19] Parameters: event-id,parameter,value
[2024-05-09 18:59:19] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:19] Assigns a specific event parameter value to a specific event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event.
[2024-05-09 18:59:19] <parameter>: The event parameter, either one of four freely assignable event parameters:
[2024-05-09 18:59:19] - $EVENT_PAR_0
[2024-05-09 18:59:19] - $EVENT_PAR_1
[2024-05-09 18:59:19] - $EVENT_PAR_2
[2024-05-09 18:59:19] - $EVENT_PAR_3
[2024-05-09 18:59:19] or the "built-in" parameters of a note event:
[2024-05-09 18:59:19] - $EVENT_PAR_VOLUME
[2024-05-09 18:59:19] - $EVENT_PAR_PAN
[2024-05-09 18:59:19] - $EVENT_PAR_TUNE
[2024-05-09 18:59:19] - $EVENT_PAR_NOTE
[2024-05-09 18:59:19] - $EVENT_PAR_VELOCITY
[2024-05-09 18:59:19] - $EVENT_PAR_REL_VELOCITY
[2024-05-09 18:59:19] - $EVENT_PAR_MIDI_CHANNNEL
[2024-05-09 18:59:19] <value>: The value of the event parameter.
[2024-05-09 18:59:19] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:19] - A note event always carries certain information like the note number, the played velocity, but
[2024-05-09 18:59:19] also volume, pan and tune. With set_event_par(), you can set either these parameters
[2024-05-09 18:59:19] or use the freely assignable parameters like $EVENT_PAR_0. This is especially useful when
[2024-05-09 18:59:19] chaining scripts, i.e. set an event parameter for an event in script slot 1, then retrieve this
[2024-05-09 18:59:19] information in script slot 2 by using get_event_par().
[2024-05-09 18:59:19] - If you need access to more than four custom parameters, please use
[2024-05-09 18:59:19] set_event_par_arr() with $EVENT_PAR_CUSTOM.
[2024-05-09 18:59:19] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:19] on note
[2024-05-09 18:59:19]     set_event_par($EVENT_ID, $EVENT_PAR_NOTE, 60)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Setting all notes to middle C3, same as change_note($EVENT_ID, 60).
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on init
[2024-05-09 18:59:19]     message("")
[2024-05-09 18:59:19]     declare ui_switch $switch
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     declare ui_label $midiChan1 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan2 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan3 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan4 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan5 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan6 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan7 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan8 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan9 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan10 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan11 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan12 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan13 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan14 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan15 (1, 1)
[2024-05-09 18:59:19]     declare ui_label $midiChan16 (1, 1)
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     declare %midiChans[16]
[2024-05-09 18:59:19]     %midiChans[0] := get_ui_id($midiChan1)
[2024-05-09 18:59:19]     %midiChans[1] := get_ui_id($midiChan2)
[2024-05-09 18:59:19]     %midiChans[2] := get_ui_id($midiChan3)
[2024-05-09 18:59:19]     %midiChans[3] := get_ui_id($midiChan4)
[2024-05-09 18:59:19]     %midiChans[4] := get_ui_id($midiChan5)
[2024-05-09 18:59:19]     %midiChans[5] := get_ui_id($midiChan6)
[2024-05-09 18:59:19]     %midiChans[6] := get_ui_id($midiChan7)
[2024-05-09 18:59:19]     %midiChans[7] := get_ui_id($midiChan8)
[2024-05-09 18:59:19]     %midiChans[8] := get_ui_id($midiChan9)
[2024-05-09 18:59:19]     %midiChans[9] := get_ui_id($midiChan10)
[2024-05-09 18:59:19]     %midiChans[10] := get_ui_id($midiChan11)
[2024-05-09 18:59:19]     %midiChans[11] := get_ui_id($midiChan12)
[2024-05-09 18:59:19]     %midiChans[12] := get_ui_id($midiChan13)
[2024-05-09 18:59:19]     %midiChans[13] := get_ui_id($midiChan14)
[2024-05-09 18:59:19]     %midiChans[14] := get_ui_id($midiChan15)
[2024-05-09 18:59:19]     %midiChans[15] := get_ui_id($midiChan16)
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19]
[2024-05-09 18:59:19] on release
[2024-05-09 18:59:19]     if ($switch = 1)
[2024-05-09 18:59:19]         set_event_par($EVENT_ID, $EVENT_PAR_REL_VELOCITY, 127)
[2024-05-09 18:59:19]     end if
[2024-05-09 18:59:19]
[2024-05-09 18:59:19]     set_control_par_str(%midiChans[$MIDI_CHANNEL], $CONTROL_PAR_TEXT,
[2024-05-09 18:59:19] get_event_par($EVENT_ID, $EVENT_PAR_REL_VELOCITY))
[2024-05-09 18:59:19] end on
[2024-05-09 18:59:19] Release velocity in MPE (MIDI Polyphonic Expression) context.
[2024-05-09 18:59:19] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:19] get_event_par()
[2024-05-09 18:59:19] ignore_event()
[2024-05-09 18:59:19] set_event_par_arr()
[2024-05-09 18:59:19] get_event_par_arr()
[2024-05-09 18:59:19] ------------------------------ set_event_par_arr ------------------------------
[2024-05-09 18:59:19] Page 103, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3753
[2024-05-09 18:59:19] ********** Parsed Text Start **********
[2024-05-09 18:59:19] set_event_par_arr(<event-id>, <parameter>, <value>, <index>)
[2024-05-09 18:59:19] Assigns an event parameter array to a specific event.
[2024-05-09 18:59:19] <event-id>: Unique identification number of the note event.
[2024-05-09 18:59:19] <parameter>: Can be one of the following:
[2024-05-09 18:59:19] •  $EVENT_PAR_ALLOW_GROUP
[2024-05-09 18:59:19] •  $EVENT_PAR_CUSTOM
[2024-05-09 18:59:19] •  $EVENT_PAR_MOD_VALUE_ID
[2024-05-09 18:59:19] •  $EVENT_PAR_MOD_VALUE_EX_ID
[2024-05-09 18:59:19] <value>: When used with:
[2024-05-09 18:59:19] •  $EVENT_PAR_ALLOW_GROUP: the allow state for the group (1 for allowed,
[2024-05-09 18:59:19] 0 for disallowed)
[2024-05-09 18:59:19] •  $EVENT_PAR_CUSTOM: the value of the specified event parameter
[2024-05-09 18:59:19] •  $EVENT_PAR_MOD_VALUE_ID: the modulation value to be sent to "from
[2024-05-09 18:59:19] script" modulator (clamped internally between -1000000 and 1000000)
[2024-05-09 18:59:19] •  $EVENT_PAR_MOD_VALUE_EX_ID: the modulation value to be sent to
[2024-05-09 18:59:19] "from script" modulator (unbounded value range)
[2024-05-09 18:59:19] <index>When used with:
[2024-05-09 18:59:19] •  $EVENT_PAR_ALLOW_GROUP: the group index (0 ... 4095, however this
[2024-05-09 18:59:19] depends on the amount of groups present in a particular Kontakt
[2024-05-09 18:59:20] instrument)
[2024-05-09 18:59:20] •  $EVENT_PAR_CUSTOM: the event parameter index (0 ... 15)
[2024-05-09 18:59:20] •  $EVENT_PAR_MOD_VALUE_ID/$EVENT_PAR_MOD_VALUE_EX_ID: the
[2024-05-09 18:59:20] "from script" modulator index, as set in the modulation assignment in
[2024-05-09 18:59:20] Kontakt (0 ... 1000)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  set_event_par_arr() is the array variant of set_event_par(). You can use it to set the
[2024-05-09 18:59:20] group allow state of a specific event, or if you need to access more than the four standard
[2024-05-09 18:59:20] event parameters. You can also use it to set up event-specific modulations, facilitated by "from
[2024-05-09 18:59:20] script" modulators in Kontakt.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     if (get_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, 0) = 0)
[2024-05-09 18:59:20]         set_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, 1, 0)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Making sure the first group is always played.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare const $CUSTOM_EVENT_PAR_4 := 4
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     set_event_par_arr($EVENT_ID, $EVENT_PAR_CUSTOM, $ENGINE_UPTIME, $CUSTOM_EVENT_PAR_4)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     message(get_event_par_arr($EVENT_ID, $EVENT_PAR_CUSTOM, $CUSTOM_EVENT_PAR_4))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Simple implementation of $EVENT_PAR_CUSTOM.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     if ($EVENT_NOTE = 60)
[2024-05-09 18:59:20]         set_event_par_arr($EVENT_ID, $EVENT_PAR_MOD_VALUE_ID, 500000, 1)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Only middle C (MIDI note 60) will have any modulation applied, facilitated by "from script" modulator
[2024-05-09 18:59:20] that has its ID set to "1".
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] allow_group()
[2024-05-09 18:59:20] disallow_group()
[2024-05-09 18:59:20] get_event_par_arr()
[2024-05-09 18:59:20] set_event_par()
[2024-05-09 18:59:20] Events and MIDI: $EVENT_PAR_ALLOW_GROUP
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 10. Event Commands
[2024-05-09 18:59:20] Category: set_event_par_arr()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_event_par_arr
[2024-05-09 18:59:20] Parameters: event-id,parameter,value,index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assigns an event parameter array to a specific event.
[2024-05-09 18:59:20] <event-id>: Unique identification number of the note event.
[2024-05-09 18:59:20] <parameter>: Can be one of the following:
[2024-05-09 18:59:20] - $EVENT_PAR_ALLOW_GROUP
[2024-05-09 18:59:20] - $EVENT_PAR_CUSTOM
[2024-05-09 18:59:20] - $EVENT_PAR_MOD_VALUE_ID
[2024-05-09 18:59:20] - $EVENT_PAR_MOD_VALUE_EX_ID
[2024-05-09 18:59:20] <value>: When used with:
[2024-05-09 18:59:20] - $EVENT_PAR_ALLOW_GROUP: the allow state for the group (1 for allowed,
[2024-05-09 18:59:20] 0 for disallowed)
[2024-05-09 18:59:20] - $EVENT_PAR_CUSTOM: the value of the specified event parameter
[2024-05-09 18:59:20] - $EVENT_PAR_MOD_VALUE_ID: the modulation value to be sent to "from
[2024-05-09 18:59:20] script" modulator (clamped internally between -1000000 and 1000000)
[2024-05-09 18:59:20] - $EVENT_PAR_MOD_VALUE_EX_ID: the modulation value to be sent to
[2024-05-09 18:59:20] "from script" modulator (unbounded value range)
[2024-05-09 18:59:20] <index>When used with:
[2024-05-09 18:59:20] - $EVENT_PAR_ALLOW_GROUP: the group index (0 ... 4095, however this
[2024-05-09 18:59:20] depends on the amount of groups present in a particular Kontakt
[2024-05-09 18:59:20] instrument)
[2024-05-09 18:59:20] - $EVENT_PAR_CUSTOM: the event parameter index (0 ... 15)
[2024-05-09 18:59:20] - $EVENT_PAR_MOD_VALUE_ID/$EVENT_PAR_MOD_VALUE_EX_ID: the
[2024-05-09 18:59:20] "from script" modulator index, as set in the modulation assignment in
[2024-05-09 18:59:20] Kontakt (0 ... 1000)
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - set_event_par_arr() is the array variant of set_event_par(). You can use it to set the
[2024-05-09 18:59:20] group allow state of a specific event, or if you need to access more than the four standard
[2024-05-09 18:59:20] event parameters. You can also use it to set up event-specific modulations, facilitated by "from
[2024-05-09 18:59:20] script" modulators in Kontakt.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     if (get_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, 0) = 0)
[2024-05-09 18:59:20]         set_event_par_arr($EVENT_ID, $EVENT_PAR_ALLOW_GROUP, 1, 0)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Making sure the first group is always played.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare const $CUSTOM_EVENT_PAR_4 := 4
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     set_event_par_arr($EVENT_ID, $EVENT_PAR_CUSTOM, $ENGINE_UPTIME, $CUSTOM_EVENT_PAR_4)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     message(get_event_par_arr($EVENT_ID, $EVENT_PAR_CUSTOM, $CUSTOM_EVENT_PAR_4))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Simple implementation of $EVENT_PAR_CUSTOM.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     if ($EVENT_NOTE = 60)
[2024-05-09 18:59:20]         set_event_par_arr($EVENT_ID, $EVENT_PAR_MOD_VALUE_ID, 500000, 1)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Only middle C (MIDI note 60) will have any modulation applied, facilitated by "from script" modulator
[2024-05-09 18:59:20] that has its ID set to "1".
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] allow_group()
[2024-05-09 18:59:20] disallow_group()
[2024-05-09 18:59:20] get_event_par_arr()
[2024-05-09 18:59:20] set_event_par()
[2024-05-09 18:59:20] Events and MIDI: $EVENT_PAR_ALLOW_GROUP
[2024-05-09 18:59:20] ------------------------------ set_map_editor_event_color ------------------------------
[2024-05-09 18:59:20] Page 105, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3825
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_map_editor_event_color(<hex-value>)
[2024-05-09 18:59:20] Assigns the specified color to events generated in the current script slot, visible in Kontakt's
[2024-05-09 18:59:20] Mapping Editor.
[2024-05-09 18:59:20] <hex value>: The hexadecimal color value in the following format:
[2024-05-09 18:59:20] 0ff0000h {red}
[2024-05-09 18:59:20] The 0 at the start lets Kontakt know the value is a number.
[2024-05-09 18:59:20] The h at the end indicates that it is a hexadecimal value. You can also use
[2024-05-09 18:59:20] uppercase H.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command is only available in on init callback.
[2024-05-09 18:59:20] •     The specified color will always be drawn 50% opaque, so that cases of overlapping events from
[2024-05-09 18:59:20] multiple script slots could be discerned.
[2024-05-09 18:59:20] •     This command will only work if script generated events are allowed to be displayed in
[2024-05-09 18:59:20] Kontakt's Mapping Editor (option available in Mapping Editor's Edit menu).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_map_editor_event_color(000FF00h)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     play_note(($EVENT_NOTE + 12) mod 127, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Add a note played an octave up. This event will be shown as a green blip in Kontakt's Mapping Editor.
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 10. Event Commands
[2024-05-09 18:59:20] Category: set_map_editor_event_color()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_map_editor_event_color
[2024-05-09 18:59:20] Parameters: hex-value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assigns the specified color to events generated in the current script slot, visible in Kontakt's
[2024-05-09 18:59:20] Mapping Editor.
[2024-05-09 18:59:20] <hex value>: The hexadecimal color value in the following format:
[2024-05-09 18:59:20] 0ff0000h {red}
[2024-05-09 18:59:20] The 0 at the start lets Kontakt know the value is a number.
[2024-05-09 18:59:20] The h at the end indicates that it is a hexadecimal value. You can also use
[2024-05-09 18:59:20] uppercase H.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command is only available in on init callback.
[2024-05-09 18:59:20] - The specified color will always be drawn 50% opaque, so that cases of overlapping events from
[2024-05-09 18:59:20] multiple script slots could be discerned.
[2024-05-09 18:59:20] - This command will only work if script generated events are allowed to be displayed in
[2024-05-09 18:59:20] Kontakt's Mapping Editor (option available in Mapping Editor's Edit menu).
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_map_editor_event_color(000FF00h)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     play_note(($EVENT_NOTE + 12) mod 127, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Add a note played an octave up. This event will be shown as a green blip in Kontakt's Mapping Editor.
[2024-05-09 18:59:20] ------------------------------ array_equal ------------------------------
[2024-05-09 18:59:20] Page 106, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3856
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] array_equal(<array-variable>, <array-variable>)
[2024-05-09 18:59:20] Checks the values of two arrays. Returns 1 if all values are equal, 0 if not.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command does not work with arrays of real numbers.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare %array_1[10]
[2024-05-09 18:59:20]     declare %array_2[11]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     if (array_equal(%array_1, %array_2))
[2024-05-09 18:59:20]         message("Arrays are not equal!")
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         message("Arrays are equal!")
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] This script will produce an error message as the two arrays don't have the same size.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] sort()
[2024-05-09 18:59:20] num_elements()
[2024-05-09 18:59:20] search()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 11. Array Commands
[2024-05-09 18:59:20] Category: array_equal()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: array_equal
[2024-05-09 18:59:20] Parameters: array-variable,array-variable
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Checks the values of two arrays. Returns 1 if all values are equal, 0 if not.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command does not work with arrays of real numbers.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare %array_1[10]
[2024-05-09 18:59:20]     declare %array_2[11]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     if (array_equal(%array_1, %array_2))
[2024-05-09 18:59:20]         message("Arrays are not equal!")
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         message("Arrays are equal!")
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] This script will produce an error message as the two arrays don't have the same size.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] sort()
[2024-05-09 18:59:20] num_elements()
[2024-05-09 18:59:20] search()
[2024-05-09 18:59:20] ------------------------------ num_elements ------------------------------
[2024-05-09 18:59:20] Page 107, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3884
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] num_elements(<array-variable>)
[2024-05-09 18:59:20] Returns the number of elements in an array.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     With this function you can, e.g., check how many groups are affected by the current event,
[2024-05-09 18:59:20] using num_elements(%GROUPS_AFFECTED).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     message(num_elements(%GROUPS_AFFECTED))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Outputs the number of groups that are playing when you press a key.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] array_equal()
[2024-05-09 18:59:20] sort()
[2024-05-09 18:59:20] search()
[2024-05-09 18:59:20] Events and MIDI: %GROUPS_AFFECTED
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 11. Array Commands
[2024-05-09 18:59:20] Category: num_elements()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: num_elements
[2024-05-09 18:59:20] Parameters: array-variable
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the number of elements in an array.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - With this function you can, e.g., check how many groups are affected by the current event,
[2024-05-09 18:59:20] using num_elements(%GROUPS_AFFECTED).
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     message(num_elements(%GROUPS_AFFECTED))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Outputs the number of groups that are playing when you press a key.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] array_equal()
[2024-05-09 18:59:20] sort()
[2024-05-09 18:59:20] search()
[2024-05-09 18:59:20] Events and MIDI: %GROUPS_AFFECTED
[2024-05-09 18:59:20] ------------------------------ search ------------------------------
[2024-05-09 18:59:20] Page 108, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3907
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] search(<array-variable>, <value>)
[2024-05-09 18:59:20] search(<array-variable>, <value>, <from>, <to>)
[2024-05-09 18:59:20] Searches the specified array for the specified value (optionally within the range specified by <from>
[2024-05-09 18:59:20] and <to>) and returns the index of its first position. If the value is not found, the function returns -1.
[2024-05-09 18:59:20] <array-variable>: Array to be searched through
[2024-05-09 18:59:20] <value>: Value to be found in the specified array.
[2024-05-09 18:59:20] <from>: Optional argument which specifies the array index from which to start the
[2024-05-09 18:59:20] searching operation.
[2024-05-09 18:59:20] <to>: Optional argument which specifies the array index at which searching
[2024-05-09 18:59:20] operation will end.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command does not work with arrays of real numbers.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_table %array[10] (2, 2, 5)
[2024-05-09 18:59:20]     declare ui_button $check
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($check, "Zero present?")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($check)
[2024-05-09 18:59:20]     if (search(%array, 0) = -1)
[2024-05-09 18:59:20]         message("No")
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         message("Yes")
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $check := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Checking if a specific value is present in an array.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare const $SEARCH_FOR  := 54321
[2024-05-09 18:59:20]     declare const $SEARCH_FROM := 54000
[2024-05-09 18:59:20]     declare const $SEARCH_TO   := 55000
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare %array[100000]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Check
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($Check, $SEARCH_FOR & " present?")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     { fill the array with sequential numbers, just to have something to search through }
[2024-05-09 18:59:20]     while ($i < num_elements(%array))
[2024-05-09 18:59:20]         %array[$i] := $i
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Check)
[2024-05-09 18:59:20]     if (search(%array, $SEARCH_FOR, $SEARCH_FROM, $SEARCH_TO) = -1)
[2024-05-09 18:59:20]         message("No")
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         message("Yes")
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Check := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Searching for a specific value in a smaller part of a large array - much more performant than doing
[2024-05-09 18:59:20] the same thing with a while loop directly in KSP!
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] array_equal()
[2024-05-09 18:59:20] num_elements()
[2024-05-09 18:59:20] sort()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 11. Array Commands
[2024-05-09 18:59:20] Category: search()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: search
[2024-05-09 18:59:20] Parameters: array-variable,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] search(<array-variable>, <value>, <from>, <to>)
[2024-05-09 18:59:20] Searches the specified array for the specified value (optionally within the range specified by <from>
[2024-05-09 18:59:20] and <to>) and returns the index of its first position. If the value is not found, the function returns -1.
[2024-05-09 18:59:20] <array-variable>: Array to be searched through
[2024-05-09 18:59:20] <value>: Value to be found in the specified array.
[2024-05-09 18:59:20] <from>: Optional argument which specifies the array index from which to start the
[2024-05-09 18:59:20] searching operation.
[2024-05-09 18:59:20] <to>: Optional argument which specifies the array index at which searching
[2024-05-09 18:59:20] operation will end.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command does not work with arrays of real numbers.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_table %array[10] (2, 2, 5)
[2024-05-09 18:59:20]     declare ui_button $check
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($check, "Zero present?")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($check)
[2024-05-09 18:59:20]     if (search(%array, 0) = -1)
[2024-05-09 18:59:20]         message("No")
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         message("Yes")
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $check := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Checking if a specific value is present in an array.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare const $SEARCH_FOR  := 54321
[2024-05-09 18:59:20]     declare const $SEARCH_FROM := 54000
[2024-05-09 18:59:20]     declare const $SEARCH_TO   := 55000
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare %array[100000]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Check
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($Check, $SEARCH_FOR & " present?")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     { fill the array with sequential numbers, just to have something to search through }
[2024-05-09 18:59:20]     while ($i < num_elements(%array))
[2024-05-09 18:59:20]         %array[$i] := $i
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Check)
[2024-05-09 18:59:20]     if (search(%array, $SEARCH_FOR, $SEARCH_FROM, $SEARCH_TO) = -1)
[2024-05-09 18:59:20]         message("No")
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         message("Yes")
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Check := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Searching for a specific value in a smaller part of a large array - much more performant than doing
[2024-05-09 18:59:20] the same thing with a while loop directly in KSP!
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] array_equal()
[2024-05-09 18:59:20] num_elements()
[2024-05-09 18:59:20] sort()
[2024-05-09 18:59:20] ------------------------------ sort ------------------------------
[2024-05-09 18:59:20] Page 110, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 3982
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] sort(<array-variable>, <direction>)
[2024-05-09 18:59:20] sort(<array-variable>, <direction>, <from>, <to>)
[2024-05-09 18:59:20] Sorts an array in ascending or descending order (optionally within the range specified by <from>
[2024-05-09 18:59:20] and <to>).
[2024-05-09 18:59:20] <array-variable>: The array to be sorted.
[2024-05-09 18:59:20] <direction>: When equal to 0, the array is sorted in ascending order.
[2024-05-09 18:59:20] When not equal to 0, the array is sorted in descending order.
[2024-05-09 18:59:20] <from>: Optional argument which specifies the array index from which to start the
[2024-05-09 18:59:20] sorting operation.
[2024-05-09 18:59:20] <to>: Optional argument which specifies the array index at which sorting operation
[2024-05-09 18:59:20] will end.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Invert
[2024-05-09 18:59:20]     declare ui_table %array[128] (3, 3, 127)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         %array[$count] := $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Invert)
[2024-05-09 18:59:20]     sort(%array, $Invert)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Quickly inverting a linear curve display.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare const $ARRAY_SIZE := 32
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_table %T[$ARRAY_SIZE](6, 4, -100)
[2024-05-09 18:59:20]     declare ui_value_edit $From (1, $ARRAY_SIZE, 1)
[2024-05-09 18:59:20]     declare ui_value_edit $To (1, $ARRAY_SIZE, 1)
[2024-05-09 18:59:20]     declare ui_button $Randomize
[2024-05-09 18:59:20]     declare ui_button $Direction
[2024-05-09 18:59:20]     declare ui_button $SortAll
[2024-05-09 18:59:20]     declare ui_button $SortRange
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent(%T)
[2024-05-09 18:59:20]     make_persistent($From)
[2024-05-09 18:59:20]     make_persistent($To)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $From := 4
[2024-05-09 18:59:20]     $To := 8
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Randomize)
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < num_elements(%T))
[2024-05-09 18:59:20]         %T[$i] := random(-100, 100)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Randomize := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($SortAll)
[2024-05-09 18:59:20]     sort(%T, $Direction)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $SortAll := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($SortRange)
[2024-05-09 18:59:20]     sort(%T, $Direction, $From, $To)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $SortRange := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Comparing sorting the whole array versus sorting a range within the array.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] array_equal()
[2024-05-09 18:59:20] num_elements()
[2024-05-09 18:59:20] sort()
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 11. Array Commands
[2024-05-09 18:59:20] Category: sort()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: sort
[2024-05-09 18:59:20] Parameters: array-variable,direction
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] sort(<array-variable>, <direction>, <from>, <to>)
[2024-05-09 18:59:20] Sorts an array in ascending or descending order (optionally within the range specified by <from>
[2024-05-09 18:59:20] and <to>).
[2024-05-09 18:59:20] <array-variable>: The array to be sorted.
[2024-05-09 18:59:20] <direction>: When equal to 0, the array is sorted in ascending order.
[2024-05-09 18:59:20] When not equal to 0, the array is sorted in descending order.
[2024-05-09 18:59:20] <from>: Optional argument which specifies the array index from which to start the
[2024-05-09 18:59:20] sorting operation.
[2024-05-09 18:59:20] <to>: Optional argument which specifies the array index at which sorting operation
[2024-05-09 18:59:20] will end.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Invert
[2024-05-09 18:59:20]     declare ui_table %array[128] (3, 3, 127)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         %array[$count] := $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Invert)
[2024-05-09 18:59:20]     sort(%array, $Invert)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Quickly inverting a linear curve display.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare const $ARRAY_SIZE := 32
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_table %T[$ARRAY_SIZE](6, 4, -100)
[2024-05-09 18:59:20]     declare ui_value_edit $From (1, $ARRAY_SIZE, 1)
[2024-05-09 18:59:20]     declare ui_value_edit $To (1, $ARRAY_SIZE, 1)
[2024-05-09 18:59:20]     declare ui_button $Randomize
[2024-05-09 18:59:20]     declare ui_button $Direction
[2024-05-09 18:59:20]     declare ui_button $SortAll
[2024-05-09 18:59:20]     declare ui_button $SortRange
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent(%T)
[2024-05-09 18:59:20]     make_persistent($From)
[2024-05-09 18:59:20]     make_persistent($To)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $From := 4
[2024-05-09 18:59:20]     $To := 8
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Randomize)
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < num_elements(%T))
[2024-05-09 18:59:20]         %T[$i] := random(-100, 100)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Randomize := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($SortAll)
[2024-05-09 18:59:20]     sort(%T, $Direction)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $SortAll := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($SortRange)
[2024-05-09 18:59:20]     sort(%T, $Direction, $From, $To)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $SortRange := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Comparing sorting the whole array versus sorting a range within the array.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] array_equal()
[2024-05-09 18:59:20] num_elements()
[2024-05-09 18:59:20] sort()
[2024-05-09 18:59:20] ------------------------------ allow_group ------------------------------
[2024-05-09 18:59:20] Page 112, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4067
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] allow_group(<group-index>)
[2024-05-09 18:59:20] Allows the specified group, i.e. makes it available for playback.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This commmand is only available in on note and on release callbacks.
[2024-05-09 18:59:20] •     The numbering of the group index is zero-based, i.e. index of the first instrument group is 0.
[2024-05-09 18:59:20] •     The group allow states can only be changed if the voice is not running.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     disallow_group($ALL_GROUPS)
[2024-05-09 18:59:20]     allow_group(0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Only the first group will play back.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] disallow_group()
[2024-05-09 18:59:20] set_event_par_arr()
[2024-05-09 18:59:20] Events and MIDI: $ALL_GROUPS, $EVENT_PAR_ALLOW_GROUP
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 12. Group Commands
[2024-05-09 18:59:20] Category: allow_group()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: allow_group
[2024-05-09 18:59:20] Parameters: group-index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Allows the specified group, i.e. makes it available for playback.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This commmand is only available in on note and on release callbacks.
[2024-05-09 18:59:20] - The numbering of the group index is zero-based, i.e. index of the first instrument group is 0.
[2024-05-09 18:59:20] - The group allow states can only be changed if the voice is not running.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     disallow_group($ALL_GROUPS)
[2024-05-09 18:59:20]     allow_group(0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Only the first group will play back.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] disallow_group()
[2024-05-09 18:59:20] set_event_par_arr()
[2024-05-09 18:59:20] Events and MIDI: $ALL_GROUPS, $EVENT_PAR_ALLOW_GROUP
[2024-05-09 18:59:20] ------------------------------ disallow_group ------------------------------
[2024-05-09 18:59:20] Page 113, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4091
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] disallow_group(<group-index>)
[2024-05-09 18:59:20] Disallows the specified group, i.e. makes it unavailable for playback.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This commmand is only available in on note and on release callbacks.
[2024-05-09 18:59:20] •     The numbering of the group index is zero-based, i.e. index of the first instrument group is 0.
[2024-05-09 18:59:20] •     The group disallow states can only be changed if the voice is not running.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare ui_menu $groups_menu
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     add_menu_item($groups_menu, "Play All", -1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < $NUM_GROUPS)
[2024-05-09 18:59:20]         add_menu_item($groups_menu, "Mute: " & group_name($count), $count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     if ($groups_menu # -1)
[2024-05-09 18:59:20]         disallow_group($groups_menu)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Muting one specific group of an instrument.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] allow_group()
[2024-05-09 18:59:20] set_event_par_arr()
[2024-05-09 18:59:20] Events and MIDI: $ALL_GROUPS, $EVENT_PAR_ALLOW_GROUP
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 12. Group Commands
[2024-05-09 18:59:20] Category: disallow_group()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: disallow_group
[2024-05-09 18:59:20] Parameters: group-index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Disallows the specified group, i.e. makes it unavailable for playback.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This commmand is only available in on note and on release callbacks.
[2024-05-09 18:59:20] - The numbering of the group index is zero-based, i.e. index of the first instrument group is 0.
[2024-05-09 18:59:20] - The group disallow states can only be changed if the voice is not running.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare ui_menu $groups_menu
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     add_menu_item($groups_menu, "Play All", -1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < $NUM_GROUPS)
[2024-05-09 18:59:20]         add_menu_item($groups_menu, "Mute: " & group_name($count), $count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     if ($groups_menu # -1)
[2024-05-09 18:59:20]         disallow_group($groups_menu)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Muting one specific group of an instrument.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] allow_group()
[2024-05-09 18:59:20] set_event_par_arr()
[2024-05-09 18:59:20] Events and MIDI: $ALL_GROUPS, $EVENT_PAR_ALLOW_GROUP
[2024-05-09 18:59:20] ------------------------------ get_group_idx ------------------------------
[2024-05-09 18:59:20] Page 114, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4129
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_group_idx(<group-name>)
[2024-05-09 18:59:20] Returns the group index for the specified group name.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     If no group with the specified name is found, this command will return $NI_NOT_FOUND.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $group_idx
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     $group_idx := get_group_idx("Accordion")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     if ($group_idx # $NI_NOT_FOUND)
[2024-05-09 18:59:20]         disallow_group($group_idx)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A simple, yet useful script.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] allow_group()
[2024-05-09 18:59:20] disallow_group()
[2024-05-09 18:59:20] group_name()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 12. Group Commands
[2024-05-09 18:59:20] Category: get_group_idx()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_group_idx
[2024-05-09 18:59:20] Parameters: group-name
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the group index for the specified group name.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - If no group with the specified name is found, this command will return $NI_NOT_FOUND.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $group_idx
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     $group_idx := get_group_idx("Accordion")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     if ($group_idx # $NI_NOT_FOUND)
[2024-05-09 18:59:20]         disallow_group($group_idx)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A simple, yet useful script.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] allow_group()
[2024-05-09 18:59:20] disallow_group()
[2024-05-09 18:59:20] group_name()
[2024-05-09 18:59:20] ------------------------------ get_purge_state ------------------------------
[2024-05-09 18:59:20] Page 115, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4158
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_purge_state(<group-index>)
[2024-05-09 18:59:20] Returns the purge state of the specified group.
[2024-05-09 18:59:20] 0: The group is purged.
[2024-05-09 18:59:20] 1: The group is not purged, i.e. the samples are loaded.
[2024-05-09 18:59:20] <group-index>: The index number of the group that should be checked.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_button $purge
[2024-05-09 18:59:20]     declare ui_button $checkpurge
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($purge, "Purge first group")
[2024-05-09 18:59:20]     set_text($checkpurge, "Check purge status")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($purge)
[2024-05-09 18:59:20]     { 1 - $purge inverts the behaviour of the button, here }
[2024-05-09 18:59:20]     purge_group(0, 1 - $purge)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($checkpurge)
[2024-05-09 18:59:20]     if (get_purge_state(0) = 0)
[2024-05-09 18:59:20]         message(“Group is purged.”)
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         message(“Group is not purged.”)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A simple purge check.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] purge_group()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 12. Group Commands
[2024-05-09 18:59:20] Category: get_purge_state()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_purge_state
[2024-05-09 18:59:20] Parameters: group-index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the purge state of the specified group.
[2024-05-09 18:59:20] 0: The group is purged.
[2024-05-09 18:59:20] 1: The group is not purged, i.e. the samples are loaded.
[2024-05-09 18:59:20] <group-index>: The index number of the group that should be checked.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_button $purge
[2024-05-09 18:59:20]     declare ui_button $checkpurge
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($purge, "Purge first group")
[2024-05-09 18:59:20]     set_text($checkpurge, "Check purge status")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($purge)
[2024-05-09 18:59:20]     { 1 - $purge inverts the behaviour of the button, here }
[2024-05-09 18:59:20]     purge_group(0, 1 - $purge)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($checkpurge)
[2024-05-09 18:59:20]     if (get_purge_state(0) = 0)
[2024-05-09 18:59:20]         message(“Group is purged.”)
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         message(“Group is not purged.”)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A simple purge check.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] purge_group()
[2024-05-09 18:59:20] ------------------------------ group_name ------------------------------
[2024-05-09 18:59:20] Page 116, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4194
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] group_name(<group-index>)
[2024-05-09 18:59:20] Returns the group name for the specified group.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The numbering of the group index is zero-based, i.e. index of the first instrument group is 0.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare ui_menu $groups_menu
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $count := 0
[2024-05-09 18:59:20]     while ($count < $NUM_GROUPS)
[2024-05-09 18:59:20]         add_menu_item ($groups_menu, group_name($count), $count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Quickly creating a menu with all available groups.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare ui_label $label (2, 6)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($label, "")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     $count := 0
[2024-05-09 18:59:20]     while ($count < num_elements(%GROUPS_AFFECTED))
[2024-05-09 18:59:20]         add_text_line($label, group_name(%GROUPS_AFFECTED[$count]))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     set_text($label, "")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Query the status of the first 1001 zone IDs.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] allow_group()
[2024-05-09 18:59:20] disallow_group()
[2024-05-09 18:59:20] get_group_idx()
[2024-05-09 18:59:20] output_channel_name()
[2024-05-09 18:59:20] Events and MIDI: $ALL_GROUPS, $NUM_GROUPS
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 12. Group Commands
[2024-05-09 18:59:20] Category: group_name()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: group_name
[2024-05-09 18:59:20] Parameters: group-index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the group name for the specified group.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The numbering of the group index is zero-based, i.e. index of the first instrument group is 0.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare ui_menu $groups_menu
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $count := 0
[2024-05-09 18:59:20]     while ($count < $NUM_GROUPS)
[2024-05-09 18:59:20]         add_menu_item ($groups_menu, group_name($count), $count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Quickly creating a menu with all available groups.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare ui_label $label (2, 6)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($label, "")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     $count := 0
[2024-05-09 18:59:20]     while ($count < num_elements(%GROUPS_AFFECTED))
[2024-05-09 18:59:20]         add_text_line($label, group_name(%GROUPS_AFFECTED[$count]))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     set_text($label, "")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Query the status of the first 1001 zone IDs.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] allow_group()
[2024-05-09 18:59:20] disallow_group()
[2024-05-09 18:59:20] get_group_idx()
[2024-05-09 18:59:20] output_channel_name()
[2024-05-09 18:59:20] Events and MIDI: $ALL_GROUPS, $NUM_GROUPS
[2024-05-09 18:59:20] ------------------------------ purge_group ------------------------------
[2024-05-09 18:59:20] Page 117, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4246
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] purge_group(<group-index>, <mode>)
[2024-05-09 18:59:20] Purges (i.e. unloads from RAM) the samples of the specified group.
[2024-05-09 18:59:20] <group-index>: The index number of the group which contains the samples to be purged.
[2024-05-09 18:59:20] <mode>: If set to 0, the samples of the specified group are unloaded.
[2024-05-09 18:59:20] If set to 1, the samples are reloaded.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     When using purge_group() in a while loop, don’t use any wait() commands within the loop.
[2024-05-09 18:59:20] •  purge_group() can only be used in on ui_control, on ui_controls and on
[2024-05-09 18:59:20] persistence_changed callbacks.
[2024-05-09 18:59:20] •     It is recommended not to use the purge_group() command in UI callbacks of automatable
[2024-05-09 18:59:20] controls.
[2024-05-09 18:59:20] •     It is possible to supply an async ID to the purge_group() function and get a return in the on
[2024-05-09 18:59:20] async_complete callback.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $async_id := -1
[2024-05-09 18:59:20]     declare ui_button $purge
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($purge,"Purge first group")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($purge)
[2024-05-09 18:59:20]     $async_id := purge_group(0, abs($purge - 1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $async_id)
[2024-05-09 18:59:20]         if (get_purge_state(0) = 0)
[2024-05-09 18:59:20]             message("Group is purged")
[2024-05-09 18:59:20]         else
[2024-05-09 18:59:20]             message("Group is not purged")
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Unloading all samples of the first group.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] get_purge_state()
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 12. Group Commands
[2024-05-09 18:59:20] Category: purge_group()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: purge_group
[2024-05-09 18:59:20] Parameters: group-index,mode
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Purges (i.e. unloads from RAM) the samples of the specified group.
[2024-05-09 18:59:20] <group-index>: The index number of the group which contains the samples to be purged.
[2024-05-09 18:59:20] <mode>: If set to 0, the samples of the specified group are unloaded.
[2024-05-09 18:59:20] If set to 1, the samples are reloaded.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - When using purge_group() in a while loop, don’t use any wait() commands within the loop.
[2024-05-09 18:59:20] - purge_group() can only be used in on ui_control, on ui_controls and on
[2024-05-09 18:59:20] persistence_changed callbacks.
[2024-05-09 18:59:20] - It is recommended not to use the purge_group() command in UI callbacks of automatable
[2024-05-09 18:59:20] controls.
[2024-05-09 18:59:20] - It is possible to supply an async ID to the purge_group() function and get a return in the on
[2024-05-09 18:59:20] async_complete callback.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $async_id := -1
[2024-05-09 18:59:20]     declare ui_button $purge
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($purge,"Purge first group")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($purge)
[2024-05-09 18:59:20]     $async_id := purge_group(0, abs($purge - 1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $async_id)
[2024-05-09 18:59:20]         if (get_purge_state(0) = 0)
[2024-05-09 18:59:20]             message("Group is purged")
[2024-05-09 18:59:20]         else
[2024-05-09 18:59:20]             message("Group is not purged")
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Unloading all samples of the first group.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] get_purge_state()
[2024-05-09 18:59:20] ------------------------------ change_listener_par ------------------------------
[2024-05-09 18:59:20] Page 118, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4293
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] change_listener_par(<signal-type>, <parameter>)
[2024-05-09 18:59:20] Changes the parameters of the on listener callback. It can be used in any callback.
[2024-05-09 18:59:20] <signal-type>: The signal to be changed, can be:
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_MS
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_BEAT
[2024-05-09 18:59:20] <parameter>: Dependent on the specified signal type:
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_MS: Time interval in microseconds (minimum value is
[2024-05-09 18:59:20] 1000 microseconds, which equals one millisecond)
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_BEAT: Time interval in fractions of a beat/quarter note
[2024-05-09 18:59:20] (1 ... 24)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     It is also possible to completely disable a particular listener signal by setting <parameter> to
[2024-05-09 18:59:20] 0.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_value_edit $Tempo (20, 300, 1)
[2024-05-09 18:59:20]     declare ui_switch $Play
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent($Tempo)
[2024-05-09 18:59:20]     read_persistent_var($Tempo)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Tempo := 120
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_listener($NI_SIGNAL_TIMER_MS, 60000000 / $Tempo)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on listener
[2024-05-09 18:59:20]     if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_MS and $Play = 1)
[2024-05-09 18:59:20]         play_note(60, 127, 0, $DURATION_EIGHTH)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control($Tempo)
[2024-05-09 18:59:20]     change_listener_par($NI_SIGNAL_TIMER_MS, 60000000 / $Tempo)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A very basic metronome.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] on listener
[2024-05-09 18:59:20] set_listener()
[2024-05-09 18:59:20] Callbacks and UI: $NI_SIGNAL_TYPE
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 13. Time-Related Commands
[2024-05-09 18:59:20] Category: change_listener_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: change_listener_par
[2024-05-09 18:59:20] Parameters: signal-type,parameter
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Changes the parameters of the on listener callback. It can be used in any callback.
[2024-05-09 18:59:20] <signal-type>: The signal to be changed, can be:
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_MS
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_BEAT
[2024-05-09 18:59:20] <parameter>: Dependent on the specified signal type:
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_MS: Time interval in microseconds (minimum value is
[2024-05-09 18:59:20] 1000 microseconds, which equals one millisecond)
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_BEAT: Time interval in fractions of a beat/quarter note
[2024-05-09 18:59:20] (1 ... 24)
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - It is also possible to completely disable a particular listener signal by setting <parameter> to
[2024-05-09 18:59:20] 0.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_value_edit $Tempo (20, 300, 1)
[2024-05-09 18:59:20]     declare ui_switch $Play
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent($Tempo)
[2024-05-09 18:59:20]     read_persistent_var($Tempo)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Tempo := 120
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_listener($NI_SIGNAL_TIMER_MS, 60000000 / $Tempo)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on listener
[2024-05-09 18:59:20]     if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_MS and $Play = 1)
[2024-05-09 18:59:20]         play_note(60, 127, 0, $DURATION_EIGHTH)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control($Tempo)
[2024-05-09 18:59:20]     change_listener_par($NI_SIGNAL_TIMER_MS, 60000000 / $Tempo)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A very basic metronome.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] on listener
[2024-05-09 18:59:20] set_listener()
[2024-05-09 18:59:20] Callbacks and UI: $NI_SIGNAL_TYPE
[2024-05-09 18:59:20] ------------------------------ ms_to_ticks ------------------------------
[2024-05-09 18:59:20] Page 119, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4341
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] ms_to_ticks(<microseconds>)
[2024-05-09 18:59:20] Converts a microseconds value into a value in tempo-dependent MIDI ticks.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $bpm (1, 1)
[2024-05-09 18:59:20]     set_text($bpm, ms_to_ticks(60000000) / 960)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displaying the current host tempo.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] ticks_to_ms()
[2024-05-09 18:59:20] Transport and Timing: $NI_SONG_POSITION
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 13. Time-Related Commands
[2024-05-09 18:59:20] Category: ms_to_ticks()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: ms_to_ticks
[2024-05-09 18:59:20] Parameters: microseconds
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Converts a microseconds value into a value in tempo-dependent MIDI ticks.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $bpm (1, 1)
[2024-05-09 18:59:20]     set_text($bpm, ms_to_ticks(60000000) / 960)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displaying the current host tempo.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] ticks_to_ms()
[2024-05-09 18:59:20] Transport and Timing: $NI_SONG_POSITION
[2024-05-09 18:59:20] ------------------------------ set_listener ------------------------------
[2024-05-09 18:59:20] Page 120, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4359
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_listener(<signal-type>, <parameter>)
[2024-05-09 18:59:20] Sets the signals on which the listener callback should react to. Can only be used in the on init
[2024-05-09 18:59:20] callback.
[2024-05-09 18:59:20] <signal-type>: The event on which the listener callback should react. The following types are
[2024-05-09 18:59:20] available:
[2024-05-09 18:59:20] $NI_SIGNAL_TRANSP_STOP
[2024-05-09 18:59:20] $NI_SIGNAL_TRANSP_START
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_MS
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_BEAT
[2024-05-09 18:59:20] <parameter>: User defined parameter, dependant on the specified signal type:
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_MS: Time interval in microseconds (minimum value is
[2024-05-09 18:59:20] 1000, which equals one millisecond)
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_BEAT: Time interval in fractions of a beat/quarter note
[2024-05-09 18:59:20] (1 ... 24)
[2024-05-09 18:59:20] $NI_SIGNAL_TRANSP_START: Set to 1 if the listener callback should react to
[2024-05-09 18:59:20] the host's transport start command
[2024-05-09 18:59:20] $NI_SIGNAL_TRANSP_STOP: Set to 1 if the listener callback should react to
[2024-05-09 18:59:20] the host's transport stop command
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     When using $NI_SIGNAL_TIMER_BEAT, the maximum resolution is 24 ticks per beat/quarter
[2024-05-09 18:59:20] note.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_listener($NI_SIGNAL_TIMER_BEAT, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on listener
[2024-05-09 18:59:20]     if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_BEAT)
[2024-05-09 18:59:20]         message($ENGINE_UPTIME)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Triggering the listener callback every beat. Triggering will occur even when transport is stopped.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] change_listener_par()
[2024-05-09 18:59:20] Callbacks and UI: $NI_SIGNAL_TYPE
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 13. Time-Related Commands
[2024-05-09 18:59:20] Category: set_listener()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_listener
[2024-05-09 18:59:20] Parameters: signal-type,parameter
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the signals on which the listener callback should react to. Can only be used in the on init
[2024-05-09 18:59:20] callback.
[2024-05-09 18:59:20] <signal-type>: The event on which the listener callback should react. The following types are
[2024-05-09 18:59:20] available:
[2024-05-09 18:59:20] $NI_SIGNAL_TRANSP_STOP
[2024-05-09 18:59:20] $NI_SIGNAL_TRANSP_START
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_MS
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_BEAT
[2024-05-09 18:59:20] <parameter>: User defined parameter, dependant on the specified signal type:
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_MS: Time interval in microseconds (minimum value is
[2024-05-09 18:59:20] 1000, which equals one millisecond)
[2024-05-09 18:59:20] $NI_SIGNAL_TIMER_BEAT: Time interval in fractions of a beat/quarter note
[2024-05-09 18:59:20] (1 ... 24)
[2024-05-09 18:59:20] $NI_SIGNAL_TRANSP_START: Set to 1 if the listener callback should react to
[2024-05-09 18:59:20] the host's transport start command
[2024-05-09 18:59:20] $NI_SIGNAL_TRANSP_STOP: Set to 1 if the listener callback should react to
[2024-05-09 18:59:20] the host's transport stop command
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - When using $NI_SIGNAL_TIMER_BEAT, the maximum resolution is 24 ticks per beat/quarter
[2024-05-09 18:59:20] note.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_listener($NI_SIGNAL_TIMER_BEAT, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on listener
[2024-05-09 18:59:20]     if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_BEAT)
[2024-05-09 18:59:20]         message($ENGINE_UPTIME)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Triggering the listener callback every beat. Triggering will occur even when transport is stopped.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] change_listener_par()
[2024-05-09 18:59:20] Callbacks and UI: $NI_SIGNAL_TYPE
[2024-05-09 18:59:20] ------------------------------ stop_wait ------------------------------
[2024-05-09 18:59:20] Page 121, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4402
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] stop_wait(<callback-id>, <parameter>)
[2024-05-09 18:59:20] Stops wait commands in the specified callback.
[2024-05-09 18:59:20] <callback-id>: The callback’s ID number in which the wait commands will be stopped.
[2024-05-09 18:59:20] <parameter>: 0: stops only the current wait.
[2024-05-09 18:59:20] 1: stops the current wait and ignores all following wait commands in this
[2024-05-09 18:59:20] callback.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Be careful with while loops when stopping all wait() commands in a callback!
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $id
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Play
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Play)
[2024-05-09 18:59:20]     if ($Play = 1)
[2024-05-09 18:59:20]         $id := $NI_CALLBACK_ID
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         play_note(60, 127, 0, $DURATION_QUARTER)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         wait($DURATION_QUARTER)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         if ($Play = 1)
[2024-05-09 18:59:20]             play_note(64, 127, 0, $DURATION_QUARTER)
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         wait($DURATION_QUARTER)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         if ($Play = 1)
[2024-05-09 18:59:20]             play_note(67, 127, 0, $DURATION_QUARTER)
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         stop_wait($id, 1)
[2024-05-09 18:59:20]         fade_out($ALL_EVENTS, 10000, 1)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] The Play button triggers a simple triad arpeggio. Without the stop_wait() command, parallel
[2024-05-09 18:59:20] callbacks could occur when pressing the Play button quickly in succession resulting in multiple
[2024-05-09 18:59:20] arpeggios.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] wait()
[2024-05-09 18:59:20] wait_async()
[2024-05-09 18:59:20] wait_ticks()
[2024-05-09 18:59:20] Callbacks and UI: Callback Type Variables and Constants
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 13. Time-Related Commands
[2024-05-09 18:59:20] Category: stop_wait()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: stop_wait
[2024-05-09 18:59:20] Parameters: callback-id,parameter
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Stops wait commands in the specified callback.
[2024-05-09 18:59:20] <callback-id>: The callback’s ID number in which the wait commands will be stopped.
[2024-05-09 18:59:20] <parameter>: 0: stops only the current wait.
[2024-05-09 18:59:20] 1: stops the current wait and ignores all following wait commands in this
[2024-05-09 18:59:20] callback.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Be careful with while loops when stopping all wait() commands in a callback!
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $id
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Play
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Play)
[2024-05-09 18:59:20]     if ($Play = 1)
[2024-05-09 18:59:20]         $id := $NI_CALLBACK_ID
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         play_note(60, 127, 0, $DURATION_QUARTER)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         wait($DURATION_QUARTER)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         if ($Play = 1)
[2024-05-09 18:59:20]             play_note(64, 127, 0, $DURATION_QUARTER)
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         wait($DURATION_QUARTER)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         if ($Play = 1)
[2024-05-09 18:59:20]             play_note(67, 127, 0, $DURATION_QUARTER)
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         stop_wait($id, 1)
[2024-05-09 18:59:20]         fade_out($ALL_EVENTS, 10000, 1)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] The Play button triggers a simple triad arpeggio. Without the stop_wait() command, parallel
[2024-05-09 18:59:20] callbacks could occur when pressing the Play button quickly in succession resulting in multiple
[2024-05-09 18:59:20] arpeggios.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] wait()
[2024-05-09 18:59:20] wait_async()
[2024-05-09 18:59:20] wait_ticks()
[2024-05-09 18:59:20] Callbacks and UI: Callback Type Variables and Constants
[2024-05-09 18:59:20] ------------------------------ reset_ksp_timer ------------------------------
[2024-05-09 18:59:20] Page 122, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4455
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] reset_ksp_timer
[2024-05-09 18:59:20] Resets the KSP timer built-in variable ($KSP_TIMER) to zero.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Note that the $KSP_TIMER variable, due to its 32-bit signed nature, will reach its limit after
[2024-05-09 18:59:20] 2147483648 microseconds, or roughly 35 minutes and 47 seconds.
[2024-05-09 18:59:20] •     Since the KSP timer is based on the CPU clock, the main reason to use it is for debugging and
[2024-05-09 18:59:20] optimization. It is a great tool to measure the efficiency of certain script passages. However,
[2024-05-09 18:59:20] it should not be used for musical timing, as it remains at a real-time constant rate, even if
[2024-05-09 18:59:20] Kontakt is being used in an offline bounce.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $a
[2024-05-09 18:59:20]     declare $b
[2024-05-09 18:59:20]     declare $c
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     reset_ksp_timer
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $c := 0
[2024-05-09 18:59:20]     while ($c < 128)
[2024-05-09 18:59:20]         $a := 0
[2024-05-09 18:59:20]         while($a < 128)
[2024-05-09 18:59:20]             set_event_par($EVENT_ID, $EVENT_PAR_TUNE, random(-1000, 1000))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]             inc($a)
[2024-05-09 18:59:20]         end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($c)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     message($KSP_TIMER)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A nested while loop – takes about 5400 to 5800 microseconds.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] Transport and Timing: $ENGINE_UPTIME, $KSP_TIMER
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 13. Time-Related Commands
[2024-05-09 18:59:20] Category: reset_ksp_timer
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: reset_ksp_timer
[2024-05-09 18:59:20] Parameters:
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Resets the KSP timer built-in variable ($KSP_TIMER) to zero.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Note that the $KSP_TIMER variable, due to its 32-bit signed nature, will reach its limit after
[2024-05-09 18:59:20] 2147483648 microseconds, or roughly 35 minutes and 47 seconds.
[2024-05-09 18:59:20] - Since the KSP timer is based on the CPU clock, the main reason to use it is for debugging and
[2024-05-09 18:59:20] optimization. It is a great tool to measure the efficiency of certain script passages. However,
[2024-05-09 18:59:20] it should not be used for musical timing, as it remains at a real-time constant rate, even if
[2024-05-09 18:59:20] Kontakt is being used in an offline bounce.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $a
[2024-05-09 18:59:20]     declare $b
[2024-05-09 18:59:20]     declare $c
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     reset_ksp_timer
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $c := 0
[2024-05-09 18:59:20]     while ($c < 128)
[2024-05-09 18:59:20]         $a := 0
[2024-05-09 18:59:20]         while($a < 128)
[2024-05-09 18:59:20]             set_event_par($EVENT_ID, $EVENT_PAR_TUNE, random(-1000, 1000))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]             inc($a)
[2024-05-09 18:59:20]         end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($c)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     message($KSP_TIMER)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A nested while loop – takes about 5400 to 5800 microseconds.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] Transport and Timing: $ENGINE_UPTIME, $KSP_TIMER
[2024-05-09 18:59:20] ------------------------------ ticks_to_ms ------------------------------
[2024-05-09 18:59:20] Page 123, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4499
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] ticks_to_ms(<ticks>)
[2024-05-09 18:59:20] Converts a tempo-dependent MIDI ticks value into a value in microseconds.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Since the returned value is in microseconds, note that due to its 32-bit signed nature it will not
[2024-05-09 18:59:20] return correct values if specified number of ticks at the current tempo exceeds 2147483648
[2024-05-09 18:59:20] microseconds, or roughly 35 minutes and 47 seconds.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $msec
[2024-05-09 18:59:20]     declare $sec
[2024-05-09 18:59:20]     declare $min
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label (2, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_listener($NI_SIGNAL_TIMER_MS, 1000)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on listener
[2024-05-09 18:59:20]     if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_MS)
[2024-05-09 18:59:20]         $msec := ticks_to_ms($NI_SONG_POSITION) / 1000
[2024-05-09 18:59:20]         $sec := $msec / 1000
[2024-05-09 18:59:20]         $min := $sec / 60
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         set_text($label, $min & ":" & $sec mod 60 & "." & $msec mod 1000)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displaying the song position in realtime.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] ms_to_ticks()
[2024-05-09 18:59:20] Transport and Timing: $NI_SONG_POSITION
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 13. Time-Related Commands
[2024-05-09 18:59:20] Category: ticks_to_ms()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: ticks_to_ms
[2024-05-09 18:59:20] Parameters: ticks
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Converts a tempo-dependent MIDI ticks value into a value in microseconds.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Since the returned value is in microseconds, note that due to its 32-bit signed nature it will not
[2024-05-09 18:59:20] return correct values if specified number of ticks at the current tempo exceeds 2147483648
[2024-05-09 18:59:20] microseconds, or roughly 35 minutes and 47 seconds.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $msec
[2024-05-09 18:59:20]     declare $sec
[2024-05-09 18:59:20]     declare $min
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label (2, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_listener($NI_SIGNAL_TIMER_MS, 1000)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on listener
[2024-05-09 18:59:20]     if ($NI_SIGNAL_TYPE = $NI_SIGNAL_TIMER_MS)
[2024-05-09 18:59:20]         $msec := ticks_to_ms($NI_SONG_POSITION) / 1000
[2024-05-09 18:59:20]         $sec := $msec / 1000
[2024-05-09 18:59:20]         $min := $sec / 60
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         set_text($label, $min & ":" & $sec mod 60 & "." & $msec mod 1000)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displaying the song position in realtime.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] ms_to_ticks()
[2024-05-09 18:59:20] Transport and Timing: $NI_SONG_POSITION
[2024-05-09 18:59:20] ------------------------------ wait ------------------------------
[2024-05-09 18:59:20] Page 124, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4537
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] wait(<wait-time>)
[2024-05-09 18:59:20] Pauses the callback for the specified time in microseconds.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  wait() stops the callback at the position in the script for the specified time. In other words, it
[2024-05-09 18:59:20] freezes the callback, although other callbacks can still be processed during this time. After the
[2024-05-09 18:59:20] specified time, period the callback continues.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     ignore_event($EVENT_ID)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     if ($DURATION_BAR = 0)
[2024-05-09 18:59:20]         wait(($DURATION_QUARTER * 4) - $DISTANCE_BAR_START)
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         wait($DURATION_BAR - $DISTANCE_BAR_START)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Quantize all notes to the downbeat of the next measure. This script also takes care of the fact that in
[2024-05-09 18:59:20] Kontakt standalone, $DURATION_BAR returns 0, so instead of that we use the quarter note duration
[2024-05-09 18:59:20] to make up a 4/4 bar.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] stop_wait()
[2024-05-09 18:59:20] wait_async()
[2024-05-09 18:59:20] wait_ticks()
[2024-05-09 18:59:20] while ()
[2024-05-09 18:59:20] Transport and Timing: $DURATION_QUARTER
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 13. Time-Related Commands
[2024-05-09 18:59:20] Category: wait()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: wait
[2024-05-09 18:59:20] Parameters: wait-time
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Pauses the callback for the specified time in microseconds.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - wait() stops the callback at the position in the script for the specified time. In other words, it
[2024-05-09 18:59:20] freezes the callback, although other callbacks can still be processed during this time. After the
[2024-05-09 18:59:20] specified time, period the callback continues.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     ignore_event($EVENT_ID)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     if ($DURATION_BAR = 0)
[2024-05-09 18:59:20]         wait(($DURATION_QUARTER * 4) - $DISTANCE_BAR_START)
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         wait($DURATION_BAR - $DISTANCE_BAR_START)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     play_note($EVENT_NOTE, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Quantize all notes to the downbeat of the next measure. This script also takes care of the fact that in
[2024-05-09 18:59:20] Kontakt standalone, $DURATION_BAR returns 0, so instead of that we use the quarter note duration
[2024-05-09 18:59:20] to make up a 4/4 bar.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] stop_wait()
[2024-05-09 18:59:20] wait_async()
[2024-05-09 18:59:20] wait_ticks()
[2024-05-09 18:59:20] while ()
[2024-05-09 18:59:20] Transport and Timing: $DURATION_QUARTER
[2024-05-09 18:59:20] ------------------------------ wait_async ------------------------------
[2024-05-09 18:59:20] Page 125, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4572
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] wait_async(<async-id>)
[2024-05-09 18:59:20] Waits until the async command identified by the <async-id> is finished.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     When performing multiple operations it is also possible to collect them together and then
[2024-05-09 18:59:20] calling the wait_async() function on the collection. When the operations are collected
[2024-05-09 18:59:20] in this manner they will be calculated in one block, resulting in a performance gain. If the
[2024-05-09 18:59:20] async operation is not in the pipeline anymore or is invalid, there is no waiting and the script
[2024-05-09 18:59:20] continues.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, ... $EFFECT_TYPE_CHORUS, -1, 2,
[2024-05-09 18:59:20] 1))
[2024-05-09 18:59:20] Performing a single async operation.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] %asyncid[0] := async_operation
[2024-05-09 18:59:20] %asyncid[1] := another_async_operation
[2024-05-09 18:59:20] ...
[2024-05-09 18:59:20] %asyncid[x] := last_async_operation
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] $i := 0
[2024-05-09 18:59:20] while($i < num_elements(%asyncid))
[2024-05-09 18:59:20]     wait_async(%asyncid[$i])
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     inc($i)
[2024-05-09 18:59:20] end while
[2024-05-09 18:59:20] Performing multiple async operations.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See also
[2024-05-09 18:59:20] General: $NI_ASYNC_EXIT_STATUS, $NI_ASYNC_ID
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 13. Time-Related Commands
[2024-05-09 18:59:20] Category: wait_async()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: wait_async
[2024-05-09 18:59:20] Parameters: async-id
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Waits until the async command identified by the <async-id> is finished.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - When performing multiple operations it is also possible to collect them together and then
[2024-05-09 18:59:20] calling the wait_async() function on the collection. When the operations are collected
[2024-05-09 18:59:20] in this manner they will be calculated in one block, resulting in a performance gain. If the
[2024-05-09 18:59:20] async operation is not in the pipeline anymore or is invalid, there is no waiting and the script
[2024-05-09 18:59:20] continues.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] wait_async(set_engine_par($ENGINE_PAR_EFFECT_TYPE, ... $EFFECT_TYPE_CHORUS, -1, 2,
[2024-05-09 18:59:20] 1))
[2024-05-09 18:59:20] Performing a single async operation.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] %asyncid[0] := async_operation
[2024-05-09 18:59:20] %asyncid[1] := another_async_operation
[2024-05-09 18:59:20] ...
[2024-05-09 18:59:20] %asyncid[x] := last_async_operation
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] $i := 0
[2024-05-09 18:59:20] while($i < num_elements(%asyncid))
[2024-05-09 18:59:20]     wait_async(%asyncid[$i])
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     inc($i)
[2024-05-09 18:59:20] end while
[2024-05-09 18:59:20] Performing multiple async operations.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] General: $NI_ASYNC_EXIT_STATUS, $NI_ASYNC_ID
[2024-05-09 18:59:20] ------------------------------ wait_ticks ------------------------------
[2024-05-09 18:59:20] Page 126, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4607
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] wait_ticks(<ticks>)
[2024-05-09 18:59:20] Pauses the callback for the specified time in MIDI ticks.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Same as wait() but with MIDI ticks as the wait time parameter.
[2024-05-09 18:59:20] •     960 MIDI ticks equals one quarter note.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] stop_wait()
[2024-05-09 18:59:20] wait()
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 13. Time-Related Commands
[2024-05-09 18:59:20] Category: wait_ticks()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: wait_ticks
[2024-05-09 18:59:20] Parameters: ticks
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Pauses the callback for the specified time in MIDI ticks.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Same as wait() but with MIDI ticks as the wait time parameter.
[2024-05-09 18:59:20] - 960 MIDI ticks equals one quarter note.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] stop_wait()
[2024-05-09 18:59:20] wait()
[2024-05-09 18:59:20] ------------------------------ add_menu_item ------------------------------
[2024-05-09 18:59:20] Page 127, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4622
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] add_menu_item(<variable>, <text>, <value>)
[2024-05-09 18:59:20] Create an entry in a ui_menu widget.
[2024-05-09 18:59:20] <variable>: The variable name of the ui_menu widget.
[2024-05-09 18:59:20] <text>: The text of the menu entry.
[2024-05-09 18:59:20] <value>: The value of the menu entry.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     You can create menu entries only in the on init callback, but you can change their text and
[2024-05-09 18:59:20] value afterwards by using set_menu_item_str() and set_menu_item_value(). You
[2024-05-09 18:59:20] can add as many menu entries as you want, then show or hide them dynamically by using
[2024-05-09 18:59:20] set_menu_item_visibility().
[2024-05-09 18:59:20] •     Using the $CONTROL_PAR_VALUE control parameter with the get_control_par()
[2024-05-09 18:59:20] command will return the currently selected menu index, not the currently selected value. If
[2024-05-09 18:59:20] you want to get the menu value instead, use the get_menu_item_value() command.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     add_menu_item($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item($menu, "Second Entry", 1)
[2024-05-09 18:59:20]     add_menu_item($menu, "Third Entry", 2)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A simple menu.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] set_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] ui_menu
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: add_menu_item()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: add_menu_item
[2024-05-09 18:59:20] Parameters: variable,text,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Create an entry in a ui_menu widget.
[2024-05-09 18:59:20] <variable>: The variable name of the ui_menu widget.
[2024-05-09 18:59:20] <text>: The text of the menu entry.
[2024-05-09 18:59:20] <value>: The value of the menu entry.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - You can create menu entries only in the on init callback, but you can change their text and
[2024-05-09 18:59:20] value afterwards by using set_menu_item_str() and set_menu_item_value(). You
[2024-05-09 18:59:20] can add as many menu entries as you want, then show or hide them dynamically by using
[2024-05-09 18:59:20] set_menu_item_visibility().
[2024-05-09 18:59:20] - Using the $CONTROL_PAR_VALUE control parameter with the get_control_par()
[2024-05-09 18:59:20] command will return the currently selected menu index, not the currently selected value. If
[2024-05-09 18:59:20] you want to get the menu value instead, use the get_menu_item_value() command.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     add_menu_item($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item($menu, "Second Entry", 1)
[2024-05-09 18:59:20]     add_menu_item($menu, "Third Entry", 2)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A simple menu.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] set_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] ui_menu
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20] ------------------------------ add_text_line ------------------------------
[2024-05-09 18:59:20] Page 128, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4659
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] add_text_line(<variable>, <text>)
[2024-05-09 18:59:20] Add a new text line in the specified ui_label, without erasing existing text.
[2024-05-09 18:59:20] <variable>: The variable name of the ui_label widget.
[2024-05-09 18:59:20] <text>: The text to be displayed.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare ui_label $label (1, 4)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($label, "")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     inc($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     select ($count)
[2024-05-09 18:59:20]         case 1
[2024-05-09 18:59:20]             set_text($label, $count & ": " & $EVENT_NOTE)
[2024-05-09 18:59:20]         case 2 to 4
[2024-05-09 18:59:20]             add_text_line($label, $count & ": " & $EVENT_NOTE)
[2024-05-09 18:59:20]     end select
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     if ($count = 4)
[2024-05-09 18:59:20]         $count := 0
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Monitoring the last four played notes.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_text()
[2024-05-09 18:59:20] ui_label
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: add_text_line()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: add_text_line
[2024-05-09 18:59:20] Parameters: variable,text
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Add a new text line in the specified ui_label, without erasing existing text.
[2024-05-09 18:59:20] <variable>: The variable name of the ui_label widget.
[2024-05-09 18:59:20] <text>: The text to be displayed.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare ui_label $label (1, 4)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($label, "")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     inc($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     select ($count)
[2024-05-09 18:59:20]         case 1
[2024-05-09 18:59:20]             set_text($label, $count & ": " & $EVENT_NOTE)
[2024-05-09 18:59:20]         case 2 to 4
[2024-05-09 18:59:20]             add_text_line($label, $count & ": " & $EVENT_NOTE)
[2024-05-09 18:59:20]     end select
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     if ($count = 4)
[2024-05-09 18:59:20]         $count := 0
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Monitoring the last four played notes.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_text()
[2024-05-09 18:59:20] ui_label
[2024-05-09 18:59:20] ------------------------------ attach_level_meter ------------------------------
[2024-05-09 18:59:20] Page 129, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4696
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] attach_level_meter(<ui-id>, <group>, <slot>, <channel>, <generic>)
[2024-05-09 18:59:20] Attach a ui_level_meter to a certain location within the instrument to read volume data.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <group>: The index of the group you want to access. Should be set to -1 if not using the
[2024-05-09 18:59:20] group level.
[2024-05-09 18:59:20] <slot>: The index of the FX slot you wish to access. Should be set to -1 if not
[2024-05-09 18:59:20] accessing an FX slot.
[2024-05-09 18:59:20] <channel>: Select from 0 to 15 to set the audio channel the level meter will be displaying.
[2024-05-09 18:59:20] <generic>: Can be one of the following:
[2024-05-09 18:59:20] •  NI_LEVEL_METER_MAIN: used to access Main FX chain
[2024-05-09 18:59:20] •  NI_LEVEL_METER_GROUP: used to access the Group FX chain
[2024-05-09 18:59:20] •  NI_LEVEL_METER_INSERT: used to access the Insert FX chain
[2024-05-09 18:59:20] •  0 ... 15: used to access individual instrument buses
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Level meters can be attached to the output of an instrument bus and the instrument main
[2024-05-09 18:59:20] output. They can also be attached to compressor and limiter effects to display gain reduction
[2024-05-09 18:59:20] data, with the ability to set minimum and maximum display values and inverting the display by
[2024-05-09 18:59:20] using $CONTROL_PAR_RANGE_MIN and $CONTROL_PAR_RANGE_MAX control parameters.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare const $GROUP_IDX := 0
[2024-05-09 18:59:20]     declare const $BUS_IDX := 0
[2024-05-09 18:59:20]     declare const $SLOT_IDX := 0
[2024-05-09 18:59:20]     declare const $CHANNEL_L := 0
[2024-05-09 18:59:20]     declare const $CHANNEL_R := 1
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $InstOutputL (1, 1)
[2024-05-09 18:59:20]     declare ui_label $InstOutputR (1, 1)
[2024-05-09 18:59:20]     declare ui_label $BusOutput (1, 1)
[2024-05-09 18:59:20]     declare ui_label $MainFX (1, 1)
[2024-05-09 18:59:20]     declare ui_label $BusFX (1, 1)
[2024-05-09 18:59:20]     declare ui_label $GroupFX (1, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_level_meter $inst_output_l_lvl
[2024-05-09 18:59:20]     declare ui_level_meter $inst_output_r_lvl
[2024-05-09 18:59:20]     declare ui_level_meter $bus_output_lvl
[2024-05-09 18:59:20]     declare ui_level_meter $mainfx_output_lvl
[2024-05-09 18:59:20]     declare ui_level_meter $busfx_output_lvl
[2024-05-09 18:59:20]     declare ui_level_meter $groupfx_output_lvl
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($inst_output_l_lvl), -1, -1, $CHANNEL_L, -1)
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($inst_output_r_lvl), -1, -1, $CHANNEL_R, -1)
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($bus_output_lvl), -1, -1, $CHANNEL_L, $BUS_IDX)
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($mainfx_output_lvl), -1, $SLOT_IDX, $CHANNEL_L, -2)
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($busfx_output_lvl), -1, $SLOT_IDX, $CHANNEL_L, $BUS_IDX)
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($groupfx_output_lvl), $GROUP_IDX, $SLOT_IDX, $CHANNEL_L, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Various level meters.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] ui_level_meter
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_BG_COLOR, $CONTROL_PAR_OFF_COLOR,
[2024-05-09 18:59:20] $CONTROL_PAR_ON_COLOR, $CONTROL_PAR_OVERLOAD_COLOR,
[2024-05-09 18:59:20] $CONTROL_PAR_PEAK_COLOR, $CONTROL_PAR_VERTICAL, $CONTROL_PAR_RANGE_MIN,
[2024-05-09 18:59:20] $CONTROL_PAR_RANGE_MAX
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: attach_level_meter()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: attach_level_meter
[2024-05-09 18:59:20] Parameters: ui-id,group,slot,channel,generic
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Attach a ui_level_meter to a certain location within the instrument to read volume data.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <group>: The index of the group you want to access. Should be set to -1 if not using the
[2024-05-09 18:59:20] group level.
[2024-05-09 18:59:20] <slot>: The index of the FX slot you wish to access. Should be set to -1 if not
[2024-05-09 18:59:20] accessing an FX slot.
[2024-05-09 18:59:20] <channel>: Select from 0 to 15 to set the audio channel the level meter will be displaying.
[2024-05-09 18:59:20] <generic>: Can be one of the following:
[2024-05-09 18:59:20] - NI_LEVEL_METER_MAIN: used to access Main FX chain
[2024-05-09 18:59:20] - NI_LEVEL_METER_GROUP: used to access the Group FX chain
[2024-05-09 18:59:20] - NI_LEVEL_METER_INSERT: used to access the Insert FX chain
[2024-05-09 18:59:20] - 0 ... 15: used to access individual instrument buses
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Level meters can be attached to the output of an instrument bus and the instrument main
[2024-05-09 18:59:20] output. They can also be attached to compressor and limiter effects to display gain reduction
[2024-05-09 18:59:20] data, with the ability to set minimum and maximum display values and inverting the display by
[2024-05-09 18:59:20] using $CONTROL_PAR_RANGE_MIN and $CONTROL_PAR_RANGE_MAX control parameters.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare const $GROUP_IDX := 0
[2024-05-09 18:59:20]     declare const $BUS_IDX := 0
[2024-05-09 18:59:20]     declare const $SLOT_IDX := 0
[2024-05-09 18:59:20]     declare const $CHANNEL_L := 0
[2024-05-09 18:59:20]     declare const $CHANNEL_R := 1
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $InstOutputL (1, 1)
[2024-05-09 18:59:20]     declare ui_label $InstOutputR (1, 1)
[2024-05-09 18:59:20]     declare ui_label $BusOutput (1, 1)
[2024-05-09 18:59:20]     declare ui_label $MainFX (1, 1)
[2024-05-09 18:59:20]     declare ui_label $BusFX (1, 1)
[2024-05-09 18:59:20]     declare ui_label $GroupFX (1, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_level_meter $inst_output_l_lvl
[2024-05-09 18:59:20]     declare ui_level_meter $inst_output_r_lvl
[2024-05-09 18:59:20]     declare ui_level_meter $bus_output_lvl
[2024-05-09 18:59:20]     declare ui_level_meter $mainfx_output_lvl
[2024-05-09 18:59:20]     declare ui_level_meter $busfx_output_lvl
[2024-05-09 18:59:20]     declare ui_level_meter $groupfx_output_lvl
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($inst_output_l_lvl), -1, -1, $CHANNEL_L, -1)
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($inst_output_r_lvl), -1, -1, $CHANNEL_R, -1)
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($bus_output_lvl), -1, -1, $CHANNEL_L, $BUS_IDX)
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($mainfx_output_lvl), -1, $SLOT_IDX, $CHANNEL_L, -2)
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($busfx_output_lvl), -1, $SLOT_IDX, $CHANNEL_L, $BUS_IDX)
[2024-05-09 18:59:20]     attach_level_meter(get_ui_id($groupfx_output_lvl), $GROUP_IDX, $SLOT_IDX, $CHANNEL_L, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Various level meters.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] ui_level_meter
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_BG_COLOR, $CONTROL_PAR_OFF_COLOR,
[2024-05-09 18:59:20] $CONTROL_PAR_ON_COLOR, $CONTROL_PAR_OVERLOAD_COLOR,
[2024-05-09 18:59:20] $CONTROL_PAR_PEAK_COLOR, $CONTROL_PAR_VERTICAL, $CONTROL_PAR_RANGE_MIN,
[2024-05-09 18:59:20] $CONTROL_PAR_RANGE_MAX
[2024-05-09 18:59:20] ------------------------------ attach_zone ------------------------------
[2024-05-09 18:59:20] Page 131, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4759
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] attach_zone(<variable>, <zone-id>, <flags>)
[2024-05-09 18:59:20] Connects the corresponding zone to the waveform so that it shows up on the ui_waveform
[2024-05-09 18:59:20] widget.
[2024-05-09 18:59:20] <variable>: The variable name of the ui_waveform widget.
[2024-05-09 18:59:20] <zone-id>: The ID number of the zone that you want to attach.
[2024-05-09 18:59:20] <flags>: You can control different settings of the widget via the following flags:
[2024-05-09 18:59:20] $UI_WAVEFORM_USE_SLICES
[2024-05-09 18:59:20] $UI_WAVEFORM_USE_TABLE
[2024-05-09 18:59:20] $UI_WAVEFORM_TABLE_IS_BIPOLAR
[2024-05-09 18:59:20] $UI_WAVEFORM_USE_MIDI_DRAG
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Use the bitwise .or. operator to combine flags.
[2024-05-09 18:59:20] •     The $UI_WAVEFORM_USE_TABLE and $UI_WAVEFORM_USE_MIDI_DRAG flags will only work
[2024-05-09 18:59:20] if $UI_WAVEFORM_USE_SLICES is already set.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_waveform $Waveform (6, 6)
[2024-05-09 18:59:20]     attach_zone ($Waveform,find_zone(”Test”), $UI_WAVEFORM_USE_SLICES .or.
[2024-05-09 18:59:20] $UI_WAVEFORM_USE_TABLE)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Attaches a zone named “Test” to the ui_waveform widget, also showing the zone’s slices and a table.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_ui_wf_property()
[2024-05-09 18:59:20] get_ui_wf_property()
[2024-05-09 18:59:20] ui_waveform
[2024-05-09 18:59:20] Zone and Slice Functions: find_zone()
[2024-05-09 18:59:20] Specific: Waveform Flag Constants, Waveform Property Constants
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: attach_zone()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: attach_zone
[2024-05-09 18:59:20] Parameters: variable,zone-id,flags
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Connects the corresponding zone to the waveform so that it shows up on the ui_waveform
[2024-05-09 18:59:20] widget.
[2024-05-09 18:59:20] <variable>: The variable name of the ui_waveform widget.
[2024-05-09 18:59:20] <zone-id>: The ID number of the zone that you want to attach.
[2024-05-09 18:59:20] <flags>: You can control different settings of the widget via the following flags:
[2024-05-09 18:59:20] $UI_WAVEFORM_USE_SLICES
[2024-05-09 18:59:20] $UI_WAVEFORM_USE_TABLE
[2024-05-09 18:59:20] $UI_WAVEFORM_TABLE_IS_BIPOLAR
[2024-05-09 18:59:20] $UI_WAVEFORM_USE_MIDI_DRAG
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Use the bitwise .or. operator to combine flags.
[2024-05-09 18:59:20] - The $UI_WAVEFORM_USE_TABLE and $UI_WAVEFORM_USE_MIDI_DRAG flags will only work
[2024-05-09 18:59:20] if $UI_WAVEFORM_USE_SLICES is already set.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_waveform $Waveform (6, 6)
[2024-05-09 18:59:20]     attach_zone ($Waveform,find_zone(”Test”), $UI_WAVEFORM_USE_SLICES .or.
[2024-05-09 18:59:20] $UI_WAVEFORM_USE_TABLE)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Attaches a zone named “Test” to the ui_waveform widget, also showing the zone’s slices and a table.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_ui_wf_property()
[2024-05-09 18:59:20] get_ui_wf_property()
[2024-05-09 18:59:20] ui_waveform
[2024-05-09 18:59:20] Zone and Slice Functions: find_zone()
[2024-05-09 18:59:20] Specific: Waveform Flag Constants, Waveform Property Constants
[2024-05-09 18:59:20] ------------------------------ fs_get_filename ------------------------------
[2024-05-09 18:59:20] Page 132, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4794
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] fs_get_filename(<ui-id>, <return-parameter>)
[2024-05-09 18:59:20] Return the filename of the last selected file in a ui_file_selector widget.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <return-parameter>: 0: Returns the filename without extension.
[2024-05-09 18:59:20] 1: Returns the filename with extension.
[2024-05-09 18:59:20] 2: Returns the whole path.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command is only available in the on ui_control callbacks of ui_file_selectors.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] fs_navigate()
[2024-05-09 18:59:20] ui_file_selector
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: fs_get_filename()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: fs_get_filename
[2024-05-09 18:59:20] Parameters: ui-id,return-parameter
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Return the filename of the last selected file in a ui_file_selector widget.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <return-parameter>: 0: Returns the filename without extension.
[2024-05-09 18:59:20] 1: Returns the filename with extension.
[2024-05-09 18:59:20] 2: Returns the whole path.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command is only available in the on ui_control callbacks of ui_file_selectors.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] fs_navigate()
[2024-05-09 18:59:20] ui_file_selector
[2024-05-09 18:59:20] ------------------------------ fs_navigate ------------------------------
[2024-05-09 18:59:20] Page 133, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4811
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] fs_navigate(<ui-id>, <direction>)
[2024-05-09 18:59:20] Jump to the previous or next file in a ui_file_selector widget and trigger its callback.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <direction>: 0: The previous file (in relation to the currently selected one) is selected
[2024-05-09 18:59:20] 1: The next file (in relation to the currently selected one) is selected
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command is only available in the on ui_control callbacks of ui_file_selectors.
[2024-05-09 18:59:20] •     It will always call the UI callback of the ui_file_selector it is pointed to.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] fs_get_filename()
[2024-05-09 18:59:20] ui_file_selector
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: fs_navigate()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: fs_navigate
[2024-05-09 18:59:20] Parameters: ui-id,direction
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Jump to the previous or next file in a ui_file_selector widget and trigger its callback.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <direction>: 0: The previous file (in relation to the currently selected one) is selected
[2024-05-09 18:59:20] 1: The next file (in relation to the currently selected one) is selected
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command is only available in the on ui_control callbacks of ui_file_selectors.
[2024-05-09 18:59:20] - It will always call the UI callback of the ui_file_selector it is pointed to.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] fs_get_filename()
[2024-05-09 18:59:20] ui_file_selector
[2024-05-09 18:59:20] ------------------------------ get_control_par ------------------------------
[2024-05-09 18:59:20] Page 134, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4828
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_control_par(<ui-id>, <control-parameter>)
[2024-05-09 18:59:20] Retrieve various parameters of the specified UI widget.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <control-parameter>: Parameter of the UI widget we want to retrieve, i.e. $CONTROL_PAR_WIDTH.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  get_control_par_str() is an additional flavor of the command for use with strings (i.e.
[2024-05-09 18:59:20] retrieving text from ui_label or automation name from ui_slider).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_value_edit $Test (0, 100, 1)
[2024-05-09 18:59:20]     message(get_control_par(get_ui_id($Test), $CONTROL_PAR_WIDTH))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Retrieving the width of a value edit in pixels.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_control_par()
[2024-05-09 18:59:20] General: $CONTROL_PAR_KEY_SHIFT, $CONTROL_PAR_KEY_ALT,
[2024-05-09 18:59:20] $CONTROL_PAR_KEY_CONTROL
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: get_control_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_control_par
[2024-05-09 18:59:20] Parameters: ui-id,control-parameter
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Retrieve various parameters of the specified UI widget.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <control-parameter>: Parameter of the UI widget we want to retrieve, i.e. $CONTROL_PAR_WIDTH.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - get_control_par_str() is an additional flavor of the command for use with strings (i.e.
[2024-05-09 18:59:20] retrieving text from ui_label or automation name from ui_slider).
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_value_edit $Test (0, 100, 1)
[2024-05-09 18:59:20]     message(get_control_par(get_ui_id($Test), $CONTROL_PAR_WIDTH))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Retrieving the width of a value edit in pixels.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_control_par()
[2024-05-09 18:59:20] General: $CONTROL_PAR_KEY_SHIFT, $CONTROL_PAR_KEY_ALT,
[2024-05-09 18:59:20] $CONTROL_PAR_KEY_CONTROL
[2024-05-09 18:59:20] ------------------------------ get_control_par_arr ------------------------------
[2024-05-09 18:59:20] Page 135, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4853
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_control_par_arr(<ui-id>, <control-parameter>, <index>)
[2024-05-09 18:59:20] Retrieve various parameters of the specified UI widget
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <control-parameter>: Parameter of the UI widget we want to retrieve, i.e. $CONTROL_PAR_WIDTH.
[2024-05-09 18:59:20] <index>: Array index of the UI widget we want to retrieve.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  get_control_par_arr() comes in two additional flavors:
[2024-05-09 18:59:20] •  get_control_par_str_arr() (i.e. retrieving automation name of a particular ui_xy
[2024-05-09 18:59:20] cursor)
[2024-05-09 18:59:20] •  get_control_par_real_arr() (i.e. retrieving values of ui_xy cursor X and Y axes)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_xy ?XY1[2]
[2024-05-09 18:59:20]     declare ui_xy ?XY2[2]
[2024-05-09 18:59:20]     declare ui_xy ?XY3[2]
[2024-05-09 18:59:20]     declare ui_xy ?XY4[2]
[2024-05-09 18:59:20]     declare ui_button $Random
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare ~val
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Random)
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < 8)
[2024-05-09 18:59:20]         { randomize X axis value }
[2024-05-09 18:59:20]         ~val := int_to_real(random(0, 1000000)) / 1000000.0
[2024-05-09 18:59:20]         set_control_par_real_arr(get_ui_id(?XY1) + $i / 2, $CONTROL_PAR_VALUE, ~val, $i mod 2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         { randomize Y axis value }
[2024-05-09 18:59:20]         ~val := int_to_real(random(0, 1000000)) / 1000000.0
[2024-05-09 18:59:20]         set_control_par_real_arr(get_ui_id(?XY1) + $i / 2, $CONTROL_PAR_VALUE, ~val, ($i mod 2) + 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Random := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Randomize the values of the first cursor for 4 different XY pads in one loop.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] get_control_par()
[2024-05-09 18:59:20] set_control_par()
[2024-05-09 18:59:20] set_control_par_arr()
[2024-05-09 18:59:20] General: $CONTROL_PAR_KEY_SHIFT, $CONTROL_PAR_KEY_ALT,
[2024-05-09 18:59:20] $CONTROL_PAR_KEY_CONTROL
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: get_control_par_arr()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_control_par_arr
[2024-05-09 18:59:20] Parameters: ui-id,control-parameter,index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Retrieve various parameters of the specified UI widget
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <control-parameter>: Parameter of the UI widget we want to retrieve, i.e. $CONTROL_PAR_WIDTH.
[2024-05-09 18:59:20] <index>: Array index of the UI widget we want to retrieve.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - get_control_par_arr() comes in two additional flavors:
[2024-05-09 18:59:20] - get_control_par_str_arr() (i.e. retrieving automation name of a particular ui_xy
[2024-05-09 18:59:20] cursor)
[2024-05-09 18:59:20] - get_control_par_real_arr() (i.e. retrieving values of ui_xy cursor X and Y axes)
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_xy ?XY1[2]
[2024-05-09 18:59:20]     declare ui_xy ?XY2[2]
[2024-05-09 18:59:20]     declare ui_xy ?XY3[2]
[2024-05-09 18:59:20]     declare ui_xy ?XY4[2]
[2024-05-09 18:59:20]     declare ui_button $Random
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare ~val
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Random)
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < 8)
[2024-05-09 18:59:20]         { randomize X axis value }
[2024-05-09 18:59:20]         ~val := int_to_real(random(0, 1000000)) / 1000000.0
[2024-05-09 18:59:20]         set_control_par_real_arr(get_ui_id(?XY1) + $i / 2, $CONTROL_PAR_VALUE, ~val, $i mod 2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         { randomize Y axis value }
[2024-05-09 18:59:20]         ~val := int_to_real(random(0, 1000000)) / 1000000.0
[2024-05-09 18:59:20]         set_control_par_real_arr(get_ui_id(?XY1) + $i / 2, $CONTROL_PAR_VALUE, ~val, ($i mod 2) + 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Random := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Randomize the values of the first cursor for 4 different XY pads in one loop.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] get_control_par()
[2024-05-09 18:59:20] set_control_par()
[2024-05-09 18:59:20] set_control_par_arr()
[2024-05-09 18:59:20] General: $CONTROL_PAR_KEY_SHIFT, $CONTROL_PAR_KEY_ALT,
[2024-05-09 18:59:20] $CONTROL_PAR_KEY_CONTROL
[2024-05-09 18:59:20] ------------------------------ get_font_id ------------------------------
[2024-05-09 18:59:20] Page 137, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4907
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_font_id(<file-name>)
[2024-05-09 18:59:20] Returns a font ID generated for a custom font based on an image file. This font ID can be used on
[2024-05-09 18:59:20] any control that has dynamic text elements.
[2024-05-09 18:59:20] <file-name>: Name of the image, without extension. The image has to be in PNG format and
[2024-05-09 18:59:20] reside in the "pictures" subfolder of the resource container.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command is only available in the on init callback.
[2024-05-09 18:59:20] •     Custom font images need to be formatted in a special way to be interpreted correctly as
[2024-05-09 18:59:20] custom fonts. All characters need to be placed side-by-side, following the Windows-1252
[2024-05-09 18:59:20] character set, with a fully red (#FF0000) pixel at the top left of every character frame. Also,
[2024-05-09 18:59:20] alpha layer of this image needs to be solid (contain only one color). We recommend using the
[2024-05-09 18:59:20] SuperPNG addon for Adobe Photoshop (use the "Clean Transparent" option during export), or
[2024-05-09 18:59:20] KSP Font Generator plugin for Figma.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_text_edit @textEdit
[2024-05-09 18:59:20]     set_control_par(get_ui_id(@textEdit), $CONTROL_PAR_FONT_TYPE,
[2024-05-09 18:59:20] get_font_id("Font1"))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Using a custom font on a ui_text_edit control.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_control_par()
[2024-05-09 18:59:20] General: $CONTROL_PAR_FONT_TYPE
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: get_font_id()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_font_id
[2024-05-09 18:59:20] Parameters: file-name
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns a font ID generated for a custom font based on an image file. This font ID can be used on
[2024-05-09 18:59:20] any control that has dynamic text elements.
[2024-05-09 18:59:20] <file-name>: Name of the image, without extension. The image has to be in PNG format and
[2024-05-09 18:59:20] reside in the "pictures" subfolder of the resource container.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command is only available in the on init callback.
[2024-05-09 18:59:20] - Custom font images need to be formatted in a special way to be interpreted correctly as
[2024-05-09 18:59:20] custom fonts. All characters need to be placed side-by-side, following the Windows-1252
[2024-05-09 18:59:20] character set, with a fully red (#FF0000) pixel at the top left of every character frame. Also,
[2024-05-09 18:59:20] alpha layer of this image needs to be solid (contain only one color). We recommend using the
[2024-05-09 18:59:20] SuperPNG addon for Adobe Photoshop (use the "Clean Transparent" option during export), or
[2024-05-09 18:59:20] KSP Font Generator plugin for Figma.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_text_edit @textEdit
[2024-05-09 18:59:20]     set_control_par(get_ui_id(@textEdit), $CONTROL_PAR_FONT_TYPE,
[2024-05-09 18:59:20] get_font_id("Font1"))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Using a custom font on a ui_text_edit control.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_control_par()
[2024-05-09 18:59:20] General: $CONTROL_PAR_FONT_TYPE
[2024-05-09 18:59:20] ------------------------------ get_menu_item_str ------------------------------
[2024-05-09 18:59:20] Page 138, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4938
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_menu_item_str(<ui-id>, <index>)
[2024-05-09 18:59:20] Returns the string value of a particular ui_menu entry.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index (not the value!) of the menu item.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it cannot be changed afterwards.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_button $button
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     add_menu_item($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item($menu, "Third Entry", 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($button)
[2024-05-09 18:59:20]     message(get_menu_item_str(get_ui_id($menu), 1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displays the message “Second Entry” when clicking on the button, since we are reading the text of
[2024-05-09 18:59:20] menu item index 1.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_value()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: get_menu_item_str()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_menu_item_str
[2024-05-09 18:59:20] Parameters: ui-id,index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the string value of a particular ui_menu entry.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index (not the value!) of the menu item.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it cannot be changed afterwards.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_button $button
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     add_menu_item($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item($menu, "Third Entry", 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($button)
[2024-05-09 18:59:20]     message(get_menu_item_str(get_ui_id($menu), 1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displays the message “Second Entry” when clicking on the button, since we are reading the text of
[2024-05-09 18:59:20] menu item index 1.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_value()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20] ------------------------------ get_menu_item_value ------------------------------
[2024-05-09 18:59:20] Page 139, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 4976
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_menu_item_value(<ui-id>, <index>)
[2024-05-09 18:59:20] Returns the value of a particular ui_menu entry.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index (not the value!) of the menu item.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it cannot be changed afterwards.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_button $button
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     add_menu_item($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item($menu, "Third Entry", 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($button)
[2024-05-09 18:59:20]     message(get_menu_item_value(get_ui_id($menu), 1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displays the number 5, since we're reading the value of menu item index 1.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] set_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_value()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: get_menu_item_value()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_menu_item_value
[2024-05-09 18:59:20] Parameters: ui-id,index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the value of a particular ui_menu entry.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index (not the value!) of the menu item.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it cannot be changed afterwards.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_button $button
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     add_menu_item($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item($menu, "Third Entry", 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($button)
[2024-05-09 18:59:20]     message(get_menu_item_value(get_ui_id($menu), 1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displays the number 5, since we're reading the value of menu item index 1.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] set_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_value()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20] ------------------------------ get_menu_item_visibility ------------------------------
[2024-05-09 18:59:20] Page 140, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5012
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_menu_item_visibility(<ui-id>, <index>)
[2024-05-09 18:59:20] Returns 1 if a particular ui_menu entry is visible, otherwise 0.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index (not the value!) of the menu entry.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it cannot be changed afterwards.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_button $visibility
[2024-05-09 18:59:20]     declare ui_button $value
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     add_menu_item($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item($menu, "Third Entry", 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($visibility)
[2024-05-09 18:59:20]     set_menu_item_visibility(get_ui_id($menu), $visibility))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($value)
[2024-05-09 18:59:20]     message(get_menu_item_visibility(get_ui_id($menu), 1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Clicking on Visibility button shows or hides the second menu entry, while clicking on Value button
[2024-05-09 18:59:20] shows the visibility state of that same menu entry.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] set_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_value()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: get_menu_item_visibility()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_menu_item_visibility
[2024-05-09 18:59:20] Parameters: ui-id,index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns 1 if a particular ui_menu entry is visible, otherwise 0.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index (not the value!) of the menu entry.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it cannot be changed afterwards.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_button $visibility
[2024-05-09 18:59:20]     declare ui_button $value
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     add_menu_item($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item($menu, "Third Entry", 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($visibility)
[2024-05-09 18:59:20]     set_menu_item_visibility(get_ui_id($menu), $visibility))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($value)
[2024-05-09 18:59:20]     message(get_menu_item_visibility(get_ui_id($menu), 1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Clicking on Visibility button shows or hides the second menu entry, while clicking on Value button
[2024-05-09 18:59:20] shows the visibility state of that same menu entry.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] set_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_value()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20] ------------------------------ get_ui_id ------------------------------
[2024-05-09 18:59:20] Page 141, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5055
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_ui_id(<variable>)
[2024-05-09 18:59:20] Retrieves the UI ID number of a UI widget.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     UI IDs are assigned sequentially from the very first variable or constant declared in the script,
[2024-05-09 18:59:20] which starts at 32768.
[2024-05-09 18:59:20] •     Even regular variables and constants (those that are not UI widgets) get a UI ID assigned,
[2024-05-09 18:59:20] however this ID cannot be used with various get_control_par()/set_control_par()
[2024-05-09 18:59:20] commands!
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare const $NUM_KNOBS := 4
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Knob_1 (0, 100, 1)
[2024-05-09 18:59:20]     declare ui_knob $Knob_2 (0, 100, 1)
[2024-05-09 18:59:20]     declare ui_knob $Knob_3 (0, 100, 1)
[2024-05-09 18:59:20]     declare ui_knob $Knob_4 (0, 100, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_value_edit $Set (0, 100, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare %ID[$NUM_KNOBS]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($i < $NUM_KNOBS)
[2024-05-09 18:59:20]         %ID[$i] := get_ui_id($Knob_1) + $i
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Set)
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < $NUM_KNOBS)
[2024-05-09 18:59:20]         set_control_par(%ID[$i], $CONTROL_PAR_VALUE, $Set)
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Store IDs in an array and use those IDs to set multiple knobs to the same value.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_control_par()
[2024-05-09 18:59:20] get_control_par()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: get_ui_id()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_ui_id
[2024-05-09 18:59:20] Parameters: variable
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Retrieves the UI ID number of a UI widget.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - UI IDs are assigned sequentially from the very first variable or constant declared in the script,
[2024-05-09 18:59:20] which starts at 32768.
[2024-05-09 18:59:20] - Even regular variables and constants (those that are not UI widgets) get a UI ID assigned,
[2024-05-09 18:59:20] however this ID cannot be used with various get_control_par()/set_control_par()
[2024-05-09 18:59:20] commands!
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare const $NUM_KNOBS := 4
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Knob_1 (0, 100, 1)
[2024-05-09 18:59:20]     declare ui_knob $Knob_2 (0, 100, 1)
[2024-05-09 18:59:20]     declare ui_knob $Knob_3 (0, 100, 1)
[2024-05-09 18:59:20]     declare ui_knob $Knob_4 (0, 100, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_value_edit $Set (0, 100, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare %ID[$NUM_KNOBS]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($i < $NUM_KNOBS)
[2024-05-09 18:59:20]         %ID[$i] := get_ui_id($Knob_1) + $i
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Set)
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < $NUM_KNOBS)
[2024-05-09 18:59:20]         set_control_par(%ID[$i], $CONTROL_PAR_VALUE, $Set)
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Store IDs in an array and use those IDs to set multiple knobs to the same value.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_control_par()
[2024-05-09 18:59:20] get_control_par()
[2024-05-09 18:59:20] ------------------------------ get_ui_wf_property ------------------------------
[2024-05-09 18:59:20] Page 142, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5103
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_ui_wf_property(<variable>, <property>, <index>)
[2024-05-09 18:59:20] Returns the values of different properties pertaining to the ui_waveform widget.
[2024-05-09 18:59:20] <variable>: Variable name of the ui_waveform widget.
[2024-05-09 18:59:20] <property>: The following properties are available:
[2024-05-09 18:59:20] $UI_WF_PROP_PLAY_CURSOR
[2024-05-09 18:59:20] $UI_WF_PROP_FLAGS
[2024-05-09 18:59:20] $UI_WF_PROP_TABLE_VAL
[2024-05-09 18:59:20] $UI_WF_PROP_TABLE_IDX_HIGHLIGHT
[2024-05-09 18:59:20] $UI_WF_PROP_MIDI_DRAG_START_NOTE
[2024-05-09 18:59:20] <index>: The index of the slice.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $play_pos
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_waveform $Waveform (6, 6)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     attach_zone($Waveform, find_zone("Test"), 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     while ($NOTE_HELD = 1)
[2024-05-09 18:59:20]         $play_pos := get_event_par($EVENT_ID, $EVENT_PAR_PLAY_POS)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         set_ui_wf_property($Waveform, $UI_WF_PROP_PLAY_CURSOR, $play_pos)
[2024-05-09 18:59:20]         message(get_ui_wf_property($Waveform, $UI_WF_PROP_PLAY_CURSOR, 0))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         wait(10000)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displays the current play position value.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_ui_wf_property()
[2024-05-09 18:59:20] ui_waveform
[2024-05-09 18:59:20] attach_zone()
[2024-05-09 18:59:20] Zone and Slice Functions: find_zone()
[2024-05-09 18:59:20] Specific: Waveform Flag Constants, Waveform Property Constants
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: get_ui_wf_property()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_ui_wf_property
[2024-05-09 18:59:20] Parameters: variable,property,index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the values of different properties pertaining to the ui_waveform widget.
[2024-05-09 18:59:20] <variable>: Variable name of the ui_waveform widget.
[2024-05-09 18:59:20] <property>: The following properties are available:
[2024-05-09 18:59:20] $UI_WF_PROP_PLAY_CURSOR
[2024-05-09 18:59:20] $UI_WF_PROP_FLAGS
[2024-05-09 18:59:20] $UI_WF_PROP_TABLE_VAL
[2024-05-09 18:59:20] $UI_WF_PROP_TABLE_IDX_HIGHLIGHT
[2024-05-09 18:59:20] $UI_WF_PROP_MIDI_DRAG_START_NOTE
[2024-05-09 18:59:20] <index>: The index of the slice.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $play_pos
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_waveform $Waveform (6, 6)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     attach_zone($Waveform, find_zone("Test"), 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     while ($NOTE_HELD = 1)
[2024-05-09 18:59:20]         $play_pos := get_event_par($EVENT_ID, $EVENT_PAR_PLAY_POS)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         set_ui_wf_property($Waveform, $UI_WF_PROP_PLAY_CURSOR, $play_pos)
[2024-05-09 18:59:20]         message(get_ui_wf_property($Waveform, $UI_WF_PROP_PLAY_CURSOR, 0))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         wait(10000)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displays the current play position value.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_ui_wf_property()
[2024-05-09 18:59:20] ui_waveform
[2024-05-09 18:59:20] attach_zone()
[2024-05-09 18:59:20] Zone and Slice Functions: find_zone()
[2024-05-09 18:59:20] Specific: Waveform Flag Constants, Waveform Property Constants
[2024-05-09 18:59:20] ------------------------------ hide_part ------------------------------
[2024-05-09 18:59:20] Page 143, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5146
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] hide_part(<variable>, <hide-mask>)
[2024-05-09 18:59:20] Hide specific parts of various widgets.
[2024-05-09 18:59:20] <variable>: The variable name of the widget.
[2024-05-09 18:59:20] <hide-mask>: Bitmask of visibility states for various parts of UI controls, consisting of the
[2024-05-09 18:59:20] following constants:
[2024-05-09 18:59:20] $HIDE_PART_BG (background of ui_knob, ui_label, ui_value_edit and ui_table)
[2024-05-09 18:59:20] $HIDE_PART_VALUE (value of ui_knob and ui_table)
[2024-05-09 18:59:20] $HIDE_PART_TITLE (title of ui_knob)
[2024-05-09 18:59:20] $HIDE_PART_MOD_LIGHT (mod ring light of ui_knob)
[2024-05-09 18:59:20] $HIDE_PART_CURSOR (hide a particular ui_xy cursor)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Knob (0, 100, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     hide_part($Knob, $HIDE_PART_BG .or. $HIDE_PART_MOD_LIGHT .or. $HIDE_PART_TITLE .or. $HIDE_PART_VALUE)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A naked knob.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label_1 (1, 1)
[2024-05-09 18:59:20]     set_text($label_1, "Small Label")
[2024-05-09 18:59:20]     hide_part($label_1, $HIDE_PART_BG)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Hide the background of a label. This is also possible with other UI elements.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING, $HIDE_WHOLE_CONTROL
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: hide_part()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: hide_part
[2024-05-09 18:59:20] Parameters: variable,hide-mask
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Hide specific parts of various widgets.
[2024-05-09 18:59:20] <variable>: The variable name of the widget.
[2024-05-09 18:59:20] <hide-mask>: Bitmask of visibility states for various parts of UI controls, consisting of the
[2024-05-09 18:59:20] following constants:
[2024-05-09 18:59:20] $HIDE_PART_BG (background of ui_knob, ui_label, ui_value_edit and ui_table)
[2024-05-09 18:59:20] $HIDE_PART_VALUE (value of ui_knob and ui_table)
[2024-05-09 18:59:20] $HIDE_PART_TITLE (title of ui_knob)
[2024-05-09 18:59:20] $HIDE_PART_MOD_LIGHT (mod ring light of ui_knob)
[2024-05-09 18:59:20] $HIDE_PART_CURSOR (hide a particular ui_xy cursor)
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Knob (0, 100, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     hide_part($Knob, $HIDE_PART_BG .or. $HIDE_PART_MOD_LIGHT .or. $HIDE_PART_TITLE .or. $HIDE_PART_VALUE)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A naked knob.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label_1 (1, 1)
[2024-05-09 18:59:20]     set_text($label_1, "Small Label")
[2024-05-09 18:59:20]     hide_part($label_1, $HIDE_PART_BG)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Hide the background of a label. This is also possible with other UI elements.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING, $HIDE_WHOLE_CONTROL
[2024-05-09 18:59:20] ------------------------------ load_performance_view ------------------------------
[2024-05-09 18:59:20] Page 144, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5179
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] load_performance_view(<filename>)
[2024-05-09 18:59:20] Loads a performance view file (.nckp) that was created in the Creator Tools GUI Designer.
[2024-05-09 18:59:20] <filename>: The filename of the .nckp file without extension, entered as a string.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Only one performance view file can be loaded per script slot.
[2024-05-09 18:59:20] •     This command is only available in the on init callback.
[2024-05-09 18:59:20] •     This command cannot be used alongside make_perfview.
[2024-05-09 18:59:20] •     The performance view file should be in the performance_view subfolder of the resource
[2024-05-09 18:59:20] container.
[2024-05-09 18:59:20] •     All contained controls are accessible as if they were declared and set up in KSP; variable
[2024-05-09 18:59:20] names can be identified in Creator Tools.
[2024-05-09 18:59:20] •     More information in the Creator Tools manual.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     load_performance_view(“performanceView”)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($testButton)
[2024-05-09 18:59:20]     if ($testButton = 0)
[2024-05-09 18:59:20]         set_control_par(get_ui_id($testSlider), $CONTROL_PAR_HIDE, $HIDE_PART_WHOLE_CONTROL)
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         set_control_par(get_ui_id($testSlider), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Loads a performance view file and then defines some basic behavior involving two of the contained
[2024-05-09 18:59:20] controls.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: load_performance_view()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: load_performance_view
[2024-05-09 18:59:20] Parameters: filename
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Loads a performance view file (.nckp) that was created in the Creator Tools GUI Designer.
[2024-05-09 18:59:20] <filename>: The filename of the .nckp file without extension, entered as a string.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Only one performance view file can be loaded per script slot.
[2024-05-09 18:59:20] - This command is only available in the on init callback.
[2024-05-09 18:59:20] - This command cannot be used alongside make_perfview.
[2024-05-09 18:59:20] - The performance view file should be in the performance_view subfolder of the resource
[2024-05-09 18:59:20] container.
[2024-05-09 18:59:20] - All contained controls are accessible as if they were declared and set up in KSP; variable
[2024-05-09 18:59:20] names can be identified in Creator Tools.
[2024-05-09 18:59:20] - More information in the Creator Tools manual.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     load_performance_view(“performanceView”)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($testButton)
[2024-05-09 18:59:20]     if ($testButton = 0)
[2024-05-09 18:59:20]         set_control_par(get_ui_id($testSlider), $CONTROL_PAR_HIDE, $HIDE_PART_WHOLE_CONTROL)
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         set_control_par(get_ui_id($testSlider), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Loads a performance view file and then defines some basic behavior involving two of the contained
[2024-05-09 18:59:20] controls.
[2024-05-09 18:59:20] ------------------------------ make_perfview ------------------------------
[2024-05-09 18:59:20] Page 145, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5212
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] make_perfview
[2024-05-09 18:59:20] Activates the performance view for the respective script slot.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command can only be used in the on init callback.
[2024-05-09 18:59:20] •     Cannot be used alongside the load_performance_view() command.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_script_title("My Cool Instrument")
[2024-05-09 18:59:20]     set_ui_height(6)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Many KSP scripts will start something like this.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_skin_offset()
[2024-05-09 18:59:20] set_ui_height()
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20] set_ui_width_px()
[2024-05-09 18:59:20] set_ui_color()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: make_perfview
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: make_perfview
[2024-05-09 18:59:20] Parameters:
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Activates the performance view for the respective script slot.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command can only be used in the on init callback.
[2024-05-09 18:59:20] - Cannot be used alongside the load_performance_view() command.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_script_title("My Cool Instrument")
[2024-05-09 18:59:20]     set_ui_height(6)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Many KSP scripts will start something like this.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_skin_offset()
[2024-05-09 18:59:20] set_ui_height()
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20] set_ui_width_px()
[2024-05-09 18:59:20] set_ui_color()
[2024-05-09 18:59:20] ------------------------------ move_control ------------------------------
[2024-05-09 18:59:20] Page 146, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5240
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] move_control(<variable>, <x-position>, <y-position>)
[2024-05-09 18:59:20] Position UI widgets in the standard Kontakt grid.
[2024-05-09 18:59:20] <variable>: The variable name of the UI widget.
[2024-05-09 18:59:20] <x-position>: The horizontal position of the widget in grid units (0 ... 6).
[2024-05-09 18:59:20] <y-position>: The vertical position of the widget in grid units (0 ... 16).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  move_control() can be used in all callbacks.
[2024-05-09 18:59:20] •     Note that using move_control() outside of the on init callback is more CPU intensive, so
[2024-05-09 18:59:20] handle with care.
[2024-05-09 18:59:20] •  move_control(<variable>, 0, 0) will hide the UI widget.
[2024-05-09 18:59:20] •     Pixel-based control parameters cannot be mixed with grid-based ones, so if you want to set
[2024-05-09 18:59:20] $CONTROL_PAR_WIDTH for a ui_label that is positioned to grid coordinates (2, 1), this will not
[2024-05-09 18:59:20] work - you would have to use $CONTROL_PAR_GRID_WIDTH instead.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_ui_height(3)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label (1, 1)
[2024-05-09 18:59:20]     set_text($label, "Move the wheel!")
[2024-05-09 18:59:20]     move_control($label, 3, 6)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on controller
[2024-05-09 18:59:20]     if ($CC_NUM = 1)
[2024-05-09 18:59:20]         move_control($label, 3,  6 - ((%CC[1] * 5) / 127))
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Move a UI element with the modwheel.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] move_control_px()
[2024-05-09 18:59:20] General: $CONTROL_PAR_HIDE
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: move_control()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: move_control
[2024-05-09 18:59:20] Parameters: variable,x-position,y-position
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Position UI widgets in the standard Kontakt grid.
[2024-05-09 18:59:20] <variable>: The variable name of the UI widget.
[2024-05-09 18:59:20] <x-position>: The horizontal position of the widget in grid units (0 ... 6).
[2024-05-09 18:59:20] <y-position>: The vertical position of the widget in grid units (0 ... 16).
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - move_control() can be used in all callbacks.
[2024-05-09 18:59:20] - Note that using move_control() outside of the on init callback is more CPU intensive, so
[2024-05-09 18:59:20] handle with care.
[2024-05-09 18:59:20] - move_control(<variable>, 0, 0) will hide the UI widget.
[2024-05-09 18:59:20] - Pixel-based control parameters cannot be mixed with grid-based ones, so if you want to set
[2024-05-09 18:59:20] $CONTROL_PAR_WIDTH for a ui_label that is positioned to grid coordinates (2, 1), this will not
[2024-05-09 18:59:20] work - you would have to use $CONTROL_PAR_GRID_WIDTH instead.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_ui_height(3)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label (1, 1)
[2024-05-09 18:59:20]     set_text($label, "Move the wheel!")
[2024-05-09 18:59:20]     move_control($label, 3, 6)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on controller
[2024-05-09 18:59:20]     if ($CC_NUM = 1)
[2024-05-09 18:59:20]         move_control($label, 3,  6 - ((%CC[1] * 5) / 127))
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Move a UI element with the modwheel.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] move_control_px()
[2024-05-09 18:59:20] General: $CONTROL_PAR_HIDE
[2024-05-09 18:59:20] ------------------------------ move_control_px ------------------------------
[2024-05-09 18:59:20] Page 147, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5279
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] move_control_px(<variable>, <x-position>, <y-position>)
[2024-05-09 18:59:20] Position UI widgets in pixels.
[2024-05-09 18:59:20] <variable>: The variable name of the UI widget.
[2024-05-09 18:59:20] <x-position>: The horizontal position of the widget in pixels (0 ... 1000).
[2024-05-09 18:59:20] <y-position>: The vertical position of the widget in pixels (0 ... 750).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Pixel-based control parameters cannot be mixed with grid-based ones, so if you want to set
[2024-05-09 18:59:20] $CONTROL_PAR_WIDTH for a ui_label that is positioned to grid coordinates (2, 1), this will not
[2024-05-09 18:59:20] work - you would have to use $CONTROL_PAR_GRID_WIDTH instead.
[2024-05-09 18:59:20] •  move_control_px() can be used in all callbacks.
[2024-05-09 18:59:20] •     Note that using move_control_px() outside of the on init callback is more CPU
[2024-05-09 18:59:20] intensive, so handle with care.
[2024-05-09 18:59:20] •     In order to match Kontakt standard grid sizes to pixel position, the following formulae can be
[2024-05-09 18:59:20] used:
[2024-05-09 18:59:20] •     X position: ((grid_value - 1) * 92) + 66
[2024-05-09 18:59:20] •     Y position: ((grid_value - 1) * 21) + 2
[2024-05-09 18:59:20] •     Width ($CONTROL_PAR_WIDTH): (grid_value * 92) - 5
[2024-05-09 18:59:20] •     Height ($CONTROL_PAR_HEIGHT): (grid_value * 21) - 3
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label (1, 1)
[2024-05-09 18:59:20]     set_text($label, "Move the wheel!")
[2024-05-09 18:59:20]     move_control_px($label, 66, 2)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on controller
[2024-05-09 18:59:20]     if ($CC_NUM = 1)
[2024-05-09 18:59:20]         move_control_px($label, 66 + %CC[1], 2)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Transform CC values into pixel position. This might be useful for reference.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] move_control()
[2024-05-09 18:59:20] General: $CONTROL_PAR_POS_X, $CONTROL_PAR_POS_Y
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: move_control_px()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: move_control_px
[2024-05-09 18:59:20] Parameters: variable,x-position,y-position
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Position UI widgets in pixels.
[2024-05-09 18:59:20] <variable>: The variable name of the UI widget.
[2024-05-09 18:59:20] <x-position>: The horizontal position of the widget in pixels (0 ... 1000).
[2024-05-09 18:59:20] <y-position>: The vertical position of the widget in pixels (0 ... 750).
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Pixel-based control parameters cannot be mixed with grid-based ones, so if you want to set
[2024-05-09 18:59:20] $CONTROL_PAR_WIDTH for a ui_label that is positioned to grid coordinates (2, 1), this will not
[2024-05-09 18:59:20] work - you would have to use $CONTROL_PAR_GRID_WIDTH instead.
[2024-05-09 18:59:20] - move_control_px() can be used in all callbacks.
[2024-05-09 18:59:20] - Note that using move_control_px() outside of the on init callback is more CPU
[2024-05-09 18:59:20] intensive, so handle with care.
[2024-05-09 18:59:20] - In order to match Kontakt standard grid sizes to pixel position, the following formulae can be
[2024-05-09 18:59:20] used:
[2024-05-09 18:59:20] - X position: ((grid_value - 1) * 92) + 66
[2024-05-09 18:59:20] - Y position: ((grid_value - 1) * 21) + 2
[2024-05-09 18:59:20] - Width ($CONTROL_PAR_WIDTH): (grid_value * 92) - 5
[2024-05-09 18:59:20] - Height ($CONTROL_PAR_HEIGHT): (grid_value * 21) - 3
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label (1, 1)
[2024-05-09 18:59:20]     set_text($label, "Move the wheel!")
[2024-05-09 18:59:20]     move_control_px($label, 66, 2)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on controller
[2024-05-09 18:59:20]     if ($CC_NUM = 1)
[2024-05-09 18:59:20]         move_control_px($label, 66 + %CC[1], 2)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Transform CC values into pixel position. This might be useful for reference.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] move_control()
[2024-05-09 18:59:20] General: $CONTROL_PAR_POS_X, $CONTROL_PAR_POS_Y
[2024-05-09 18:59:20] ------------------------------ set_control_help ------------------------------
[2024-05-09 18:59:20] Page 148, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5321
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_control_help(<variable>, <text>)
[2024-05-09 18:59:20] Assigns a text string to be displayed when hovering over a UI widget. The text will appear in
[2024-05-09 18:59:20] Kontakt's info pane.
[2024-05-09 18:59:20] <variable>: The variable name of the UI widget.
[2024-05-09 18:59:20] <text>: The info text to be displayed.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The text string used can contain a maximum of 320 characters.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Knob (0, 100, 1)
[2024-05-09 18:59:20]     set_control_help($Knob, "I'm the only knob, folks!")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] set_control_help() in action.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_script_title()
[2024-05-09 18:59:20] General:
[2024-05-09 18:59:20] $CONTROL_PAR_HELP
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_control_help()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_control_help
[2024-05-09 18:59:20] Parameters: variable,text
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assigns a text string to be displayed when hovering over a UI widget. The text will appear in
[2024-05-09 18:59:20] Kontakt's info pane.
[2024-05-09 18:59:20] <variable>: The variable name of the UI widget.
[2024-05-09 18:59:20] <text>: The info text to be displayed.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The text string used can contain a maximum of 320 characters.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Knob (0, 100, 1)
[2024-05-09 18:59:20]     set_control_help($Knob, "I'm the only knob, folks!")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] set_control_help() in action.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_script_title()
[2024-05-09 18:59:20] General:
[2024-05-09 18:59:20] $CONTROL_PAR_HELP
[2024-05-09 18:59:20] ------------------------------ set_control_par ------------------------------
[2024-05-09 18:59:20] Page 149, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5346
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_control_par(<ui-id>, <control-parameter>, <value>)
[2024-05-09 18:59:20] Change various parameters of the specified UI widget.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <control-parameter>: Parameter of the UI control we wish to set, i.e. $CONTROL_PAR_WIDTH.
[2024-05-09 18:59:20] <value>: The value of the control parameter we wish to set.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  set_control_par_str() is an additional flavor of the command for use with strings (i.e.
[2024-05-09 18:59:20] setting the text of a ui_label, or automation name of a ui_slider).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_value_edit $test (0, 100, $VALUE_EDIT_MODE_NOTE_NAMES)
[2024-05-09 18:59:20]     set_text($test,"")
[2024-05-09 18:59:20]     set_control_par(get_ui_id($test), $CONTROL_PAR_WIDTH, 45)
[2024-05-09 18:59:20]     move_control_px($test, 100, 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Changing the width of a value edit to 45 pixels. Note that you also have to specify its position in
[2024-05-09 18:59:20] pixels once you use pixel-based control parameters.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $test (1, 1)
[2024-05-09 18:59:20]     set_control_par_str(get_ui_id($test), $CONTROL_PAR_TEXT, "This is Text")
[2024-05-09 18:59:20]     set_control_par(get_ui_id($test), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Set and center text in labels.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] get_control_par()
[2024-05-09 18:59:20] set_control_par_arr()
[2024-05-09 18:59:20] get_ui_id()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_control_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_control_par
[2024-05-09 18:59:20] Parameters: ui-id,control-parameter,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Change various parameters of the specified UI widget.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <control-parameter>: Parameter of the UI control we wish to set, i.e. $CONTROL_PAR_WIDTH.
[2024-05-09 18:59:20] <value>: The value of the control parameter we wish to set.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - set_control_par_str() is an additional flavor of the command for use with strings (i.e.
[2024-05-09 18:59:20] setting the text of a ui_label, or automation name of a ui_slider).
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_value_edit $test (0, 100, $VALUE_EDIT_MODE_NOTE_NAMES)
[2024-05-09 18:59:20]     set_text($test,"")
[2024-05-09 18:59:20]     set_control_par(get_ui_id($test), $CONTROL_PAR_WIDTH, 45)
[2024-05-09 18:59:20]     move_control_px($test, 100, 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Changing the width of a value edit to 45 pixels. Note that you also have to specify its position in
[2024-05-09 18:59:20] pixels once you use pixel-based control parameters.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $test (1, 1)
[2024-05-09 18:59:20]     set_control_par_str(get_ui_id($test), $CONTROL_PAR_TEXT, "This is Text")
[2024-05-09 18:59:20]     set_control_par(get_ui_id($test), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Set and center text in labels.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] get_control_par()
[2024-05-09 18:59:20] set_control_par_arr()
[2024-05-09 18:59:20] get_ui_id()
[2024-05-09 18:59:20] ------------------------------ set_control_par_arr ------------------------------
[2024-05-09 18:59:20] Page 150, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5382
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_control_par_arr(<ui-id>, <control-parameter>, <value>, <index>)
[2024-05-09 18:59:20] Change various parameters of an element within an array-based UI widget, e.g. ui_xy cursors.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <control-parameter>: Parameter of the UI widgetwe wish to set,e.g. $CONTROL_PAR_AUTOMATION_ID.
[2024-05-09 18:59:20] <value>: The value of the control parameter we wish to set.
[2024-05-09 18:59:20] <index>: The array index of the UI control we wish to set.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  set_control_par_arr() comes in two additional flavors:
[2024-05-09 18:59:20] •  set_control_par_str_arr() (i.e. setting automation names of individual ui_xy
[2024-05-09 18:59:20] cursors)
[2024-05-09 18:59:20] •  set_control_par_real_arr() (i.e. values of individual ui_xy cursor X and Y axes)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_ui_height_px(350)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_xy ?myXY[4]
[2024-05-09 18:59:20]     declare $xyID
[2024-05-09 18:59:20]     $xyID := get_ui_id(?myXY)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 0, 0)
[2024-05-09 18:59:20]     set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 1, 1)
[2024-05-09 18:59:20]     set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 2, 2)
[2024-05-09 18:59:20]     set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 3, 3)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, "Cutoff", 0)
[2024-05-09 18:59:20]     set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, "Resonance", 1)
[2024-05-09 18:59:20]     set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, "Delay Pan", 2)
[2024-05-09 18:59:20]     set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, "Delay Feedback",
[2024-05-09 18:59:20] 3)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Setting automation IDs and names of an XY pad with two cursors.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] General: $CONTROL_PAR_AUTOMATION_ID, $CONTROL_PAR_AUTOMATION_NAME
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_CURSOR_PICTURE, $HIDE_PART_CURSOR
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_control_par_arr()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_control_par_arr
[2024-05-09 18:59:20] Parameters: ui-id,control-parameter,value,index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Change various parameters of an element within an array-based UI widget, e.g. ui_xy cursors.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <control-parameter>: Parameter of the UI widgetwe wish to set,e.g. $CONTROL_PAR_AUTOMATION_ID.
[2024-05-09 18:59:20] <value>: The value of the control parameter we wish to set.
[2024-05-09 18:59:20] <index>: The array index of the UI control we wish to set.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - set_control_par_arr() comes in two additional flavors:
[2024-05-09 18:59:20] - set_control_par_str_arr() (i.e. setting automation names of individual ui_xy
[2024-05-09 18:59:20] cursors)
[2024-05-09 18:59:20] - set_control_par_real_arr() (i.e. values of individual ui_xy cursor X and Y axes)
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_ui_height_px(350)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_xy ?myXY[4]
[2024-05-09 18:59:20]     declare $xyID
[2024-05-09 18:59:20]     $xyID := get_ui_id(?myXY)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 0, 0)
[2024-05-09 18:59:20]     set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 1, 1)
[2024-05-09 18:59:20]     set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 2, 2)
[2024-05-09 18:59:20]     set_control_par_arr($xyID, $CONTROL_PAR_AUTOMATION_ID, 3, 3)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, "Cutoff", 0)
[2024-05-09 18:59:20]     set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, "Resonance", 1)
[2024-05-09 18:59:20]     set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, "Delay Pan", 2)
[2024-05-09 18:59:20]     set_control_par_str_arr($xyID, $CONTROL_PAR_AUTOMATION_NAME, "Delay Feedback",
[2024-05-09 18:59:20] 3)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Setting automation IDs and names of an XY pad with two cursors.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] General: $CONTROL_PAR_AUTOMATION_ID, $CONTROL_PAR_AUTOMATION_NAME
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_CURSOR_PICTURE, $HIDE_PART_CURSOR
[2024-05-09 18:59:20] ------------------------------ set_knob_defval ------------------------------
[2024-05-09 18:59:20] Page 151, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5425
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_knob_defval(<variable>, <value>)
[2024-05-09 18:59:20] Assign a default value to a ui_knob to which it will be reset when pressing [Ctrl] (on Windows)
[2024-05-09 18:59:20] or [Cmd] (on macOS) and clicking the knob.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     In order to assign a default value to a ui_slider, use set_control_par() with
[2024-05-09 18:59:20] $CONTROL_PAR_DEFAULT_VALUE control parameter.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Knob (-100, 100, 0)
[2024-05-09 18:59:20]     set_knob_defval($Knob, 0)
[2024-05-09 18:59:20]     $Knob := 0
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_slider $Slider (-100, 100)
[2024-05-09 18:59:20]     set_control_par(get_ui_id($Slider), $CONTROL_PAR_DEFAULT_VALUE, 0)
[2024-05-09 18:59:20]     $Slider := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Assigning default values for a knob and a slider.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] General: $CONTROL_PAR_DEFAULT_VALUE
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_knob_defval()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_knob_defval
[2024-05-09 18:59:20] Parameters: variable,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assign a default value to a ui_knob to which it will be reset when pressing [Ctrl] (on Windows)
[2024-05-09 18:59:20] or [Cmd] (on macOS) and clicking the knob.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - In order to assign a default value to a ui_slider, use set_control_par() with
[2024-05-09 18:59:20] $CONTROL_PAR_DEFAULT_VALUE control parameter.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Knob (-100, 100, 0)
[2024-05-09 18:59:20]     set_knob_defval($Knob, 0)
[2024-05-09 18:59:20]     $Knob := 0
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_slider $Slider (-100, 100)
[2024-05-09 18:59:20]     set_control_par(get_ui_id($Slider), $CONTROL_PAR_DEFAULT_VALUE, 0)
[2024-05-09 18:59:20]     $Slider := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Assigning default values for a knob and a slider.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] General: $CONTROL_PAR_DEFAULT_VALUE
[2024-05-09 18:59:20] ------------------------------ set_knob_label ------------------------------
[2024-05-09 18:59:20] Page 152, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5452
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_knob_label(<variable>, <text>)
[2024-05-09 18:59:20] Assign a text string to a ui_knob.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare !rate_names[18]
[2024-05-09 18:59:20]     !rate_names[ 0] := "1/128"
[2024-05-09 18:59:20]     !rate_names[ 1] := "1/64"
[2024-05-09 18:59:20]     !rate_names[ 2] := "1/32"
[2024-05-09 18:59:20]     !rate_names[ 3] := "1/16 T"
[2024-05-09 18:59:20]     !rate_names[ 4] := "1/32 D"
[2024-05-09 18:59:20]     !rate_names[ 5] := "1/16"
[2024-05-09 18:59:20]     !rate_names[ 6] := "1/8 T"
[2024-05-09 18:59:20]     !rate_names[ 7] := "1/16 D"
[2024-05-09 18:59:20]     !rate_names[ 8] := "1/8"
[2024-05-09 18:59:20]     !rate_names[ 9] := "1/4 T"
[2024-05-09 18:59:20]     !rate_names[10] := "1/8 D"
[2024-05-09 18:59:20]     !rate_names[11] := "1/4"
[2024-05-09 18:59:20]     !rate_names[12] := "1/2 T"
[2024-05-09 18:59:20]     !rate_names[13] := "1/4 D"
[2024-05-09 18:59:20]     !rate_names[14] := "1/2"
[2024-05-09 18:59:20]     !rate_names[15] := "1/1 T"
[2024-05-09 18:59:20]     !rate_names[16] := "1/2 D"
[2024-05-09 18:59:20]     !rate_names[17] := "1/1"
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Rate (0, 17, 1)
[2024-05-09 18:59:20]     set_knob_label($Rate, !rate_names[$Rate])
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on persistence_changed
[2024-05-09 18:59:20]     set_knob_label($Rate, !rate_names[$Rate])
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Rate)
[2024-05-09 18:59:20]     set_knob_label($Rate, !rate_names[$Rate])
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Useful for displaying rhythmical values.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] General: $CONTROL_PAR_LABEL
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_knob_label()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_knob_label
[2024-05-09 18:59:20] Parameters: variable,text
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assign a text string to a ui_knob.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare !rate_names[18]
[2024-05-09 18:59:20]     !rate_names[ 0] := "1/128"
[2024-05-09 18:59:20]     !rate_names[ 1] := "1/64"
[2024-05-09 18:59:20]     !rate_names[ 2] := "1/32"
[2024-05-09 18:59:20]     !rate_names[ 3] := "1/16 T"
[2024-05-09 18:59:20]     !rate_names[ 4] := "1/32 D"
[2024-05-09 18:59:20]     !rate_names[ 5] := "1/16"
[2024-05-09 18:59:20]     !rate_names[ 6] := "1/8 T"
[2024-05-09 18:59:20]     !rate_names[ 7] := "1/16 D"
[2024-05-09 18:59:20]     !rate_names[ 8] := "1/8"
[2024-05-09 18:59:20]     !rate_names[ 9] := "1/4 T"
[2024-05-09 18:59:20]     !rate_names[10] := "1/8 D"
[2024-05-09 18:59:20]     !rate_names[11] := "1/4"
[2024-05-09 18:59:20]     !rate_names[12] := "1/2 T"
[2024-05-09 18:59:20]     !rate_names[13] := "1/4 D"
[2024-05-09 18:59:20]     !rate_names[14] := "1/2"
[2024-05-09 18:59:20]     !rate_names[15] := "1/1 T"
[2024-05-09 18:59:20]     !rate_names[16] := "1/2 D"
[2024-05-09 18:59:20]     !rate_names[17] := "1/1"
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Rate (0, 17, 1)
[2024-05-09 18:59:20]     set_knob_label($Rate, !rate_names[$Rate])
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on persistence_changed
[2024-05-09 18:59:20]     set_knob_label($Rate, !rate_names[$Rate])
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Rate)
[2024-05-09 18:59:20]     set_knob_label($Rate, !rate_names[$Rate])
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Useful for displaying rhythmical values.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] General: $CONTROL_PAR_LABEL
[2024-05-09 18:59:20] ------------------------------ set_knob_unit ------------------------------
[2024-05-09 18:59:20] Page 153, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5497
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_knob_unit(<variable>, <knob-unit-constant>)
[2024-05-09 18:59:20] Assign a unit mark to a ui_knob. The following constants are available:
[2024-05-09 18:59:20] $KNOB_UNIT_NONE
[2024-05-09 18:59:20] $KNOB_UNIT_DB
[2024-05-09 18:59:20] $KNOB_UNIT_HZ
[2024-05-09 18:59:20] $KNOB_UNIT_PERCENT
[2024-05-09 18:59:20] $KNOB_UNIT_MS
[2024-05-09 18:59:20] $KNOB_UNIT_OCT
[2024-05-09 18:59:20] $KNOB_UNIT_ST
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Time (0, 1000, 10)
[2024-05-09 18:59:20]     set_knob_unit($Time, $KNOB_UNIT_MS)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Octave (1, 6, 1)
[2024-05-09 18:59:20]     set_knob_unit($Octave, $KNOB_UNIT_OCT)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Volume (-600, 600, 100)
[2024-05-09 18:59:20]     set_knob_unit($Volume, $KNOB_UNIT_DB)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Scale (0, 100, 1)
[2024-05-09 18:59:20]     set_knob_unit($Scale, $KNOB_UNIT_PERCENT)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Tune (4300, 4500, 10)
[2024-05-09 18:59:20]     set_knob_unit($Tune, $KNOB_UNIT_HZ)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Various knob unit marks.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] General: $CONTROL_PAR_UNIT
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_knob_unit()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_knob_unit
[2024-05-09 18:59:20] Parameters: variable,knob-unit-constant
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assign a unit mark to a ui_knob. The following constants are available:
[2024-05-09 18:59:20] $KNOB_UNIT_NONE
[2024-05-09 18:59:20] $KNOB_UNIT_DB
[2024-05-09 18:59:20] $KNOB_UNIT_HZ
[2024-05-09 18:59:20] $KNOB_UNIT_PERCENT
[2024-05-09 18:59:20] $KNOB_UNIT_MS
[2024-05-09 18:59:20] $KNOB_UNIT_OCT
[2024-05-09 18:59:20] $KNOB_UNIT_ST
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Time (0, 1000, 10)
[2024-05-09 18:59:20]     set_knob_unit($Time, $KNOB_UNIT_MS)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Octave (1, 6, 1)
[2024-05-09 18:59:20]     set_knob_unit($Octave, $KNOB_UNIT_OCT)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Volume (-600, 600, 100)
[2024-05-09 18:59:20]     set_knob_unit($Volume, $KNOB_UNIT_DB)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Scale (0, 100, 1)
[2024-05-09 18:59:20]     set_knob_unit($Scale, $KNOB_UNIT_PERCENT)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Tune (4300, 4500, 10)
[2024-05-09 18:59:20]     set_knob_unit($Tune, $KNOB_UNIT_HZ)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Various knob unit marks.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] General: $CONTROL_PAR_UNIT
[2024-05-09 18:59:20] ------------------------------ set_menu_item_str ------------------------------
[2024-05-09 18:59:20] Page 154, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5533
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_menu_item_str(<ui-id>, <index>, <string>)
[2024-05-09 18:59:20] Sets the value of a ui_menu entry.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index of the menu item.
[2024-05-09 18:59:20] <string>: The text you wish to set for the selected menu item.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it can’t be changed afterwards.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     declare ui_button $button
[2024-05-09 18:59:20]     add_menu_item ($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Third Entry", 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($button)
[2024-05-09 18:59:20]     set_menu_item_str(get_ui_id($menu), 1, "Renamed")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Renaming the second menu entry.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] set_menu_item_value()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_menu_item_str()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_menu_item_str
[2024-05-09 18:59:20] Parameters: ui-id,index,string
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the value of a ui_menu entry.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index of the menu item.
[2024-05-09 18:59:20] <string>: The text you wish to set for the selected menu item.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it can’t be changed afterwards.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     declare ui_button $button
[2024-05-09 18:59:20]     add_menu_item ($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Third Entry", 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($button)
[2024-05-09 18:59:20]     set_menu_item_str(get_ui_id($menu), 1, "Renamed")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Renaming the second menu entry.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] set_menu_item_value()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20] ------------------------------ set_menu_item_value ------------------------------
[2024-05-09 18:59:20] Page 155, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5570
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_menu_item_value(<ui-id>, <index>, <value>)
[2024-05-09 18:59:20] Sets the value of a ui_menu entry.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index of the menu item.
[2024-05-09 18:59:20] <value>: The value you want to give the menu item.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it can’t be changed afterwards.
[2024-05-09 18:59:20] •     The <value> is set by the third parameter of the add_menu_item() command.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     add_menu_item ($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Third Entry", 10)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_menu_item_value(get_ui_id($menu), 1, 20)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Changing the value of the second menu entry to 20.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] set_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_menu_item_value()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_menu_item_value
[2024-05-09 18:59:20] Parameters: ui-id,index,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the value of a ui_menu entry.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index of the menu item.
[2024-05-09 18:59:20] <value>: The value you want to give the menu item.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it can’t be changed afterwards.
[2024-05-09 18:59:20] - The <value> is set by the third parameter of the add_menu_item() command.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     add_menu_item ($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Third Entry", 10)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_menu_item_value(get_ui_id($menu), 1, 20)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Changing the value of the second menu entry to 20.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] set_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_visibility()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20] ------------------------------ set_menu_item_visibility ------------------------------
[2024-05-09 18:59:20] Page 156, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5605
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_menu_item_visibility(<ui-id>, <index>, <visibility>)
[2024-05-09 18:59:20] Sets the visibility of a ui_menu entry.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index of the menu item.
[2024-05-09 18:59:20] <visibility>: Set to either 0 (invisible) or 1 (visible).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it can’t be changed afterwards.
[2024-05-09 18:59:20] •     Add as many menu entries as you would possibly need within the on init callback, then
[2024-05-09 18:59:20] show or hide them dynamically by using set_menu_item_visibility().
[2024-05-09 18:59:20] •     If you set the currently selected menu item to invisible, the item will remain visible until it is no
[2024-05-09 18:59:20] longer selected.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     declare ui_button $button
[2024-05-09 18:59:20]     add_menu_item ($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Third Entry", 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($button)
[2024-05-09 18:59:20]     set_menu_item_visibility(get_ui_id($menu), 1, $button)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Hiding the second menu entry with a button.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] set_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_value()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_menu_item_visibility()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_menu_item_visibility
[2024-05-09 18:59:20] Parameters: ui-id,index,visibility
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the visibility of a ui_menu entry.
[2024-05-09 18:59:20] <ui-id>: The ID number of the UI widget. You can retrieve it with get_ui_id().
[2024-05-09 18:59:20] <index>: The index of the menu item.
[2024-05-09 18:59:20] <visibility>: Set to either 0 (invisible) or 1 (visible).
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The <index> is defined by the order in which the menu items are added within the on init
[2024-05-09 18:59:20] callback; it can’t be changed afterwards.
[2024-05-09 18:59:20] - Add as many menu entries as you would possibly need within the on init callback, then
[2024-05-09 18:59:20] show or hide them dynamically by using set_menu_item_visibility().
[2024-05-09 18:59:20] - If you set the currently selected menu item to invisible, the item will remain visible until it is no
[2024-05-09 18:59:20] longer selected.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     declare ui_button $button
[2024-05-09 18:59:20]     add_menu_item ($menu, "First Entry", 0)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Second Entry", 5)
[2024-05-09 18:59:20]     add_menu_item ($menu, "Third Entry", 10)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($button)
[2024-05-09 18:59:20]     set_menu_item_visibility(get_ui_id($menu), 1, $button)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Hiding the second menu entry with a button.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] add_menu_item()
[2024-05-09 18:59:20] get_menu_item_str()
[2024-05-09 18:59:20] get_menu_item_value()
[2024-05-09 18:59:20] get_menu_item_visibility()
[2024-05-09 18:59:20] set_menu_item_str()
[2024-05-09 18:59:20] set_menu_item_value()
[2024-05-09 18:59:20] Specific: $CONTROL_PAR_SELECTED_ITEM_IDX, $CONTROL_PAR_NUM_ITEMS
[2024-05-09 18:59:20] ------------------------------ set_table_steps_shown ------------------------------
[2024-05-09 18:59:20] Page 157, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5646
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_table_steps_shown(<variable>, <num-of-steps>)
[2024-05-09 18:59:20] Changes the number of displayed columns in a ui_table widget.
[2024-05-09 18:59:20] <variable>: The variable name of the ui_table widget.
[2024-05-09 18:59:20] <num-of-steps>: The number of displayed steps.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_table %table[32] (5, 4, 127)
[2024-05-09 18:59:20]     declare ui_value_edit $Steps (2, 32, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Steps := 16
[2024-05-09 18:59:20]     set_table_steps_shown(%table, $Steps)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control($Steps)
[2024-05-09 18:59:20]     set_table_steps_shown(%table, $Steps)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Changing the number of shown steps.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] ui_table
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_table_steps_shown()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_table_steps_shown
[2024-05-09 18:59:20] Parameters: variable,num-of-steps
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Changes the number of displayed columns in a ui_table widget.
[2024-05-09 18:59:20] <variable>: The variable name of the ui_table widget.
[2024-05-09 18:59:20] <num-of-steps>: The number of displayed steps.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_table %table[32] (5, 4, 127)
[2024-05-09 18:59:20]     declare ui_value_edit $Steps (2, 32, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Steps := 16
[2024-05-09 18:59:20]     set_table_steps_shown(%table, $Steps)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control($Steps)
[2024-05-09 18:59:20]     set_table_steps_shown(%table, $Steps)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Changing the number of shown steps.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] ui_table
[2024-05-09 18:59:20] ------------------------------ set_script_title ------------------------------
[2024-05-09 18:59:20] Page 158, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5672
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_script_title(<text>)
[2024-05-09 18:59:20] Set the script title.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command overrides any manually set script titles.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_script_title("My Cool Instrument")
[2024-05-09 18:59:20]     set_ui_height(6)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Many performance view scripts start like this.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] make_perfview
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_script_title()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_script_title
[2024-05-09 18:59:20] Parameters: text
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Set the script title.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command overrides any manually set script titles.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_script_title("My Cool Instrument")
[2024-05-09 18:59:20]     set_ui_height(6)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Many performance view scripts start like this.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] make_perfview
[2024-05-09 18:59:20] ------------------------------ set_skin_offset ------------------------------
[2024-05-09 18:59:20] Page 159, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5695
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_skin_offset(<offset-in-px>)
[2024-05-09 18:59:20] Offsets the chosen background picture file by the specified number of pixels.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     If a PNG file used for the background has been set and is larger than the maximum height
[2024-05-09 18:59:20] of the performance view, you can use this command to offset the background graphic, thus
[2024-05-09 18:59:20] creating separate backgrounds for each of the script slots while only using one picture file.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_ui_height(1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on controller
[2024-05-09 18:59:20]     if ($CC_NUM = 1)
[2024-05-09 18:59:20]         set_skin_offset(%CC[1])
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] make_perfview
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_skin_offset()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_skin_offset
[2024-05-09 18:59:20] Parameters: offset-in-px
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Offsets the chosen background picture file by the specified number of pixels.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - If a PNG file used for the background has been set and is larger than the maximum height
[2024-05-09 18:59:20] of the performance view, you can use this command to offset the background graphic, thus
[2024-05-09 18:59:20] creating separate backgrounds for each of the script slots while only using one picture file.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_ui_height(1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on controller
[2024-05-09 18:59:20]     if ($CC_NUM = 1)
[2024-05-09 18:59:20]         set_skin_offset(%CC[1])
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] make_perfview
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20] ------------------------------ set_text ------------------------------
[2024-05-09 18:59:20] Page 160, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5723
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_text(<variable>, <text>)
[2024-05-09 18:59:20] When applied to a ui_label: replace the text currently visible in the specified label and add new
[2024-05-09 18:59:20] text.
[2024-05-09 18:59:20] When applied to ui_knob, ui_button, ui_switch and ui_value_edit: set the display name
[2024-05-09 18:59:20] of the widget.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label_1 (1, 1)
[2024-05-09 18:59:20]     set_text($label_1, "Small Label")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label_2 (3, 6)
[2024-05-09 18:59:20]     set_text($label_2, "Big Label")
[2024-05-09 18:59:20]     add_text_line($label_2, "...with a second text line")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Two labels with different sizes.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label_1 (1, 1)
[2024-05-09 18:59:20]     set_text ($label_1, "Small Label")
[2024-05-09 18:59:20]     hide_part ($label_1, $HIDE_PART_BG)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Hide the background of a label. This is also possible with other widgets.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] add_text_line()
[2024-05-09 18:59:20] set_control_par(): set_control_par_str()
[2024-05-09 18:59:20] General: $CONTROL_PAR_TEXT
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_text()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_text
[2024-05-09 18:59:20] Parameters: variable,text
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] When applied to a ui_label: replace the text currently visible in the specified label and add new
[2024-05-09 18:59:20] text.
[2024-05-09 18:59:20] When applied to ui_knob, ui_button, ui_switch and ui_value_edit: set the display name
[2024-05-09 18:59:20] of the widget.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label_1 (1, 1)
[2024-05-09 18:59:20]     set_text($label_1, "Small Label")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label_2 (3, 6)
[2024-05-09 18:59:20]     set_text($label_2, "Big Label")
[2024-05-09 18:59:20]     add_text_line($label_2, "...with a second text line")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Two labels with different sizes.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label_1 (1, 1)
[2024-05-09 18:59:20]     set_text ($label_1, "Small Label")
[2024-05-09 18:59:20]     hide_part ($label_1, $HIDE_PART_BG)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Hide the background of a label. This is also possible with other widgets.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] add_text_line()
[2024-05-09 18:59:20] set_control_par(): set_control_par_str()
[2024-05-09 18:59:20] General: $CONTROL_PAR_TEXT
[2024-05-09 18:59:20] ------------------------------ set_ui_color ------------------------------
[2024-05-09 18:59:20] Page 161, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5756
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_ui_color(<hex-value>)
[2024-05-09 18:59:20] Set the main background color of the performance view.
[2024-05-09 18:59:20] <hex value>The hexadecimal color value in the following format:
[2024-05-09 18:59:20] 0ff0000h {red}
[2024-05-09 18:59:20] The 0 at the start lets Kontakt know the value is a number.
[2024-05-09 18:59:20] The h at the end indicates that it is a hexadecimal value. You can also use
[2024-05-09 18:59:20] uppercase H.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command can be used in all callbacks.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_ui_color(0000000H)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Paint it black.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_ui_height()
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_ui_color()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_ui_color
[2024-05-09 18:59:20] Parameters: hex-value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Set the main background color of the performance view.
[2024-05-09 18:59:20] <hex value>The hexadecimal color value in the following format:
[2024-05-09 18:59:20] 0ff0000h {red}
[2024-05-09 18:59:20] The 0 at the start lets Kontakt know the value is a number.
[2024-05-09 18:59:20] The h at the end indicates that it is a hexadecimal value. You can also use
[2024-05-09 18:59:20] uppercase H.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command can be used in all callbacks.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_ui_color(0000000H)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Paint it black.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_ui_height()
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20] ------------------------------ set_ui_height ------------------------------
[2024-05-09 18:59:20] Page 162, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5782
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_ui_height(<height>)
[2024-05-09 18:59:20] Set the height of a script performance view in grid units.
[2024-05-09 18:59:20] <height>: The height of script in grid units (1 ... 8).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command can only be used in the on init callback.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_script_title("My Cool Instrument")
[2024-05-09 18:59:20]     set_ui_height(6)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Many performance view scripts start like this.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_ui_height()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_ui_height
[2024-05-09 18:59:20] Parameters: height
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Set the height of a script performance view in grid units.
[2024-05-09 18:59:20] <height>: The height of script in grid units (1 ... 8).
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command can only be used in the on init callback.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_script_title("My Cool Instrument")
[2024-05-09 18:59:20]     set_ui_height(6)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Many performance view scripts start like this.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20] ------------------------------ set_ui_height_px ------------------------------
[2024-05-09 18:59:20] Page 163, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5806
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_ui_height_px(<height>)
[2024-05-09 18:59:20] Set the height of a script performance view in pixels.
[2024-05-09 18:59:20] <height>: The height of script in pixels (50 ... 750).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command can only be used in the on init callback.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare const $SIZE := 1644    { picture height }
[2024-05-09 18:59:20]     declare const $NUM_FRAMES := 4
[2024-05-09 18:59:20]     declare const $HEADER_SIZE := 68
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_value_edit $Slide (1, $NUM_SLIDES, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_ui_height_px(($SIZE / $NUM_FRAMES) - $HEADER_SIZE)
[2024-05-09 18:59:20]     set_skin_offset(($Slide - 1) * ($SIZE / $NUM_FRAMES))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Slide)
[2024-05-09 18:59:20]     set_skin_offset(($Slide - 1) * ($SIZE / $NUM_FRAMES))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_ui_height()
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_ui_height_px()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_ui_height_px
[2024-05-09 18:59:20] Parameters: height
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Set the height of a script performance view in pixels.
[2024-05-09 18:59:20] <height>: The height of script in pixels (50 ... 750).
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command can only be used in the on init callback.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare const $SIZE := 1644    { picture height }
[2024-05-09 18:59:20]     declare const $NUM_FRAMES := 4
[2024-05-09 18:59:20]     declare const $HEADER_SIZE := 68
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_value_edit $Slide (1, $NUM_SLIDES, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_ui_height_px(($SIZE / $NUM_FRAMES) - $HEADER_SIZE)
[2024-05-09 18:59:20]     set_skin_offset(($Slide - 1) * ($SIZE / $NUM_FRAMES))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Slide)
[2024-05-09 18:59:20]     set_skin_offset(($Slide - 1) * ($SIZE / $NUM_FRAMES))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_ui_height()
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20] ------------------------------ set_ui_width_px ------------------------------
[2024-05-09 18:59:20] Page 164, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5839
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_ui_width_px(<width>)
[2024-05-09 18:59:20] Set the width of a script performance view in pixels.
[2024-05-09 18:59:20] <width>: The width of the script in pixels (633 ... 1000).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command can only be used in the on init callback.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_ui_height_px(750)
[2024-05-09 18:59:20]     set_ui_width_px(1000)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Making a performance view with the largest possible size.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_ui_width_px()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_ui_width_px
[2024-05-09 18:59:20] Parameters: width
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Set the width of a script performance view in pixels.
[2024-05-09 18:59:20] <width>: The width of the script in pixels (633 ... 1000).
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command can only be used in the on init callback.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]     set_ui_height_px(750)
[2024-05-09 18:59:20]     set_ui_width_px(1000)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Making a performance view with the largest possible size.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_ui_height_px()
[2024-05-09 18:59:20] ------------------------------ set_ui_wf_property ------------------------------
[2024-05-09 18:59:20] Page 165, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5861
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_ui_wf_property(<variable>, <property>, <index>, <value>)
[2024-05-09 18:59:20] Sets different properties for the ui_waveform widget.
[2024-05-09 18:59:20] <variable>: Variable name of the ui_waveform widget.
[2024-05-09 18:59:20] <property>: The following properties are available:
[2024-05-09 18:59:20] $UI_WF_PROP_PLAY_CURSOR
[2024-05-09 18:59:20] $UI_WF_PROP_FLAGS
[2024-05-09 18:59:20] $UI_WF_PROP_TABLE_VAL
[2024-05-09 18:59:20] $UI_WF_PROP_TABLE_IDX_HIGHLIGHT
[2024-05-09 18:59:20] $UI_WF_PROP_MIDI_DRAG_START_NOTE
[2024-05-09 18:59:20] <index>: The index of the slice to which the selected property applies.
[2024-05-09 18:59:20] Only valid for $UI_WF_PROP_TABLE_IDX_HIGHLIGHT and
[2024-05-09 18:59:20] $UI_WF_PROP_TABLE_VAL
[2024-05-09 18:59:20] <value>: The value of the selected property.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $play_pos
[2024-05-09 18:59:20]     declare ui_waveform $Waveform (6, 6)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     attach_zone($Waveform, find_zone("Test"), 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     while ($NOTE_HELD = 1)
[2024-05-09 18:59:20]         $play_pos := get_event_par($EVENT_ID, $EVENT_PAR_PLAY_POS)
[2024-05-09 18:59:20]         set_ui_wf_property($Waveform, $UI_WF_PROP_PLAY_CURSOR, 0, $play_pos)
[2024-05-09 18:59:20]         wait(10000)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Attaches a zone named “Test” to the waveform display and shows a play cursor within the waveform
[2024-05-09 18:59:20] as long as you play a note.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] get_ui_wf_property()
[2024-05-09 18:59:20] ui_waveform
[2024-05-09 18:59:20] attach_zone()
[2024-05-09 18:59:20] Zone and Slice Functions: find_zone()
[2024-05-09 18:59:20] Specific: Waveform Flag Constants, Waveform Property Constants
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 14. User Interface Commands
[2024-05-09 18:59:20] Category: set_ui_wf_property()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_ui_wf_property
[2024-05-09 18:59:20] Parameters: variable,property,index,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets different properties for the ui_waveform widget.
[2024-05-09 18:59:20] <variable>: Variable name of the ui_waveform widget.
[2024-05-09 18:59:20] <property>: The following properties are available:
[2024-05-09 18:59:20] $UI_WF_PROP_PLAY_CURSOR
[2024-05-09 18:59:20] $UI_WF_PROP_FLAGS
[2024-05-09 18:59:20] $UI_WF_PROP_TABLE_VAL
[2024-05-09 18:59:20] $UI_WF_PROP_TABLE_IDX_HIGHLIGHT
[2024-05-09 18:59:20] $UI_WF_PROP_MIDI_DRAG_START_NOTE
[2024-05-09 18:59:20] <index>: The index of the slice to which the selected property applies.
[2024-05-09 18:59:20] Only valid for $UI_WF_PROP_TABLE_IDX_HIGHLIGHT and
[2024-05-09 18:59:20] $UI_WF_PROP_TABLE_VAL
[2024-05-09 18:59:20] <value>: The value of the selected property.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $play_pos
[2024-05-09 18:59:20]     declare ui_waveform $Waveform (6, 6)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     attach_zone($Waveform, find_zone("Test"), 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     while ($NOTE_HELD = 1)
[2024-05-09 18:59:20]         $play_pos := get_event_par($EVENT_ID, $EVENT_PAR_PLAY_POS)
[2024-05-09 18:59:20]         set_ui_wf_property($Waveform, $UI_WF_PROP_PLAY_CURSOR, 0, $play_pos)
[2024-05-09 18:59:20]         wait(10000)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Attaches a zone named “Test” to the waveform display and shows a play cursor within the waveform
[2024-05-09 18:59:20] as long as you play a note.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] get_ui_wf_property()
[2024-05-09 18:59:20] ui_waveform
[2024-05-09 18:59:20] attach_zone()
[2024-05-09 18:59:20] Zone and Slice Functions: find_zone()
[2024-05-09 18:59:20] Specific: Waveform Flag Constants, Waveform Property Constants
[2024-05-09 18:59:20] ------------------------------ get_key_color ------------------------------
[2024-05-09 18:59:20] Page 166, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5905
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_key_color(<note-number>)
[2024-05-09 18:59:20] Returns the color constant of the specified note number.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         set_key_color($count, $KEY_COLOR_INACTIVE)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $random_key
[2024-05-09 18:59:20]     $random_key := random(60, 71)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_key_color($random_key, $KEY_COLOR_RED)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     if (get_key_color($EVENT_NOTE) = $KEY_COLOR_RED)
[2024-05-09 18:59:20]         message("Bravo!")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         set_key_color($random_key, $KEY_COLOR_INACTIVE)
[2024-05-09 18:59:20]         $random_key := random(60, 71)
[2024-05-09 18:59:20]         set_key_color($random_key, $KEY_COLOR_RED)
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         message("Try again!")
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Catch me if you can.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_key_color()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: get_key_color()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_key_color
[2024-05-09 18:59:20] Parameters: note-number
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the color constant of the specified note number.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         set_key_color($count, $KEY_COLOR_INACTIVE)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $random_key
[2024-05-09 18:59:20]     $random_key := random(60, 71)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_key_color($random_key, $KEY_COLOR_RED)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     if (get_key_color($EVENT_NOTE) = $KEY_COLOR_RED)
[2024-05-09 18:59:20]         message("Bravo!")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         set_key_color($random_key, $KEY_COLOR_INACTIVE)
[2024-05-09 18:59:20]         $random_key := random(60, 71)
[2024-05-09 18:59:20]         set_key_color($random_key, $KEY_COLOR_RED)
[2024-05-09 18:59:20]     else
[2024-05-09 18:59:20]         message("Try again!")
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Catch me if you can.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_key_color()
[2024-05-09 18:59:20] ------------------------------ get_key_name ------------------------------
[2024-05-09 18:59:20] Page 167, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5950
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_key_name(<note-number>)
[2024-05-09 18:59:20] Returns the name of the specified note number.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         set_key_name($count, "")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_key_name(60, "Middle C")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     message(get_key_name($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_key_name()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: get_key_name()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_key_name
[2024-05-09 18:59:20] Parameters: note-number
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the name of the specified note number.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         set_key_name($count, "")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_key_name(60, "Middle C")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     message(get_key_name($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_key_name()
[2024-05-09 18:59:20] ------------------------------ get_key_triggerstate ------------------------------
[2024-05-09 18:59:20] Page 168, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 5977
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_key_triggerstate(<note-number>)
[2024-05-09 18:59:20] Returns the pressed state of the specified note number, i.e. key, on the Kontakt keyboard. It can be
[2024-05-09 18:59:20] either 1 (key pressed) or 0 (key released).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  get_key_triggerstate() only works when set_key_pressed_support() is set to 1.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_key_pressed_support(1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 1)
[2024-05-09 18:59:20]     message(get_key_triggerstate($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 0)
[2024-05-09 18:59:20]     message(get_key_triggerstate($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_key_pressed()
[2024-05-09 18:59:20] set_key_pressed_support()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: get_key_triggerstate()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_key_triggerstate
[2024-05-09 18:59:20] Parameters: note-number
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the pressed state of the specified note number, i.e. key, on the Kontakt keyboard. It can be
[2024-05-09 18:59:20] either 1 (key pressed) or 0 (key released).
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - get_key_triggerstate() only works when set_key_pressed_support() is set to 1.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_key_pressed_support(1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 1)
[2024-05-09 18:59:20]     message(get_key_triggerstate($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 0)
[2024-05-09 18:59:20]     message(get_key_triggerstate($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_key_pressed()
[2024-05-09 18:59:20] set_key_pressed_support()
[2024-05-09 18:59:20] ------------------------------ get_key_type ------------------------------
[2024-05-09 18:59:20] Page 169, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6007
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_key_type(<note-number>)
[2024-05-09 18:59:20] Returns the key type constant of the specified note number.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_key_type()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: get_key_type()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_key_type
[2024-05-09 18:59:20] Parameters: note-number
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the key type constant of the specified note number.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_key_type()
[2024-05-09 18:59:20] ------------------------------ get_keyrange_min_note ------------------------------
[2024-05-09 18:59:20] Page 170, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6016
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_keyrange_min_note(<note-number>)
[2024-05-09 18:59:20] Returns the lowest note of the specified key range.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Since a key range cannot have overlapping notes, it is sufficient with all get_keyrange_...
[2024-05-09 18:59:20] commands to specify the key range with one note number only.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         remove_keyrange($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_keyrange(36, 72, "Middle Range")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     message(get_keyrange_min_note($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_keyrange()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: get_keyrange_min_note()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_keyrange_min_note
[2024-05-09 18:59:20] Parameters: note-number
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the lowest note of the specified key range.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Since a key range cannot have overlapping notes, it is sufficient with all get_keyrange_...
[2024-05-09 18:59:20] commands to specify the key range with one note number only.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         remove_keyrange($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_keyrange(36, 72, "Middle Range")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     message(get_keyrange_min_note($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_keyrange()
[2024-05-09 18:59:20] ------------------------------ get_keyrange_max_note ------------------------------
[2024-05-09 18:59:20] Page 171, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6046
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_keyrange_max_note(<note-number>)
[2024-05-09 18:59:20] Returns the highest note of the specified key range.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Since a key range cannot have overlapping notes, it is sufficient with all get_keyrange_...
[2024-05-09 18:59:20] commands to specify the key range with one note number only.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         remove_keyrange($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_keyrange(36, 72, "Middle Range")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     message(get_keyrange_max_note($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_keyrange()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: get_keyrange_max_note()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_keyrange_max_note
[2024-05-09 18:59:20] Parameters: note-number
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the highest note of the specified key range.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Since a key range cannot have overlapping notes, it is sufficient with all get_keyrange_...
[2024-05-09 18:59:20] commands to specify the key range with one note number only.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         remove_keyrange($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_keyrange(36, 72, "Middle Range")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     message(get_keyrange_max_note($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_keyrange()
[2024-05-09 18:59:20] ------------------------------ get_keyrange_name ------------------------------
[2024-05-09 18:59:20] Page 172, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6076
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_keyrange_name(<note-number>)
[2024-05-09 18:59:20] Returns the name of the specified key range.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Since a key range cannot have overlapping notes, it is sufficient with all get_keyrange_...
[2024-05-09 18:59:20] commands to specify the key range with one note number only.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         remove_keyrange($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_keyrange(36, 72, "Middle Range")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     message(get_keyrange_name($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_keyrange()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: get_keyrange_name()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_keyrange_name
[2024-05-09 18:59:20] Parameters: note-number
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the name of the specified key range.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Since a key range cannot have overlapping notes, it is sufficient with all get_keyrange_...
[2024-05-09 18:59:20] commands to specify the key range with one note number only.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         remove_keyrange($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_keyrange(36, 72, "Middle Range")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     message(get_keyrange_name($EVENT_NOTE))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_keyrange()
[2024-05-09 18:59:20] ------------------------------ set_key_color ------------------------------
[2024-05-09 18:59:20] Page 173, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6106
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_key_color(<note-number>, <key-color-constant>)
[2024-05-09 18:59:20] Sets the color of the specified key, i.e. MIDI note, on the Kontakt virtual keyboard.
[2024-05-09 18:59:20] <note-number>: MIDI note number of the key (0 ... 127).
[2024-05-09 18:59:20] <key-color-constant>: One of available key color constant to specify the color used. The followingconstants are available:
[2024-05-09 18:59:20] $KEY_COLOR_RED
[2024-05-09 18:59:20] $KEY_COLOR_ORANGE
[2024-05-09 18:59:20] $KEY_COLOR_LIGHT_ORANGE
[2024-05-09 18:59:20] $KEY_COLOR_WARM_YELLOW
[2024-05-09 18:59:20] $KEY_COLOR_YELLOW
[2024-05-09 18:59:20] $KEY_COLOR_LIME
[2024-05-09 18:59:20] $KEY_COLOR_GREEN
[2024-05-09 18:59:20] $KEY_COLOR_MINT
[2024-05-09 18:59:20] $KEY_COLOR_CYAN
[2024-05-09 18:59:20] $KEY_COLOR_TURQUOISE
[2024-05-09 18:59:20] $KEY_COLOR_BLUE
[2024-05-09 18:59:20] $KEY_COLOR_PLUM
[2024-05-09 18:59:20] $KEY_COLOR_VIOLET
[2024-05-09 18:59:20] $KEY_COLOR_PURPLE
[2024-05-09 18:59:20] $KEY_COLOR_MAGENTA
[2024-05-09 18:59:20] $KEY_COLOR_FUCHSIA
[2024-05-09 18:59:20] $KEY_COLOR_DEFAULT Sets the key to Kontakt's standard color for mapped
[2024-05-09 18:59:20] notes
[2024-05-09 18:59:20] $KEY_COLOR_INACTIVE Resets the key to standard black and white
[2024-05-09 18:59:20] $KEY_COLOR_NONE Resets the key to its normal Kontakt color, e.g. red for
[2024-05-09 18:59:20] internal keyswitches
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The keyboard colors reside outside of KSP, i.e. changing the color of a key is similar to
[2024-05-09 18:59:20] changing a Kontakt knob with set_engine_par(). It is therefore a good practice to set all
[2024-05-09 18:59:20] keys to either $KEY_COLOR_INACTIVE or $KEY_COLOR_NONE in the on init callback.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Example
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Color
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare $note_count
[2024-05-09 18:59:20]     declare $color_count
[2024-05-09 18:59:20]     declare %white_keys[7] := (0, 2, 4, 5, 7, 9, 11)
[2024-05-09 18:59:20]     declare %colors[16] := ( ...
[2024-05-09 18:59:20]         $KEY_COLOR_RED, ...
[2024-05-09 18:59:20]         $KEY_COLOR_ORANGE, ...
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: set_key_color()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_key_color
[2024-05-09 18:59:20] Parameters: note-number,key-color-constant
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the color of the specified key, i.e. MIDI note, on the Kontakt virtual keyboard.
[2024-05-09 18:59:20] <note-number>: MIDI note number of the key (0 ... 127).
[2024-05-09 18:59:20] <key-color-constant>: One of available key color constant to specify the color used. The followingconstants are available:
[2024-05-09 18:59:20] $KEY_COLOR_RED
[2024-05-09 18:59:20] $KEY_COLOR_ORANGE
[2024-05-09 18:59:20] $KEY_COLOR_LIGHT_ORANGE
[2024-05-09 18:59:20] $KEY_COLOR_WARM_YELLOW
[2024-05-09 18:59:20] $KEY_COLOR_YELLOW
[2024-05-09 18:59:20] $KEY_COLOR_LIME
[2024-05-09 18:59:20] $KEY_COLOR_GREEN
[2024-05-09 18:59:20] $KEY_COLOR_MINT
[2024-05-09 18:59:20] $KEY_COLOR_CYAN
[2024-05-09 18:59:20] $KEY_COLOR_TURQUOISE
[2024-05-09 18:59:20] $KEY_COLOR_BLUE
[2024-05-09 18:59:20] $KEY_COLOR_PLUM
[2024-05-09 18:59:20] $KEY_COLOR_VIOLET
[2024-05-09 18:59:20] $KEY_COLOR_PURPLE
[2024-05-09 18:59:20] $KEY_COLOR_MAGENTA
[2024-05-09 18:59:20] $KEY_COLOR_FUCHSIA
[2024-05-09 18:59:20] $KEY_COLOR_DEFAULT Sets the key to Kontakt's standard color for mapped
[2024-05-09 18:59:20] notes
[2024-05-09 18:59:20] $KEY_COLOR_INACTIVE Resets the key to standard black and white
[2024-05-09 18:59:20] $KEY_COLOR_NONE Resets the key to its normal Kontakt color, e.g. red for
[2024-05-09 18:59:20] internal keyswitches
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The keyboard colors reside outside of KSP, i.e. changing the color of a key is similar to
[2024-05-09 18:59:20] changing a Kontakt knob with set_engine_par(). It is therefore a good practice to set all
[2024-05-09 18:59:20] keys to either $KEY_COLOR_INACTIVE or $KEY_COLOR_NONE in the on init callback.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Color
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare $note_count
[2024-05-09 18:59:20]     declare $color_count
[2024-05-09 18:59:20]     declare %white_keys[7] := (0, 2, 4, 5, 7, 9, 11)
[2024-05-09 18:59:20]     declare %colors[16] := ( ...
[2024-05-09 18:59:20]         $KEY_COLOR_RED, ...
[2024-05-09 18:59:20]         $KEY_COLOR_ORANGE, ...
[2024-05-09 18:59:20] ------------------------------ set_key_name ------------------------------
[2024-05-09 18:59:20] Page 175, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6217
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_key_name(<note-number>, <name>)
[2024-05-09 18:59:20] Assigns a text string to the specified note number.
[2024-05-09 18:59:20] <note-number>: MIDI note number of the key (0 ... 127).
[2024-05-09 18:59:20] <name>: Text string to assign.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Key names are instrument parameters and reside outside of KSP, i.e. changing the key name
[2024-05-09 18:59:20] is similar to changing a Kontakt knob with set_engine_par(). Make sure to always reset all
[2024-05-09 18:59:20] key names in the on init callback.
[2024-05-09 18:59:20] •     Key names and ranges are displayed in Kontakt's info pane when hovering the mouse over the
[2024-05-09 18:59:20] key on the Kontakt keyboard.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         set_key_name($count, "")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_key_name(60, "Middle C")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_keyrange()
[2024-05-09 18:59:20] get_key_name()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: set_key_name()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_key_name
[2024-05-09 18:59:20] Parameters: note-number,name
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assigns a text string to the specified note number.
[2024-05-09 18:59:20] <note-number>: MIDI note number of the key (0 ... 127).
[2024-05-09 18:59:20] <name>: Text string to assign.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Key names are instrument parameters and reside outside of KSP, i.e. changing the key name
[2024-05-09 18:59:20] is similar to changing a Kontakt knob with set_engine_par(). Make sure to always reset all
[2024-05-09 18:59:20] key names in the on init callback.
[2024-05-09 18:59:20] - Key names and ranges are displayed in Kontakt's info pane when hovering the mouse over the
[2024-05-09 18:59:20] key on the Kontakt keyboard.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         set_key_name($count, "")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_key_name(60, "Middle C")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_keyrange()
[2024-05-09 18:59:20] get_key_name()
[2024-05-09 18:59:20] ------------------------------ set_key_pressed ------------------------------
[2024-05-09 18:59:20] Page 176, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6250
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_key_pressed(<note-number>, <value>)
[2024-05-09 18:59:20] Sets the trigger state of the specified key on Kontakt's keyboard.
[2024-05-09 18:59:20] <note-number>: MIDI note number of the key (0 ... 127).
[2024-05-09 18:59:20] <value>: 0: Key is released
[2024-05-09 18:59:20] 1: Key is pressed
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     By using set_key_pressed() in combination with set_key_pressed_support() set to
[2024-05-09 18:59:20] 1, it is possible to show script generated notes on Kontakt's keyboard. The typical use case
[2024-05-09 18:59:20] would be if an instrument features a built-in sequencer, arpeggiator or harmonizer, and the
[2024-05-09 18:59:20] triggered notes should be shown on the keyboard.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_key_pressed_support(1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Insert this after an arpeggiator or harmonizer script.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_key_pressed_support()
[2024-05-09 18:59:20] get_key_triggerstate()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: set_key_pressed()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_key_pressed
[2024-05-09 18:59:20] Parameters: note-number,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the trigger state of the specified key on Kontakt's keyboard.
[2024-05-09 18:59:20] <note-number>: MIDI note number of the key (0 ... 127).
[2024-05-09 18:59:20] <value>: 0: Key is released
[2024-05-09 18:59:20] 1: Key is pressed
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - By using set_key_pressed() in combination with set_key_pressed_support() set to
[2024-05-09 18:59:20] 1, it is possible to show script generated notes on Kontakt's keyboard. The typical use case
[2024-05-09 18:59:20] would be if an instrument features a built-in sequencer, arpeggiator or harmonizer, and the
[2024-05-09 18:59:20] triggered notes should be shown on the keyboard.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_key_pressed_support(1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Insert this after an arpeggiator or harmonizer script.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_key_pressed_support()
[2024-05-09 18:59:20] get_key_triggerstate()
[2024-05-09 18:59:20] ------------------------------ set_key_pressed_support ------------------------------
[2024-05-09 18:59:20] Page 177, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6284
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_key_pressed_support(<mode>)
[2024-05-09 18:59:20] Sets the pressed state support mode for Kontakt's keyboard.
[2024-05-09 18:59:20] <mode>: 0: Kontakt handles all pressed states. set_key_pressed() commands are
[2024-05-09 18:59:20] ignored (this is the default).
[2024-05-09 18:59:20] 1: Kontakt's keyboard is only affected by set_key_pressed() commands.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The pressed state mode resides outside of KSP, i.e. changing the mode is similar to changing a
[2024-05-09 18:59:20] Kontakt knob with set_engine_par(). Make sure to always set the desired mode in the on
[2024-05-09 18:59:20] init callback.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_button $Enable
[2024-05-09 18:59:20]     set_key_pressed_support(0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Enable)
[2024-05-09 18:59:20]     set_key_pressed_support($Enable)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     play_note($EVENT_NOTE + 4, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:20]     play_note($EVENT_NOTE + 7, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 1)
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE + 4, 1)
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE + 7, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 0)
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE + 4, 0)
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE + 7, 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Press the button and you will see what you hear.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_key_pressed()
[2024-05-09 18:59:20] get_key_triggerstate()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: set_key_pressed_support()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_key_pressed_support
[2024-05-09 18:59:20] Parameters: mode
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the pressed state support mode for Kontakt's keyboard.
[2024-05-09 18:59:20] <mode>: 0: Kontakt handles all pressed states. set_key_pressed() commands are
[2024-05-09 18:59:20] ignored (this is the default).
[2024-05-09 18:59:20] 1: Kontakt's keyboard is only affected by set_key_pressed() commands.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The pressed state mode resides outside of KSP, i.e. changing the mode is similar to changing a
[2024-05-09 18:59:20] Kontakt knob with set_engine_par(). Make sure to always set the desired mode in the on
[2024-05-09 18:59:20] init callback.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_button $Enable
[2024-05-09 18:59:20]     set_key_pressed_support(0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Enable)
[2024-05-09 18:59:20]     set_key_pressed_support($Enable)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     play_note($EVENT_NOTE + 4, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:20]     play_note($EVENT_NOTE + 7, $EVENT_VELOCITY, 0, -1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 1)
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE + 4, 1)
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE + 7, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on release
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE, 0)
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE + 4, 0)
[2024-05-09 18:59:20]     set_key_pressed($EVENT_NOTE + 7, 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Press the button and you will see what you hear.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_key_pressed()
[2024-05-09 18:59:20] get_key_triggerstate()
[2024-05-09 18:59:20] ------------------------------ set_key_type ------------------------------
[2024-05-09 18:59:20] Page 178, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6329
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_key_type(<note-number>, <key-type-constant>)
[2024-05-09 18:59:20] Assigns a key type to the specified key.
[2024-05-09 18:59:20] <note-number>: MIDI note number of the key (0 ... 127).
[2024-05-09 18:59:20] <key-type-constant>: The following key types are available:$NI_KEY_TYPE_DEFAULT Normally mapped keys that produce sound.
[2024-05-09 18:59:20] $NI_KEY_TYPE_CONTROL Keyswitches or other keysthat do not produce
[2024-05-09 18:59:20] sound.
[2024-05-09 18:59:20] $NI_KEY_TYPE_NONE Resets the key to its standard Kontakt behaviour.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Setting the key type is useful for supported hosts like Komplete Kontrol, where keys with
[2024-05-09 18:59:20] control functionality, e.g. keyswitches, should not be affected by any note processing.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $count := 0
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         set_key_type($count, $NI_KEY_TYPE_NONE)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $count := 36
[2024-05-09 18:59:20]     while ($count <= 96)
[2024-05-09 18:59:20]         select ($count)
[2024-05-09 18:59:20]             case 36 to 47 { e.g. key switch }
[2024-05-09 18:59:20]                 set_key_type($count, $NI_KEY_TYPE_CONTROL)
[2024-05-09 18:59:20]             case 48 to 96 { e.g. playable notes }
[2024-05-09 18:59:20]                 set_key_type($count, $NI_KEY_TYPE_DEFAULT)
[2024-05-09 18:59:20]         end select
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] get_key_type()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: set_key_type()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_key_type
[2024-05-09 18:59:20] Parameters: note-number,key-type-constant
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assigns a key type to the specified key.
[2024-05-09 18:59:20] <note-number>: MIDI note number of the key (0 ... 127).
[2024-05-09 18:59:20] <key-type-constant>: The following key types are available:$NI_KEY_TYPE_DEFAULT Normally mapped keys that produce sound.
[2024-05-09 18:59:20] $NI_KEY_TYPE_CONTROL Keyswitches or other keysthat do not produce
[2024-05-09 18:59:20] sound.
[2024-05-09 18:59:20] $NI_KEY_TYPE_NONE Resets the key to its standard Kontakt behaviour.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Setting the key type is useful for supported hosts like Komplete Kontrol, where keys with
[2024-05-09 18:59:20] control functionality, e.g. keyswitches, should not be affected by any note processing.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $count := 0
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         set_key_type($count, $NI_KEY_TYPE_NONE)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $count := 36
[2024-05-09 18:59:20]     while ($count <= 96)
[2024-05-09 18:59:20]         select ($count)
[2024-05-09 18:59:20]             case 36 to 47 { e.g. key switch }
[2024-05-09 18:59:20]                 set_key_type($count, $NI_KEY_TYPE_CONTROL)
[2024-05-09 18:59:20]             case 48 to 96 { e.g. playable notes }
[2024-05-09 18:59:20]                 set_key_type($count, $NI_KEY_TYPE_DEFAULT)
[2024-05-09 18:59:20]         end select
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] get_key_type()
[2024-05-09 18:59:20] ------------------------------ set_keyrange ------------------------------
[2024-05-09 18:59:20] Page 179, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6372
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_keyrange(<min-note>, <max-note>, <name>)
[2024-05-09 18:59:20] Assigns a text string to the specified range of keys.
[2024-05-09 18:59:20] <min-note>: First key of the key range (0 ... 127).
[2024-05-09 18:59:20] <max-note>: Last key of the key range (0 ... 127).
[2024-05-09 18:59:20] <name>: Text string specifying the name of the key range.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Key ranges are instrument parameters and reside outside of KSP, i.e. changing the key range is
[2024-05-09 18:59:20] similar to changing a Kontakt knob with set_engine_par(). Make sure to always remove all
[2024-05-09 18:59:20] key ranges in the on init callback or whenever you want to change them later.
[2024-05-09 18:59:20] •     There can be up to 16 key ranges per instrument.
[2024-05-09 18:59:20] •     Key names and ranges are displayed in Kontakt's info pane when hovering the mouse over the
[2024-05-09 18:59:20] key on the Kontakt keyboard. The range name is followed by the key name, separated by a
[2024-05-09 18:59:20] dash.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         remove_keyrange($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_keyrange(36, 72, "Middle Range")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] remove_keyrange()
[2024-05-09 18:59:20] set_key_name()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: set_keyrange()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_keyrange
[2024-05-09 18:59:20] Parameters: min-note,max-note,name
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assigns a text string to the specified range of keys.
[2024-05-09 18:59:20] <min-note>: First key of the key range (0 ... 127).
[2024-05-09 18:59:20] <max-note>: Last key of the key range (0 ... 127).
[2024-05-09 18:59:20] <name>: Text string specifying the name of the key range.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Key ranges are instrument parameters and reside outside of KSP, i.e. changing the key range is
[2024-05-09 18:59:20] similar to changing a Kontakt knob with set_engine_par(). Make sure to always remove all
[2024-05-09 18:59:20] key ranges in the on init callback or whenever you want to change them later.
[2024-05-09 18:59:20] - There can be up to 16 key ranges per instrument.
[2024-05-09 18:59:20] - Key names and ranges are displayed in Kontakt's info pane when hovering the mouse over the
[2024-05-09 18:59:20] key on the Kontakt keyboard. The range name is followed by the key name, separated by a
[2024-05-09 18:59:20] dash.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         remove_keyrange($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_keyrange(36, 72, "Middle Range")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] remove_keyrange()
[2024-05-09 18:59:20] set_key_name()
[2024-05-09 18:59:20] ------------------------------ remove_keyrange ------------------------------
[2024-05-09 18:59:20] Page 180, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6408
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] remove_keyrange(<note-number>)
[2024-05-09 18:59:20] Removes the range of keys to which the specified note number belongs.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Key ranges are instrument parameters and reside outside of KSP, i.e. changing the key range is
[2024-05-09 18:59:20] similar to changing a Kontakt knob withset_engine_par(). Make sure to always remove all
[2024-05-09 18:59:20] key ranges in the on init callback or whenever you want to change them later.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         remove_keyrange($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_keyrange(36, 72, "Middle Range")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_keyrange()
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 15. Keyboard Commands
[2024-05-09 18:59:20] Category: remove_keyrange()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: remove_keyrange
[2024-05-09 18:59:20] Parameters: note-number
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Removes the range of keys to which the specified note number belongs.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Key ranges are instrument parameters and reside outside of KSP, i.e. changing the key range is
[2024-05-09 18:59:20] similar to changing a Kontakt knob withset_engine_par(). Make sure to always remove all
[2024-05-09 18:59:20] key ranges in the on init callback or whenever you want to change them later.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($count < 128)
[2024-05-09 18:59:20]         remove_keyrange($count)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_keyrange(36, 72, "Middle Range")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_keyrange()
[2024-05-09 18:59:20] ------------------------------ get_mod_idx ------------------------------
[2024-05-09 18:59:20] Page 181, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6437
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_mod_idx(<group-index>, <mod-name>)
[2024-05-09 18:59:20] Returns the slot index of an internal modulator or external modulation slot.
[2024-05-09 18:59:20] <group-index>: The index of the group (see Index column in Monitor -> Groups pane inKontakt).
[2024-05-09 18:59:20] <mod-name>: The name of the internal (LFO, envelope, step modulator...) or external (velocity,
[2024-05-09 18:59:20] key position, mono aftertouch...) modulator.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Each modulator has a predefined name, based on its type and the parameter it targets.
[2024-05-09 18:59:20] •     This name can be changed by enabling developer options in Kontakt's Options → Developer
[2024-05-09 18:59:20] pane, then right-clicking on the modulator or modulator target strip.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $grp_idx := 0
[2024-05-09 18:59:20]     declare $env_idx
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $env_idx := get_mod_idx($grp_idx, "VOL_ENV")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Attack (0, 1000000, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Attack := get_engine_par($ENGINE_PAR_ATTACK, $grp_idx, $env_idx, -1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_knob_unit($Attack, $KNOB_UNIT_MS)
[2024-05-09 18:59:20]     set_knob_label($Attack, get_engine_par_disp($ENGINE_PAR_ATTACK, $grp_idx,
[2024-05-09 18:59:20] $env_idx, -1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Attack)
[2024-05-09 18:59:20]     set_engine_par($ENGINE_PAR_ATTACK, $Attack, $grp_idx, $env_idx, -1)
[2024-05-09 18:59:20]     set_knob_label($Attack, get_engine_par_disp($ENGINE_PAR_ATTACK, $grp_idx,
[2024-05-09 18:59:20] $env_idx, -1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Controlling the attack time of the volume envelope of the first group. Note: the envelope has been
[2024-05-09 18:59:20] manually renamed to "VOL_ENV".
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare $mod_idx
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $mod_idx := get_mod_idx(0, "VEL_VOLUME")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_slider $VelAmt (0, 1000000)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     if ($mod_idx # $NI_NOT_FOUND)
[2024-05-09 18:59:20]         $VelAmt := get_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, 0, $mod_idx, -1)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 16. Engine Parameter Commands
[2024-05-09 18:59:20] Category: get_mod_idx()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_mod_idx
[2024-05-09 18:59:20] Parameters: group-index,mod-name
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the slot index of an internal modulator or external modulation slot.
[2024-05-09 18:59:20] <group-index>: The index of the group (see Index column in Monitor -> Groups pane inKontakt).
[2024-05-09 18:59:20] <mod-name>: The name of the internal (LFO, envelope, step modulator...) or external (velocity,
[2024-05-09 18:59:20] key position, mono aftertouch...) modulator.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Each modulator has a predefined name, based on its type and the parameter it targets.
[2024-05-09 18:59:20] - This name can be changed by enabling developer options in Kontakt's Options → Developer
[2024-05-09 18:59:20] pane, then right-clicking on the modulator or modulator target strip.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $grp_idx := 0
[2024-05-09 18:59:20]     declare $env_idx
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $env_idx := get_mod_idx($grp_idx, "VOL_ENV")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $Attack (0, 1000000, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $Attack := get_engine_par($ENGINE_PAR_ATTACK, $grp_idx, $env_idx, -1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_knob_unit($Attack, $KNOB_UNIT_MS)
[2024-05-09 18:59:20]     set_knob_label($Attack, get_engine_par_disp($ENGINE_PAR_ATTACK, $grp_idx,
[2024-05-09 18:59:20] $env_idx, -1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Attack)
[2024-05-09 18:59:20]     set_engine_par($ENGINE_PAR_ATTACK, $Attack, $grp_idx, $env_idx, -1)
[2024-05-09 18:59:20]     set_knob_label($Attack, get_engine_par_disp($ENGINE_PAR_ATTACK, $grp_idx,
[2024-05-09 18:59:20] $env_idx, -1))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Controlling the attack time of the volume envelope of the first group. Note: the envelope has been
[2024-05-09 18:59:20] manually renamed to "VOL_ENV".
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare $mod_idx
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $mod_idx := get_mod_idx(0, "VEL_VOLUME")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_slider $VelAmt (0, 1000000)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     if ($mod_idx # $NI_NOT_FOUND)
[2024-05-09 18:59:20]         $VelAmt := get_engine_par($ENGINE_PAR_MOD_TARGET_INTENSITY, 0, $mod_idx, -1)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] ------------------------------ get_target_idx ------------------------------
[2024-05-09 18:59:20] Page 183, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6515
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_target_idx(<group-index>, <mod-index>, <target-name>)
[2024-05-09 18:59:20] Returns the modulation target slot index of an internal modulator
[2024-05-09 18:59:20] <group-index>: The index of the group (see Index column in Monitor -> Groups pane inKontakt).
[2024-05-09 18:59:20] <mod-index>: The slot index of an internal modulator (LFO, envelope, step modulator...). Can
[2024-05-09 18:59:20] be retrieved with get_mod_idx().
[2024-05-09 18:59:20] <target-name>: The name of the modulation target slot.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Each modulator has a predefined name, based on its type and the parameter it targets.
[2024-05-09 18:59:20] •     This name can be changed by enabling developer options in Kontakt's Options → Developer
[2024-05-09 18:59:20] pane, then right-clicking on the modulator or modulator target strip.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $mod_idx
[2024-05-09 18:59:20]     declare $target_idx
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $mod_idx := get_mod_idx(0, "FILTER_ENV")
[2024-05-09 18:59:20]     $target_idx := get_target_idx(0, $mod_idx, "FILTER_ENV > CUTOFF")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $FilterEnv (-1000, 1000, 10)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_knob_unit($FilterEnv, $KNOB_UNIT_PERCENT)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent($FilterEnv)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($FilterEnv)
[2024-05-09 18:59:20]     if ($mod_idx # $NI_NOT_FOUND and $target_idx # $NI_NOT_FOUND)
[2024-05-09 18:59:20]         set_engine_par($ENGINE_PAR_MOD_TARGET_MP_INTENSITY, 500000 + ($FilterEnv *
[2024-05-09 18:59:20] 500), 0, $mod_idx, $target_idx)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Controlling the envelope to filter cutoff modulation amount in the first group. Note: the filter envelope
[2024-05-09 18:59:20] has been manually renamed to "FILTER_ENV", and the target to "FILTER_ENV > CUTOFF".
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] get_mod_idx()
[2024-05-09 18:59:20] set_engine_par()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 16. Engine Parameter Commands
[2024-05-09 18:59:20] Category: get_target_idx()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_target_idx
[2024-05-09 18:59:20] Parameters: group-index,mod-index,target-name
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the modulation target slot index of an internal modulator
[2024-05-09 18:59:20] <group-index>: The index of the group (see Index column in Monitor -> Groups pane inKontakt).
[2024-05-09 18:59:20] <mod-index>: The slot index of an internal modulator (LFO, envelope, step modulator...). Can
[2024-05-09 18:59:20] be retrieved with get_mod_idx().
[2024-05-09 18:59:20] <target-name>: The name of the modulation target slot.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Each modulator has a predefined name, based on its type and the parameter it targets.
[2024-05-09 18:59:20] - This name can be changed by enabling developer options in Kontakt's Options → Developer
[2024-05-09 18:59:20] pane, then right-clicking on the modulator or modulator target strip.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $mod_idx
[2024-05-09 18:59:20]     declare $target_idx
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $mod_idx := get_mod_idx(0, "FILTER_ENV")
[2024-05-09 18:59:20]     $target_idx := get_target_idx(0, $mod_idx, "FILTER_ENV > CUTOFF")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_knob $FilterEnv (-1000, 1000, 10)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_knob_unit($FilterEnv, $KNOB_UNIT_PERCENT)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent($FilterEnv)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($FilterEnv)
[2024-05-09 18:59:20]     if ($mod_idx # $NI_NOT_FOUND and $target_idx # $NI_NOT_FOUND)
[2024-05-09 18:59:20]         set_engine_par($ENGINE_PAR_MOD_TARGET_MP_INTENSITY, 500000 + ($FilterEnv *
[2024-05-09 18:59:20] 500), 0, $mod_idx, $target_idx)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Controlling the envelope to filter cutoff modulation amount in the first group. Note: the filter envelope
[2024-05-09 18:59:20] has been manually renamed to "FILTER_ENV", and the target to "FILTER_ENV > CUTOFF".
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] get_mod_idx()
[2024-05-09 18:59:20] set_engine_par()
[2024-05-09 18:59:20] ------------------------------ get_engine_par ------------------------------
[2024-05-09 18:59:20] Page 184, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6559
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_engine_par(<parameter>, <group>, <slot>, <generic>)
[2024-05-09 18:59:20] Returns the value of a specific engine parameter.
[2024-05-09 18:59:20] <parameter>: Specifies the parameter by using one of the built-in engine parameter
[2024-05-09 18:59:20] constants.
[2024-05-09 18:59:20] <group>: The index (zero-based) of the group in which the specified parameter resides.
[2024-05-09 18:59:20] If the specified parameter resides on an Instrument level, enter -1.
[2024-05-09 18:59:20] Buses and Main FX also reside on Instrument level, so you must set <group> to
[2024-05-09 18:59:20] -1 if you want to address a bus.
[2024-05-09 18:59:20] <slot>: The slot index (zero-based) of the specified parameter. It applies only to group/
[2024-05-09 18:59:20] instrument effects, modulators and modulation intensities.
[2024-05-09 18:59:20] For group/instrument effects, this parameter specifies the slot in which the
[2024-05-09 18:59:20] effect resides (zero-based).
[2024-05-09 18:59:20] For modulators and modulation intensities, this parameters specifies the index
[2024-05-09 18:59:20] which you can retrieve by using get_mod_idx().
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20] <generic>: This parameter applies to instrument effects and to internal modulators.
[2024-05-09 18:59:20] For instrument effects, this parameter distinguishes between:
[2024-05-09 18:59:20] $NI_SEND_BUS: Send Effect
[2024-05-09 18:59:20] $NI_INSERT_BUS: Insert Effect
[2024-05-09 18:59:20] $NI_MAIN_BUS: Main Effect
[2024-05-09 18:59:20] For buses, this parameter specifies the actual bus:
[2024-05-09 18:59:20] $NI_BUS_OFFSET + [0 ... 15] One of the 16 buses
[2024-05-09 18:59:20] For internal modulators, this parameter specifies the modulation slider which
[2024-05-09 18:59:20] you can retrieve by using get_target_idx().
[2024-05-09 18:59:20] For Step Modulator, this parameter specifies which step value to change when
[2024-05-09 18:59:20] using $ENGINE_PAR_STEPMOD_STEP_VALUE.
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label (2, 6)
[2024-05-09 18:59:20]     set_text($label,"Release Trigger Groups:")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($i < $NUM_GROUPS)
[2024-05-09 18:59:20]         if (get_engine_par($ENGINE_PAR_RELEASE_TRIGGER, $i, -1, -1) = 1)
[2024-05-09 18:59:20]             add_text_line($label, group_name($i) & " (Index: " & $i & ")")
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Output the name and index of release trigger group
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label (2, 6)
[2024-05-09 18:59:20]     declare ui_button $Refresh
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 16. Engine Parameter Commands
[2024-05-09 18:59:20] Category: get_engine_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_engine_par
[2024-05-09 18:59:20] Parameters: parameter,group,slot,generic
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the value of a specific engine parameter.
[2024-05-09 18:59:20] <parameter>: Specifies the parameter by using one of the built-in engine parameter
[2024-05-09 18:59:20] constants.
[2024-05-09 18:59:20] <group>: The index (zero-based) of the group in which the specified parameter resides.
[2024-05-09 18:59:20] If the specified parameter resides on an Instrument level, enter -1.
[2024-05-09 18:59:20] Buses and Main FX also reside on Instrument level, so you must set <group> to
[2024-05-09 18:59:20] -1 if you want to address a bus.
[2024-05-09 18:59:20] <slot>: The slot index (zero-based) of the specified parameter. It applies only to group/
[2024-05-09 18:59:20] instrument effects, modulators and modulation intensities.
[2024-05-09 18:59:20] For group/instrument effects, this parameter specifies the slot in which the
[2024-05-09 18:59:20] effect resides (zero-based).
[2024-05-09 18:59:20] For modulators and modulation intensities, this parameters specifies the index
[2024-05-09 18:59:20] which you can retrieve by using get_mod_idx().
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20] <generic>: This parameter applies to instrument effects and to internal modulators.
[2024-05-09 18:59:20] For instrument effects, this parameter distinguishes between:
[2024-05-09 18:59:20] $NI_SEND_BUS: Send Effect
[2024-05-09 18:59:20] $NI_INSERT_BUS: Insert Effect
[2024-05-09 18:59:20] $NI_MAIN_BUS: Main Effect
[2024-05-09 18:59:20] For buses, this parameter specifies the actual bus:
[2024-05-09 18:59:20] $NI_BUS_OFFSET + [0 ... 15] One of the 16 buses
[2024-05-09 18:59:20] For internal modulators, this parameter specifies the modulation slider which
[2024-05-09 18:59:20] you can retrieve by using get_target_idx().
[2024-05-09 18:59:20] For Step Modulator, this parameter specifies which step value to change when
[2024-05-09 18:59:20] using $ENGINE_PAR_STEPMOD_STEP_VALUE.
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label (2, 6)
[2024-05-09 18:59:20]     set_text($label,"Release Trigger Groups:")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($i < $NUM_GROUPS)
[2024-05-09 18:59:20]         if (get_engine_par($ENGINE_PAR_RELEASE_TRIGGER, $i, -1, -1) = 1)
[2024-05-09 18:59:20]             add_text_line($label, group_name($i) & " (Index: " & $i & ")")
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Output the name and index of release trigger group
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label (2, 6)
[2024-05-09 18:59:20]     declare ui_button $Refresh
[2024-05-09 18:59:20] ------------------------------ get_engine_par_disp ------------------------------
[2024-05-09 18:59:20] Page 186, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6655
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_engine_par_disp(<parameter>, <group>, <slot>, <generic>)
[2024-05-09 18:59:20] Returns the displayed value of a specific engine parameter, as a string.
[2024-05-09 18:59:20] <parameter>: Specifies the parameter by using one of the built-in engine parameter
[2024-05-09 18:59:20] constants.
[2024-05-09 18:59:20] <group>: The index (zero-based) of the group in which the specified parameter resides.
[2024-05-09 18:59:20] If the specified parameter resides on an Instrument level, enter -1.
[2024-05-09 18:59:20] Buses and Main FX also reside on Instrument level, so you must set <group> to
[2024-05-09 18:59:20] -1 if you want to address a bus.
[2024-05-09 18:59:20] <slot>: The slot index (zero-based) of the specified parameter. It applies only to group/
[2024-05-09 18:59:20] instrument effects, modulators and modulation intensities.
[2024-05-09 18:59:20] For group/instrument effects, this parameter specifies the slot in which the
[2024-05-09 18:59:20] effect resides (zero-based).
[2024-05-09 18:59:20] For modulators and modulation intensities, this parameters specifies the index
[2024-05-09 18:59:20] which you can retrieve by using get_mod_idx().
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20] <generic>: This parameter applies to instrument effects and to internal modulators.
[2024-05-09 18:59:20] For instrument effects, this parameter distinguishes between:
[2024-05-09 18:59:20] $NI_SEND_BUS: Send Effect
[2024-05-09 18:59:20] $NI_INSERT_BUS: Insert Effect
[2024-05-09 18:59:20] $NI_MAIN_BUS: Main Effect
[2024-05-09 18:59:20] For buses, this parameter specifies the actual bus:
[2024-05-09 18:59:20] $NI_BUS_OFFSET + [0 ... 15] One of the 16 buses
[2024-05-09 18:59:20] For internal modulators, this parameter specifies the modulation slider which
[2024-05-09 18:59:20] you can retrieve by using get_target_idx().
[2024-05-09 18:59:20] For Step Modulator, this parameter specifies which step value to change when
[2024-05-09 18:59:20] using $ENGINE_PAR_STEPMOD_STEP_VALUE.
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label (2, 6)
[2024-05-09 18:59:20]     set_text($label, "Group Volume Settings:")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($i < $NUM_GROUPS)
[2024-05-09 18:59:20]         add_text_line($label, group_name($i) & ": " &
[2024-05-09 18:59:20] get_engine_par_disp($ENGINE_PAR_VOLUME, $i, -1, -1) & " dB")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Query the group volume settings in an instrument.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 16. Engine Parameter Commands
[2024-05-09 18:59:20] Category: get_engine_par_disp()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_engine_par_disp
[2024-05-09 18:59:20] Parameters: parameter,group,slot,generic
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the displayed value of a specific engine parameter, as a string.
[2024-05-09 18:59:20] <parameter>: Specifies the parameter by using one of the built-in engine parameter
[2024-05-09 18:59:20] constants.
[2024-05-09 18:59:20] <group>: The index (zero-based) of the group in which the specified parameter resides.
[2024-05-09 18:59:20] If the specified parameter resides on an Instrument level, enter -1.
[2024-05-09 18:59:20] Buses and Main FX also reside on Instrument level, so you must set <group> to
[2024-05-09 18:59:20] -1 if you want to address a bus.
[2024-05-09 18:59:20] <slot>: The slot index (zero-based) of the specified parameter. It applies only to group/
[2024-05-09 18:59:20] instrument effects, modulators and modulation intensities.
[2024-05-09 18:59:20] For group/instrument effects, this parameter specifies the slot in which the
[2024-05-09 18:59:20] effect resides (zero-based).
[2024-05-09 18:59:20] For modulators and modulation intensities, this parameters specifies the index
[2024-05-09 18:59:20] which you can retrieve by using get_mod_idx().
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20] <generic>: This parameter applies to instrument effects and to internal modulators.
[2024-05-09 18:59:20] For instrument effects, this parameter distinguishes between:
[2024-05-09 18:59:20] $NI_SEND_BUS: Send Effect
[2024-05-09 18:59:20] $NI_INSERT_BUS: Insert Effect
[2024-05-09 18:59:20] $NI_MAIN_BUS: Main Effect
[2024-05-09 18:59:20] For buses, this parameter specifies the actual bus:
[2024-05-09 18:59:20] $NI_BUS_OFFSET + [0 ... 15] One of the 16 buses
[2024-05-09 18:59:20] For internal modulators, this parameter specifies the modulation slider which
[2024-05-09 18:59:20] you can retrieve by using get_target_idx().
[2024-05-09 18:59:20] For Step Modulator, this parameter specifies which step value to change when
[2024-05-09 18:59:20] using $ENGINE_PAR_STEPMOD_STEP_VALUE.
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label (2, 6)
[2024-05-09 18:59:20]     set_text($label, "Group Volume Settings:")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     while ($i < $NUM_GROUPS)
[2024-05-09 18:59:20]         add_text_line($label, group_name($i) & ": " &
[2024-05-09 18:59:20] get_engine_par_disp($ENGINE_PAR_VOLUME, $i, -1, -1) & " dB")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Query the group volume settings in an instrument.
[2024-05-09 18:59:20] ------------------------------ get_voice_limit ------------------------------
[2024-05-09 18:59:20] Page 187, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6703
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_voice_limit(<voice-type>)
[2024-05-09 18:59:20] Returns the voice limit for the Time Machine Pro sampler mode of the Source module.
[2024-05-09 18:59:20] <voice-type>: The voice type, can be one of the following:
[2024-05-09 18:59:20] •  $NI_VL_TMPRO_STANDARD: Standard quality mode
[2024-05-09 18:59:20] •  $NI_VL_TMRPO_HQ: High quality mode
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label (3, 2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     add_text_line($label, "Standard Voice Limit: " &
[2024-05-09 18:59:20] get_voice_limit($NI_VL_TMPRO_STANDARD))
[2024-05-09 18:59:20]     add_text_line($label,"HQ Voice Limit: " & get_voice_limit($NI_VL_TMPRO_HQ))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displaying TM Pro voice limits.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_voice_limit()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 16. Engine Parameter Commands
[2024-05-09 18:59:20] Category: get_voice_limit()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_voice_limit
[2024-05-09 18:59:20] Parameters: voice-type
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the voice limit for the Time Machine Pro sampler mode of the Source module.
[2024-05-09 18:59:20] <voice-type>: The voice type, can be one of the following:
[2024-05-09 18:59:20] - $NI_VL_TMPRO_STANDARD: Standard quality mode
[2024-05-09 18:59:20] - $NI_VL_TMRPO_HQ: High quality mode
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_label $label (3, 2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     add_text_line($label, "Standard Voice Limit: " &
[2024-05-09 18:59:20] get_voice_limit($NI_VL_TMPRO_STANDARD))
[2024-05-09 18:59:20]     add_text_line($label,"HQ Voice Limit: " & get_voice_limit($NI_VL_TMPRO_HQ))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displaying TM Pro voice limits.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_voice_limit()
[2024-05-09 18:59:20] ------------------------------ output_channel_name ------------------------------
[2024-05-09 18:59:20] Page 188, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6726
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] output_channel_name(<output-number>)
[2024-05-09 18:59:20] Returns the channel name for the specified output.
[2024-05-09 18:59:20] <output-number>: The number of the output channel (zero-based, i.e. the first output is 0).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     add_menu_item($menu, "Default", -1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < $NUM_OUTPUT_CHANNELS)
[2024-05-09 18:59:20]         add_menu_item($menu, output_channel_name($i), $i)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $menu := get_engine_par($ENGINE_PAR_OUTPUT_CHANNEL, 0, -1, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($menu)
[2024-05-09 18:59:20]     set_engine_par($ENGINE_PAR_OUTPUT_CHANNEL,$menu, 0, -1, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Mirroring the output channel assignment menu of the first group.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] General: $NUM_OUTPUT_CHANNELS, $ENGINE_PAR_OUTPUT_CHANNEL
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 16. Engine Parameter Commands
[2024-05-09 18:59:20] Category: output_channel_name()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: output_channel_name
[2024-05-09 18:59:20] Parameters: output-number
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the channel name for the specified output.
[2024-05-09 18:59:20] <output-number>: The number of the output channel (zero-based, i.e. the first output is 0).
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_menu $menu
[2024-05-09 18:59:20]     add_menu_item($menu, "Default", -1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < $NUM_OUTPUT_CHANNELS)
[2024-05-09 18:59:20]         add_menu_item($menu, output_channel_name($i), $i)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $menu := get_engine_par($ENGINE_PAR_OUTPUT_CHANNEL, 0, -1, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($menu)
[2024-05-09 18:59:20]     set_engine_par($ENGINE_PAR_OUTPUT_CHANNEL,$menu, 0, -1, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Mirroring the output channel assignment menu of the first group.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] General: $NUM_OUTPUT_CHANNELS, $ENGINE_PAR_OUTPUT_CHANNEL
[2024-05-09 18:59:20] ------------------------------ set_engine_par ------------------------------
[2024-05-09 18:59:20] Page 189, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6759
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_engine_par(<parameter>, <value>, <group>, <slot>, <generic>)
[2024-05-09 18:59:20] Control various Kontakt parameters and buttons.
[2024-05-09 18:59:20] <parameter>: Specifies the parameter by using one of the built-in engine parameter
[2024-05-09 18:59:20] constants.
[2024-05-09 18:59:20] <value>: The value to which the specified parameter is set.
[2024-05-09 18:59:20] The range of values is always 0 to 1000000, except for switches in which case
[2024-05-09 18:59:20] it is 0 or 1.
[2024-05-09 18:59:20] <group>: The index (zero-based) of the group in which the specified parameter resides.
[2024-05-09 18:59:20] If the specified parameter resides on an Instrument level, enter -1.
[2024-05-09 18:59:20] Buses and Main FX also reside on Instrument level, so you must set <group> to
[2024-05-09 18:59:20] -1 if you want to address a bus.
[2024-05-09 18:59:20] <slot>: The slot index (zero-based) of the specified parameter. It applies only to group/
[2024-05-09 18:59:20] instrument effects, modulators and modulation intensities.
[2024-05-09 18:59:20] For group/instrument effects, this parameter specifies the slot in which the
[2024-05-09 18:59:20] effect resides (zero-based).
[2024-05-09 18:59:20] For modulators and modulation intensities, this parameters specifies the index
[2024-05-09 18:59:20] which you can retrieve by using get_mod_idx().
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20] <generic>: This parameter applies to instrument effects and to internal modulators.
[2024-05-09 18:59:20] For instrument effects, this parameter distinguishes between:
[2024-05-09 18:59:20] $NI_SEND_BUS: Send Effect
[2024-05-09 18:59:20] $NI_INSERT_BUS: Insert Effect
[2024-05-09 18:59:20] $NI_MAIN_BUS: Main Effect
[2024-05-09 18:59:20] For buses, this parameter specifies the actual bus:
[2024-05-09 18:59:20] $NI_BUS_OFFSET + [0 ... 15] One of the 16 buses
[2024-05-09 18:59:20] For internal modulators, this parameter specifies the modulation slider which
[2024-05-09 18:59:20] you can retrieve by using get_target_idx().
[2024-05-09 18:59:20] For Step Modulator, this parameter specifies which step value to change when
[2024-05-09 18:59:20] using $ENGINE_PAR_STEPMOD_STEP_VALUE.
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Volume (0, 1000000, 1000000)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Volume)
[2024-05-09 18:59:20]     set_engine_par($ENGINE_PAR_VOLUME, $Volume, -1, -1, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A knob controls the instrument volume.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Freq (0, 1000000, 1000000)
[2024-05-09 18:59:20]     declare ui_button $Bypass
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Freq)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 16. Engine Parameter Commands
[2024-05-09 18:59:20] Category: set_engine_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_engine_par
[2024-05-09 18:59:20] Parameters: parameter,value,group,slot,generic
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Control various Kontakt parameters and buttons.
[2024-05-09 18:59:20] <parameter>: Specifies the parameter by using one of the built-in engine parameter
[2024-05-09 18:59:20] constants.
[2024-05-09 18:59:20] <value>: The value to which the specified parameter is set.
[2024-05-09 18:59:20] The range of values is always 0 to 1000000, except for switches in which case
[2024-05-09 18:59:20] it is 0 or 1.
[2024-05-09 18:59:20] <group>: The index (zero-based) of the group in which the specified parameter resides.
[2024-05-09 18:59:20] If the specified parameter resides on an Instrument level, enter -1.
[2024-05-09 18:59:20] Buses and Main FX also reside on Instrument level, so you must set <group> to
[2024-05-09 18:59:20] -1 if you want to address a bus.
[2024-05-09 18:59:20] <slot>: The slot index (zero-based) of the specified parameter. It applies only to group/
[2024-05-09 18:59:20] instrument effects, modulators and modulation intensities.
[2024-05-09 18:59:20] For group/instrument effects, this parameter specifies the slot in which the
[2024-05-09 18:59:20] effect resides (zero-based).
[2024-05-09 18:59:20] For modulators and modulation intensities, this parameters specifies the index
[2024-05-09 18:59:20] which you can retrieve by using get_mod_idx().
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20] <generic>: This parameter applies to instrument effects and to internal modulators.
[2024-05-09 18:59:20] For instrument effects, this parameter distinguishes between:
[2024-05-09 18:59:20] $NI_SEND_BUS: Send Effect
[2024-05-09 18:59:20] $NI_INSERT_BUS: Insert Effect
[2024-05-09 18:59:20] $NI_MAIN_BUS: Main Effect
[2024-05-09 18:59:20] For buses, this parameter specifies the actual bus:
[2024-05-09 18:59:20] $NI_BUS_OFFSET + [0 ... 15] One of the 16 buses
[2024-05-09 18:59:20] For internal modulators, this parameter specifies the modulation slider which
[2024-05-09 18:59:20] you can retrieve by using get_target_idx().
[2024-05-09 18:59:20] For Step Modulator, this parameter specifies which step value to change when
[2024-05-09 18:59:20] using $ENGINE_PAR_STEPMOD_STEP_VALUE.
[2024-05-09 18:59:20] For all other applications, set this parameter to -1.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Volume (0, 1000000, 1000000)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Volume)
[2024-05-09 18:59:20]     set_engine_par($ENGINE_PAR_VOLUME, $Volume, -1, -1, -1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] A knob controls the instrument volume.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_knob $Freq (0, 1000000, 1000000)
[2024-05-09 18:59:20]     declare ui_button $Bypass
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Freq)
[2024-05-09 18:59:20] ------------------------------ set_voice_limit ------------------------------
[2024-05-09 18:59:20] Page 191, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6849
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_voice_limit(<voice-type>, <value>)
[2024-05-09 18:59:20] Sets the voice limit for the Time Machine Pro mode of the Source module.
[2024-05-09 18:59:20] <voice-type>: The voice type, can be one of the following:
[2024-05-09 18:59:20] •  $NI_VL_TMPRO_STANDARD: Standard quality mode
[2024-05-09 18:59:20] •  $NI_VL_TMRPO_HQ: High quality mode
[2024-05-09 18:59:20] <value>: The voice limit of the Time Machine Pro mode.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Changing voice limits is an asynchronous operation. This means that one cannot
[2024-05-09 18:59:20] reliably access the newly allocated voices immediately after instantiation. To resolve this,
[2024-05-09 18:59:20] the set_voice_limit() command returns an $NI_ASYNC_ID and triggers the on
[2024-05-09 18:59:20] async_complete callback.
[2024-05-09 18:59:20] •     Use this command to adjust the memory requirement of your instrument. Time Machine Pro
[2024-05-09 18:59:20] uses its own memory allocation that is separate from memory used by loaded samples. This
[2024-05-09 18:59:20] can be monitored in Kontakt's side pane, Monitor → Engine tab.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $change_voices_id
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_value_edit $Voices (1, 8, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent($Voices)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Voices)
[2024-05-09 18:59:20]     $change_voices_id := set_voice_limit($NI_VL_TMPRO_STANDARD, $Voices)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $change_voices_id)
[2024-05-09 18:59:20]         message("New TMPro Std Voice Limit: " &
[2024-05-09 18:59:20] get_voice_limit($NI_VL_TMPRO_STANDARD))
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Changing TM Pro voice limits.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] get_voice_limit()
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 16. Engine Parameter Commands
[2024-05-09 18:59:20] Category: set_voice_limit()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_voice_limit
[2024-05-09 18:59:20] Parameters: voice-type,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the voice limit for the Time Machine Pro mode of the Source module.
[2024-05-09 18:59:20] <voice-type>: The voice type, can be one of the following:
[2024-05-09 18:59:20] - $NI_VL_TMPRO_STANDARD: Standard quality mode
[2024-05-09 18:59:20] - $NI_VL_TMRPO_HQ: High quality mode
[2024-05-09 18:59:20] <value>: The voice limit of the Time Machine Pro mode.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Changing voice limits is an asynchronous operation. This means that one cannot
[2024-05-09 18:59:20] reliably access the newly allocated voices immediately after instantiation. To resolve this,
[2024-05-09 18:59:20] the set_voice_limit() command returns an $NI_ASYNC_ID and triggers the on
[2024-05-09 18:59:20] async_complete callback.
[2024-05-09 18:59:20] - Use this command to adjust the memory requirement of your instrument. Time Machine Pro
[2024-05-09 18:59:20] uses its own memory allocation that is separate from memory used by loaded samples. This
[2024-05-09 18:59:20] can be monitored in Kontakt's side pane, Monitor → Engine tab.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $change_voices_id
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_value_edit $Voices (1, 8, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent($Voices)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Voices)
[2024-05-09 18:59:20]     $change_voices_id := set_voice_limit($NI_VL_TMPRO_STANDARD, $Voices)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $change_voices_id)
[2024-05-09 18:59:20]         message("New TMPro Std Voice Limit: " &
[2024-05-09 18:59:20] get_voice_limit($NI_VL_TMPRO_STANDARD))
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Changing TM Pro voice limits.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] get_voice_limit()
[2024-05-09 18:59:20] ------------------------------ get_loop_par ------------------------------
[2024-05-09 18:59:20] Page 194, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6946
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_loop_par(<zone-id>, <loop-index>, <parameter>)
[2024-05-09 18:59:20] Returns the value of a particular loop parameter of a zone.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <loop-index>: The index of the loop (0 ... 7).
[2024-05-09 18:59:20] <parameter>: The following parameters are available:
[2024-05-09 18:59:20] $LOOP_PAR_MODE
[2024-05-09 18:59:20] $LOOP_PAR_START
[2024-05-09 18:59:20] $LOOP_PAR_LENGTH
[2024-05-09 18:59:20] $LOOP_PAR_XFADE
[2024-05-09 18:59:20] $LOOP_PAR_COUNT
[2024-05-09 18:59:20] $LOOP_PAR_TUNING
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  get_loop_par() works on both normal and user zones.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] message(get_loop_par($myZoneId, 0, $LOOP_PAR_MODE))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_loop_par()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: get_loop_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_loop_par
[2024-05-09 18:59:20] Parameters: zone-id,loop-index,parameter
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the value of a particular loop parameter of a zone.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <loop-index>: The index of the loop (0 ... 7).
[2024-05-09 18:59:20] <parameter>: The following parameters are available:
[2024-05-09 18:59:20] $LOOP_PAR_MODE
[2024-05-09 18:59:20] $LOOP_PAR_START
[2024-05-09 18:59:20] $LOOP_PAR_LENGTH
[2024-05-09 18:59:20] $LOOP_PAR_XFADE
[2024-05-09 18:59:20] $LOOP_PAR_COUNT
[2024-05-09 18:59:20] $LOOP_PAR_TUNING
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - get_loop_par() works on both normal and user zones.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] message(get_loop_par($myZoneId, 0, $LOOP_PAR_MODE))
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_loop_par()
[2024-05-09 18:59:20] ------------------------------ get_num_zones ------------------------------
[2024-05-09 18:59:20] Page 195, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6971
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_num_zones()
[2024-05-09 18:59:20] Returns the total number of all zones that are present in the instrument (normal and user zones).
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message(get_num_zones())
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Quite self-explanatory.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: get_num_zones()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_num_zones
[2024-05-09 18:59:20] Parameters:
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the total number of all zones that are present in the instrument (normal and user zones).
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message(get_num_zones())
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Quite self-explanatory.
[2024-05-09 18:59:20] ------------------------------ get_sample ------------------------------
[2024-05-09 18:59:20] Page 196, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 6984
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_sample(<zone-id>, <return-parameter>)
[2024-05-09 18:59:20] Returns paths, file names and extensions of samples.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <return-parameter>: The following parameters are available:$NI_FILE_NAME
[2024-05-09 18:59:20] $NI_FILE_FULL_PATH
[2024-05-09 18:59:20] $NI_FILE_FULL_PATH_OS
[2024-05-09 18:59:20] $NI_FILE_EXTENSION
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  get_sample() works on both normal and user zones.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] message(get_sample(%NI_USER_ZONE_IDS[0], $NI_FILE_NAME))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_sample()
[2024-05-09 18:59:20] Sample Parameters
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: get_sample()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_sample
[2024-05-09 18:59:20] Parameters: zone-id,return-parameter
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns paths, file names and extensions of samples.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <return-parameter>: The following parameters are available:$NI_FILE_NAME
[2024-05-09 18:59:20] $NI_FILE_FULL_PATH
[2024-05-09 18:59:20] $NI_FILE_FULL_PATH_OS
[2024-05-09 18:59:20] $NI_FILE_EXTENSION
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - get_sample() works on both normal and user zones.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] message(get_sample(%NI_USER_ZONE_IDS[0], $NI_FILE_NAME))
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_sample()
[2024-05-09 18:59:20] Sample Parameters
[2024-05-09 18:59:20] ------------------------------ get_sel_zones_idx ------------------------------
[2024-05-09 18:59:20] Page 197, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7006
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_sel_zones_idx(<array-name>)
[2024-05-09 18:59:20] Fills the specified array with indices of all selected zones in Kontakt's Mapping Editor.
[2024-05-09 18:59:20] <array-name>: Array to be filled with indices of selected zones.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The command overwrites all existing values as long as there are selected zones. If there
[2024-05-09 18:59:20] are more selected zones than array indices, the array will be filled until it is full, ignoring the
[2024-05-09 18:59:20] remaining selected zones.
[2024-05-09 18:59:20] •     If there are less selected zones than array indices, the array will be filled from the beginning
[2024-05-09 18:59:20] with all selected zone indices, followed by one array index with its value set to -1.
[2024-05-09 18:59:20] •     This command allows relative adjustment of various zone parameters like zone volume, pan,
[2024-05-09 18:59:20] tune, etc.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_snapshot_type(3) { Must be 2 or 3 or else set_zone_par works only on user
[2024-05-09 18:59:20] zones }
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $a
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare %sel_zones[1000]
[2024-05-09 18:59:20]     declare %zone_par[4] := ($ZONE_PAR_VOLUME, $ZONE_PAR_VOLUME, $ZONE_PAR_TUNE,
[2024-05-09 18:59:20] $ZONE_PAR_TUNE)
[2024-05-09 18:59:20]     declare %offset[4] := (-1, 1, -1, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     { pressing the lowest A on an 88-key MIDI controler will gather all selected
[2024-05-09 18:59:20] zones }
[2024-05-09 18:59:20]     if ($EVENT_NOTE = 21)
[2024-05-09 18:59:20]         get_sel_zones_idx(%sel_zones)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     { pressing the following 4 keys will adjust volume down and up 0.01 dB, then
[2024-05-09 18:59:20] tuning down and up 1 cent }
[2024-05-09 18:59:20]     if (in_range($EVENT_NOTE, 22, 25))
[2024-05-09 18:59:20]         ignore_event($EVENT_ID)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         $a := $EVENT_NOTE - 22
[2024-05-09 18:59:20]         $i := 0
[2024-05-09 18:59:20]         while ($i < num_elements(%sel_zones))
[2024-05-09 18:59:20]             if (%sel_zones[$i] > -1)
[2024-05-09 18:59:20]                 set_zone_par(%sel_zones[$i], ...
[2024-05-09 18:59:20]                              %zone_par[$a], ...
[2024-05-09 18:59:20]                              get_zone_par(%sel_zones[$i], %zone_par[$a]) +
[2024-05-09 18:59:20] %offset[$a])
[2024-05-09 18:59:20]             end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]             inc($i)
[2024-05-09 18:59:20]         end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         exit
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: get_sel_zones_idx()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_sel_zones_idx
[2024-05-09 18:59:20] Parameters: array-name
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Fills the specified array with indices of all selected zones in Kontakt's Mapping Editor.
[2024-05-09 18:59:20] <array-name>: Array to be filled with indices of selected zones.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The command overwrites all existing values as long as there are selected zones. If there
[2024-05-09 18:59:20] are more selected zones than array indices, the array will be filled until it is full, ignoring the
[2024-05-09 18:59:20] remaining selected zones.
[2024-05-09 18:59:20] - If there are less selected zones than array indices, the array will be filled from the beginning
[2024-05-09 18:59:20] with all selected zone indices, followed by one array index with its value set to -1.
[2024-05-09 18:59:20] - This command allows relative adjustment of various zone parameters like zone volume, pan,
[2024-05-09 18:59:20] tune, etc.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_snapshot_type(3) { Must be 2 or 3 or else set_zone_par works only on user
[2024-05-09 18:59:20] zones }
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $a
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare %sel_zones[1000]
[2024-05-09 18:59:20]     declare %zone_par[4] := ($ZONE_PAR_VOLUME, $ZONE_PAR_VOLUME, $ZONE_PAR_TUNE,
[2024-05-09 18:59:20] $ZONE_PAR_TUNE)
[2024-05-09 18:59:20]     declare %offset[4] := (-1, 1, -1, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on note
[2024-05-09 18:59:20]     { pressing the lowest A on an 88-key MIDI controler will gather all selected
[2024-05-09 18:59:20] zones }
[2024-05-09 18:59:20]     if ($EVENT_NOTE = 21)
[2024-05-09 18:59:20]         get_sel_zones_idx(%sel_zones)
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     { pressing the following 4 keys will adjust volume down and up 0.01 dB, then
[2024-05-09 18:59:20] tuning down and up 1 cent }
[2024-05-09 18:59:20]     if (in_range($EVENT_NOTE, 22, 25))
[2024-05-09 18:59:20]         ignore_event($EVENT_ID)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         $a := $EVENT_NOTE - 22
[2024-05-09 18:59:20]         $i := 0
[2024-05-09 18:59:20]         while ($i < num_elements(%sel_zones))
[2024-05-09 18:59:20]             if (%sel_zones[$i] > -1)
[2024-05-09 18:59:20]                 set_zone_par(%sel_zones[$i], ...
[2024-05-09 18:59:20]                              %zone_par[$a], ...
[2024-05-09 18:59:20]                              get_zone_par(%sel_zones[$i], %zone_par[$a]) +
[2024-05-09 18:59:20] %offset[$a])
[2024-05-09 18:59:20]             end if
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]             inc($i)
[2024-05-09 18:59:20]         end while
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         exit
[2024-05-09 18:59:20] ------------------------------ steps ------------------------------
[2024-05-09 18:59:20] Page 198, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7069
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] steps
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: get_sel_zones_idx()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: steps
[2024-05-09 18:59:20] Parameters:
[2024-05-09 18:59:20] ------------------------------ get_zone_id ------------------------------
[2024-05-09 18:59:20] Page 199, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7074
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_zone_id(<zone-index>)
[2024-05-09 18:59:20] Returns the ID of the zone with the specified zone index.
[2024-05-09 18:59:20] <zone-index>: Index of the zone (see Index column in Monitor → Zones pane in Kontakt) .
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_snapshot_type(3) { Must be 2 or 3 or else set_zone_par works only on user
[2024-05-09 18:59:20] zones }
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_slider $slider (0, 127)
[2024-05-09 18:59:20]     declare ui_label $label (1, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $slider := get_zone_par(get_zone_id(0), $ZONE_PAR_ROOT_KEY)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     message("This instrument contains " & get_num_zones() & " zones.")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($slider)
[2024-05-09 18:59:20]     set_zone_par(get_zone_id(0), $ZONE_PAR_ROOT_KEY, $slider)
[2024-05-09 18:59:20]     set_text($label, get_zone_par(0, $ZONE_PAR_ROOT_KEY))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Adjusting the root key of the first zone in the instrument.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: get_zone_id()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_zone_id
[2024-05-09 18:59:20] Parameters: zone-index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the ID of the zone with the specified zone index.
[2024-05-09 18:59:20] <zone-index>: Index of the zone (see Index column in Monitor → Zones pane in Kontakt) .
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_snapshot_type(3) { Must be 2 or 3 or else set_zone_par works only on user
[2024-05-09 18:59:20] zones }
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_slider $slider (0, 127)
[2024-05-09 18:59:20]     declare ui_label $label (1, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $slider := get_zone_par(get_zone_id(0), $ZONE_PAR_ROOT_KEY)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     message("This instrument contains " & get_num_zones() & " zones.")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($slider)
[2024-05-09 18:59:20]     set_zone_par(get_zone_id(0), $ZONE_PAR_ROOT_KEY, $slider)
[2024-05-09 18:59:20]     set_text($label, get_zone_par(0, $ZONE_PAR_ROOT_KEY))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Adjusting the root key of the first zone in the instrument.
[2024-05-09 18:59:20] ------------------------------ get_zone_par ------------------------------
[2024-05-09 18:59:20] Page 200, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7101
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_zone_par(<zone-id>, <parameter>)
[2024-05-09 18:59:20] Returns the value of a particular zone parameter.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <parameter>: The following parameters are available:
[2024-05-09 18:59:20] $ZONE_PAR_HIGH_KEY
[2024-05-09 18:59:20] $ZONE_PAR_LOW_KEY
[2024-05-09 18:59:20] $ZONE_PAR_HIGH_VELO
[2024-05-09 18:59:20] $ZONE_PAR_LOW_VELO
[2024-05-09 18:59:20] $ZONE_PAR_ROOT_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_LOW_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_HIGH_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_LOW_VELO
[2024-05-09 18:59:20] $ZONE_PAR_FADE_HIGH_VELO
[2024-05-09 18:59:20] $ZONE_PAR_VOLUME
[2024-05-09 18:59:20] $ZONE_PAR_PAN
[2024-05-09 18:59:20] $ZONE_PAR_TUNE
[2024-05-09 18:59:20] $ZONE_PAR_GROUP
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_START
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_END
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_MOD_RANGE
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_RATE
[2024-05-09 18:59:20] $ZONE_PAR_SELECTED
[2024-05-09 18:59:20] $ZONE_PAR_BPM
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  get_zone_par() works on both normal and user zones.
[2024-05-09 18:59:20] •  $ZONE_PAR_BPM returns the BPM value multiplied by 1000, so 120 BPM would be 120000.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] get_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_PAN)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] set_zone_par()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: get_zone_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_zone_par
[2024-05-09 18:59:20] Parameters: zone-id,parameter
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the value of a particular zone parameter.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <parameter>: The following parameters are available:
[2024-05-09 18:59:20] $ZONE_PAR_HIGH_KEY
[2024-05-09 18:59:20] $ZONE_PAR_LOW_KEY
[2024-05-09 18:59:20] $ZONE_PAR_HIGH_VELO
[2024-05-09 18:59:20] $ZONE_PAR_LOW_VELO
[2024-05-09 18:59:20] $ZONE_PAR_ROOT_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_LOW_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_HIGH_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_LOW_VELO
[2024-05-09 18:59:20] $ZONE_PAR_FADE_HIGH_VELO
[2024-05-09 18:59:20] $ZONE_PAR_VOLUME
[2024-05-09 18:59:20] $ZONE_PAR_PAN
[2024-05-09 18:59:20] $ZONE_PAR_TUNE
[2024-05-09 18:59:20] $ZONE_PAR_GROUP
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_START
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_END
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_MOD_RANGE
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_RATE
[2024-05-09 18:59:20] $ZONE_PAR_SELECTED
[2024-05-09 18:59:20] $ZONE_PAR_BPM
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - get_zone_par() works on both normal and user zones.
[2024-05-09 18:59:20] - $ZONE_PAR_BPM returns the BPM value multiplied by 1000, so 120 BPM would be 120000.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] get_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_PAN)
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] set_zone_par()
[2024-05-09 18:59:20] ------------------------------ get_zone_status ------------------------------
[2024-05-09 18:59:20] Page 201, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7139
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_zone_status(<zone-ID>)
[2024-05-09 18:59:20] Queries the status of the zone ID in question. Zone status has four possible states:
[2024-05-09 18:59:20] •  $NI_ZONE_STATUS_EMPTY Zone is a user zone and has no sample loaded
[2024-05-09 18:59:20] •  $NI_ZONE_STATUS_LOADED Zone is a user zone and has a sample loaded
[2024-05-09 18:59:20] •  $NI_ZONE_STATUS_PURGED Zone is purged from memory (valid for both regular and user
[2024-05-09 18:59:20] zones)
[2024-05-09 18:59:20] •  $NI_ZONE_STATUS_IGNORED Zone is ignored by the user response in the Content Missing
[2024-05-09 18:59:20] dialog (valid for both regular and user zones)
[2024-05-09 18:59:20] <zone-ID>: The ID of the zone.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command requires a valid zone ID that exists in the instrument. For example, if when
[2024-05-09 18:59:20] using get_event_par() a zone ID is not found (which would happen when attempting
[2024-05-09 18:59:20] playback of an empty user zone or a purged zone), get_zone_status() will throw a script
[2024-05-09 18:59:20] warning.
[2024-05-09 18:59:20] •  get_zone_status() works on both normal and user zones.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_value_edit $ZoneID (0, 1000, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($ZoneID)
[2024-05-09 18:59:20]     select (get_zone_status($ZoneID))
[2024-05-09 18:59:20]         case $NI_ZONE_STATUS_EMPTY
[2024-05-09 18:59:20]             message("Zone ID " & $zoneID & " is empty!")
[2024-05-09 18:59:20]         case $NI_ZONE_STATUS_LOADED
[2024-05-09 18:59:20]             message("Zone ID " & $zoneID & " is loaded!")
[2024-05-09 18:59:20]         case $NI_ZONE_STATUS_PURGED
[2024-05-09 18:59:20]             message("Zone ID " & $zoneID & " is purged!")
[2024-05-09 18:59:20]         case $NI_ZONE_STATUS_IGNORED
[2024-05-09 18:59:20]             message("Zone ID " & $zoneID & " is ignored!")
[2024-05-09 18:59:20]     end select
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Query the status of the first 1001 zone IDs.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: get_zone_status()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_zone_status
[2024-05-09 18:59:20] Parameters: zone-ID
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Queries the status of the zone ID in question. Zone status has four possible states:
[2024-05-09 18:59:20] - $NI_ZONE_STATUS_EMPTY Zone is a user zone and has no sample loaded
[2024-05-09 18:59:20] - $NI_ZONE_STATUS_LOADED Zone is a user zone and has a sample loaded
[2024-05-09 18:59:20] - $NI_ZONE_STATUS_PURGED Zone is purged from memory (valid for both regular and user
[2024-05-09 18:59:20] zones)
[2024-05-09 18:59:20] - $NI_ZONE_STATUS_IGNORED Zone is ignored by the user response in the Content Missing
[2024-05-09 18:59:20] dialog (valid for both regular and user zones)
[2024-05-09 18:59:20] <zone-ID>: The ID of the zone.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command requires a valid zone ID that exists in the instrument. For example, if when
[2024-05-09 18:59:20] using get_event_par() a zone ID is not found (which would happen when attempting
[2024-05-09 18:59:20] playback of an empty user zone or a purged zone), get_zone_status() will throw a script
[2024-05-09 18:59:20] warning.
[2024-05-09 18:59:20] - get_zone_status() works on both normal and user zones.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare ui_value_edit $ZoneID (0, 1000, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($ZoneID)
[2024-05-09 18:59:20]     select (get_zone_status($ZoneID))
[2024-05-09 18:59:20]         case $NI_ZONE_STATUS_EMPTY
[2024-05-09 18:59:20]             message("Zone ID " & $zoneID & " is empty!")
[2024-05-09 18:59:20]         case $NI_ZONE_STATUS_LOADED
[2024-05-09 18:59:20]             message("Zone ID " & $zoneID & " is loaded!")
[2024-05-09 18:59:20]         case $NI_ZONE_STATUS_PURGED
[2024-05-09 18:59:20]             message("Zone ID " & $zoneID & " is purged!")
[2024-05-09 18:59:20]         case $NI_ZONE_STATUS_IGNORED
[2024-05-09 18:59:20]             message("Zone ID " & $zoneID & " is ignored!")
[2024-05-09 18:59:20]     end select
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Query the status of the first 1001 zone IDs.
[2024-05-09 18:59:20] ------------------------------ set_loop_par ------------------------------
[2024-05-09 18:59:20] Page 202, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7179
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_loop_par(<zone-id>, <loop-index>, <parameter>, <value>)
[2024-05-09 18:59:20] Sets the loop parameters of a user zone.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <loop-index>: The index of the loop (0 ... 7).
[2024-05-09 18:59:20] <parameter>: The following parameters are available:
[2024-05-09 18:59:20] $LOOP_PAR_MODE
[2024-05-09 18:59:20] $LOOP_PAR_START
[2024-05-09 18:59:20] $LOOP_PAR_LENGTH
[2024-05-09 18:59:20] $LOOP_PAR_XFADE
[2024-05-09 18:59:20] $LOOP_PAR_COUNT
[2024-05-09 18:59:20] $LOOP_PAR_TUNING
[2024-05-09 18:59:20] <value>: The value of the loop parameter.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  set_loop_par() only works on user zones.
[2024-05-09 18:59:20] •     When executed in the on init callback, this function runs synchronously and returns -1.
[2024-05-09 18:59:20] •     When executed outside of the on init callback, this function returns an async ID and triggers
[2024-05-09 18:59:20] the on async_complete callback.
[2024-05-09 18:59:20] •     Since Kontakt 7.2, the performance of this command has been improved. Previously, every
[2024-05-09 18:59:20] execution of this command required suspending then resuming the audio engine. Moving
[2024-05-09 18:59:20] forward, execution of this command has been delayed until the first wait() command, or
[2024-05-09 18:59:20] until the end of the callback, whichever comes first. So, if it is required to set a lot of zone
[2024-05-09 18:59:20] parameters in batch, it is recommended to first collect all the async IDs into an array, and only
[2024-05-09 18:59:20] then run any wait() commands, as shown in the description of wait_async() command.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] wait_async(set_loop_par(%NI_USER_ZONE_IDS[0], 0, $LOOP_PAR_MODE, $SampleLoopOnA))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] get_loop_par()
[2024-05-09 18:59:20] wait_async()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: set_loop_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_loop_par
[2024-05-09 18:59:20] Parameters: zone-id,loop-index,parameter,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the loop parameters of a user zone.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <loop-index>: The index of the loop (0 ... 7).
[2024-05-09 18:59:20] <parameter>: The following parameters are available:
[2024-05-09 18:59:20] $LOOP_PAR_MODE
[2024-05-09 18:59:20] $LOOP_PAR_START
[2024-05-09 18:59:20] $LOOP_PAR_LENGTH
[2024-05-09 18:59:20] $LOOP_PAR_XFADE
[2024-05-09 18:59:20] $LOOP_PAR_COUNT
[2024-05-09 18:59:20] $LOOP_PAR_TUNING
[2024-05-09 18:59:20] <value>: The value of the loop parameter.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - set_loop_par() only works on user zones.
[2024-05-09 18:59:20] - When executed in the on init callback, this function runs synchronously and returns -1.
[2024-05-09 18:59:20] - When executed outside of the on init callback, this function returns an async ID and triggers
[2024-05-09 18:59:20] the on async_complete callback.
[2024-05-09 18:59:20] - Since Kontakt 7.2, the performance of this command has been improved. Previously, every
[2024-05-09 18:59:20] execution of this command required suspending then resuming the audio engine. Moving
[2024-05-09 18:59:20] forward, execution of this command has been delayed until the first wait() command, or
[2024-05-09 18:59:20] until the end of the callback, whichever comes first. So, if it is required to set a lot of zone
[2024-05-09 18:59:20] parameters in batch, it is recommended to first collect all the async IDs into an array, and only
[2024-05-09 18:59:20] then run any wait() commands, as shown in the description of wait_async() command.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] wait_async(set_loop_par(%NI_USER_ZONE_IDS[0], 0, $LOOP_PAR_MODE, $SampleLoopOnA))
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] get_loop_par()
[2024-05-09 18:59:20] wait_async()
[2024-05-09 18:59:20] ------------------------------ set_num_user_zones ------------------------------
[2024-05-09 18:59:20] Page 203, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7215
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_num_user_zones(<value>)
[2024-05-09 18:59:20] Creates empty user zones.
[2024-05-09 18:59:20] <value>: Defines the number of user zones to be created. %NI_USER_ZONE_IDS is the
[2024-05-09 18:59:20] array of size <value> with all the user zone IDs.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     A maximum of 1024 user zones per instrument can be created.
[2024-05-09 18:59:20] •     User zones are shown with a different color in Kontakt's Mapping Editor.
[2024-05-09 18:59:20] •     User zones cannot be modified from Mapping Editor or Wave Editor.
[2024-05-09 18:59:20] •     In order to manipulate the user zones, the IDs stored in the %NI_USER_ZONE_IDS array
[2024-05-09 18:59:20] should be used instead of the hard-coded zone IDs.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_num_user_zones(2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, 0)
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[1], $ZONE_PAR_GROUP, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Create two empty zones and place each to its own group.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: set_num_user_zones()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_num_user_zones
[2024-05-09 18:59:20] Parameters: value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Creates empty user zones.
[2024-05-09 18:59:20] <value>: Defines the number of user zones to be created. %NI_USER_ZONE_IDS is the
[2024-05-09 18:59:20] array of size <value> with all the user zone IDs.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - A maximum of 1024 user zones per instrument can be created.
[2024-05-09 18:59:20] - User zones are shown with a different color in Kontakt's Mapping Editor.
[2024-05-09 18:59:20] - User zones cannot be modified from Mapping Editor or Wave Editor.
[2024-05-09 18:59:20] - In order to manipulate the user zones, the IDs stored in the %NI_USER_ZONE_IDS array
[2024-05-09 18:59:20] should be used instead of the hard-coded zone IDs.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     set_num_user_zones(2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, 0)
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[1], $ZONE_PAR_GROUP, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Create two empty zones and place each to its own group.
[2024-05-09 18:59:20] ------------------------------ set_sample ------------------------------
[2024-05-09 18:59:20] Page 204, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7240
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_sample(<zone-id>, <path>)
[2024-05-09 18:59:20] Sets the user sample in a zone.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <path>: The file path to the sample to be loaded.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  set_sample() only works on user zones.
[2024-05-09 18:59:20] •     When executed in the on init callback, this function runs synchronously and returns -1.
[2024-05-09 18:59:20] •     When executed outside of the on init callback, this function returns an async ID and triggers
[2024-05-09 18:59:20] the on async_complete callback.
[2024-05-09 18:59:20] •     Since Kontakt 7.2, the performance of this command has been improved. Previously, every
[2024-05-09 18:59:20] execution of this command required suspending then resuming the audio engine. Moving
[2024-05-09 18:59:20] forward, execution of this command has been delayed until the first wait() command, or
[2024-05-09 18:59:20] until the end of the callback, whichever comes first. So, if it is required to set a lot of zone
[2024-05-09 18:59:20] parameters in batch, it is recommended to first collect all the async IDs into an array, and only
[2024-05-09 18:59:20] then run any wait() commands, as shown in the description of wait_async() command.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($myMouseArea)
[2024-05-09 18:59:20]     if ($NI_MOUSE_EVENT_TYPE = $NI_MOUSE_EVENT_TYPE_DROP)
[2024-05-09 18:59:20]         if (num_elements(!NI_DND_ITEMS_AUDIO) = 1)
[2024-05-09 18:59:20]             wait_async(set_sample(%NI_USER_ZONE_IDS[0], !NI_DND_ITEMS_AUDIO[0]))
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] get_sample()
[2024-05-09 18:59:20] wait_async()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: set_sample()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_sample
[2024-05-09 18:59:20] Parameters: zone-id,path
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the user sample in a zone.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <path>: The file path to the sample to be loaded.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - set_sample() only works on user zones.
[2024-05-09 18:59:20] - When executed in the on init callback, this function runs synchronously and returns -1.
[2024-05-09 18:59:20] - When executed outside of the on init callback, this function returns an async ID and triggers
[2024-05-09 18:59:20] the on async_complete callback.
[2024-05-09 18:59:20] - Since Kontakt 7.2, the performance of this command has been improved. Previously, every
[2024-05-09 18:59:20] execution of this command required suspending then resuming the audio engine. Moving
[2024-05-09 18:59:20] forward, execution of this command has been delayed until the first wait() command, or
[2024-05-09 18:59:20] until the end of the callback, whichever comes first. So, if it is required to set a lot of zone
[2024-05-09 18:59:20] parameters in batch, it is recommended to first collect all the async IDs into an array, and only
[2024-05-09 18:59:20] then run any wait() commands, as shown in the description of wait_async() command.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on ui_control ($myMouseArea)
[2024-05-09 18:59:20]     if ($NI_MOUSE_EVENT_TYPE = $NI_MOUSE_EVENT_TYPE_DROP)
[2024-05-09 18:59:20]         if (num_elements(!NI_DND_ITEMS_AUDIO) = 1)
[2024-05-09 18:59:20]             wait_async(set_sample(%NI_USER_ZONE_IDS[0], !NI_DND_ITEMS_AUDIO[0]))
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] get_sample()
[2024-05-09 18:59:20] wait_async()
[2024-05-09 18:59:20] ------------------------------ set_zone_par ------------------------------
[2024-05-09 18:59:20] Page 205, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7274
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] set_zone_par(<zone-id>, <parameter>, <value>)
[2024-05-09 18:59:20] Sets the user zone parameters.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <parameter>: The following flags are available:
[2024-05-09 18:59:20] $ZONE_PAR_HIGH_KEY
[2024-05-09 18:59:20] $ZONE_PAR_LOW_KEY
[2024-05-09 18:59:20] $ZONE_PAR_HIGH_VELO
[2024-05-09 18:59:20] $ZONE_PAR_LOW_VELO
[2024-05-09 18:59:20] $ZONE_PAR_ROOT_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_LOW_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_HIGH_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_LOW_VELO
[2024-05-09 18:59:20] $ZONE_PAR_FADE_HIGH_VELO
[2024-05-09 18:59:20] $ZONE_PAR_VOLUME
[2024-05-09 18:59:20] $ZONE_PAR_PAN
[2024-05-09 18:59:20] $ZONE_PAR_TUNE
[2024-05-09 18:59:20] $ZONE_PAR_GROUP
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_START
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_END
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_MOD_RANGE
[2024-05-09 18:59:20] $ZONE_PAR_BPM
[2024-05-09 18:59:20] <value>: The value of the zone parameter
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •  set_zone_par() only works on user zones when using snapshot modes 0 and 1. In case of
[2024-05-09 18:59:20] using snapshot modes 2 and 3, set_zone_par() will work on both normal and user zones,
[2024-05-09 18:59:20] from any callback (please excercise caution with "fast" callback types, like on controller or
[2024-05-09 18:59:20] on listener)!
[2024-05-09 18:59:20] •     When executed in the on init callback, this function runs synchronously and returns -1.
[2024-05-09 18:59:20] •     When executed outside of the on init callback, this function returns an async ID and triggers
[2024-05-09 18:59:20] the on async_complete callback.
[2024-05-09 18:59:20] •  $ZONE_PAR_BPM requires an input value multiplied by 1000, so 120 BPM would be 120000.
[2024-05-09 18:59:20] Valid BPM input range is 0.1 to 400 BPM. Setting the BPM is not supported for REX files!
[2024-05-09 18:59:20] •     Since Kontakt 7.2, the performance of this command has been improved. Previously, every
[2024-05-09 18:59:20] execution of this command required suspending then resuming the audio engine. Moving
[2024-05-09 18:59:20] forward, execution of this command has been delayed until the first wait() command, or
[2024-05-09 18:59:20] until the end of the callback, whichever comes first. So, if it is required to set a lot of zone
[2024-05-09 18:59:20] parameters in batch, it is recommended to first collect all the async IDs into an array, and only
[2024-05-09 18:59:20] then run any wait() commands, as shown in the description of wait_async() command.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, 0)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 17. Zone Commands
[2024-05-09 18:59:20] Category: set_zone_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: set_zone_par
[2024-05-09 18:59:20] Parameters: zone-id,parameter,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the user zone parameters.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <parameter>: The following flags are available:
[2024-05-09 18:59:20] $ZONE_PAR_HIGH_KEY
[2024-05-09 18:59:20] $ZONE_PAR_LOW_KEY
[2024-05-09 18:59:20] $ZONE_PAR_HIGH_VELO
[2024-05-09 18:59:20] $ZONE_PAR_LOW_VELO
[2024-05-09 18:59:20] $ZONE_PAR_ROOT_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_LOW_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_HIGH_KEY
[2024-05-09 18:59:20] $ZONE_PAR_FADE_LOW_VELO
[2024-05-09 18:59:20] $ZONE_PAR_FADE_HIGH_VELO
[2024-05-09 18:59:20] $ZONE_PAR_VOLUME
[2024-05-09 18:59:20] $ZONE_PAR_PAN
[2024-05-09 18:59:20] $ZONE_PAR_TUNE
[2024-05-09 18:59:20] $ZONE_PAR_GROUP
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_START
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_END
[2024-05-09 18:59:20] $ZONE_PAR_SAMPLE_MOD_RANGE
[2024-05-09 18:59:20] $ZONE_PAR_BPM
[2024-05-09 18:59:20] <value>: The value of the zone parameter
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - set_zone_par() only works on user zones when using snapshot modes 0 and 1. In case of
[2024-05-09 18:59:20] using snapshot modes 2 and 3, set_zone_par() will work on both normal and user zones,
[2024-05-09 18:59:20] from any callback (please excercise caution with "fast" callback types, like on controller or
[2024-05-09 18:59:20] on listener)!
[2024-05-09 18:59:20] - When executed in the on init callback, this function runs synchronously and returns -1.
[2024-05-09 18:59:20] - When executed outside of the on init callback, this function returns an async ID and triggers
[2024-05-09 18:59:20] the on async_complete callback.
[2024-05-09 18:59:20] - $ZONE_PAR_BPM requires an input value multiplied by 1000, so 120 BPM would be 120000.
[2024-05-09 18:59:20] Valid BPM input range is 0.1 to 400 BPM. Setting the BPM is not supported for REX files!
[2024-05-09 18:59:20] - Since Kontakt 7.2, the performance of this command has been improved. Previously, every
[2024-05-09 18:59:20] execution of this command required suspending then resuming the audio engine. Moving
[2024-05-09 18:59:20] forward, execution of this command has been delayed until the first wait() command, or
[2024-05-09 18:59:20] until the end of the callback, whichever comes first. So, if it is required to set a lot of zone
[2024-05-09 18:59:20] parameters in batch, it is recommended to first collect all the async IDs into an array, and only
[2024-05-09 18:59:20] then run any wait() commands, as shown in the description of wait_async() command.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, 0)
[2024-05-09 18:59:20] ------------------------------ get_folder ------------------------------
[2024-05-09 18:59:20] Page 208, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7361
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] get_folder(<path-variable>)
[2024-05-09 18:59:20] Returns the path specified with the built-in path variable.
[2024-05-09 18:59:20] <path-variable>: The following path variables are available:$GET_FOLDER_LIBRARY_DIR
[2024-05-09 18:59:20] If used with an NKI which belongs to a Kontakt Player encoded library: library
[2024-05-09 18:59:20] folder.
[2024-05-09 18:59:20] If used with an unencoded NKI: the User Content folder, which is found as
[2024-05-09 18:59:20] follows:
[2024-05-09 18:59:20] macOS: /Users/<UserName>/Documents/Native Instruments/User
[2024-05-09 18:59:20] Content/
[2024-05-09 18:59:20] Windows: C:\Users\<UserName>\Documents\Native
[2024-05-09 18:59:20] Instruments\User Content\
[2024-05-09 18:59:20] $GET_FOLDER_FACTORY_DIR
[2024-05-09 18:59:20] The factory data folder of Kontakt, mainly used for loading factory IR samples.
[2024-05-09 18:59:20] Note: this is not the Kontakt Factory Library folder!
[2024-05-09 18:59:20] $GET_FOLDER_PATCH_DIR
[2024-05-09 18:59:20] The folder in which the patch was saved.
[2024-05-09 18:59:20] If the patch was not saved before, an empty string is returned.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Example
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message(get_folder($GET_FOLDER_FACTORY_DIR))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displaying the path of Kontakt's factory data folder.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] load_ir_sample()
[2024-05-09 18:59:20] General: $GET_FOLDER_LIBRARY_DIR, $GET_FOLDER_FACTORY_DIR,
[2024-05-09 18:59:20] $GET_FOLDER_PATCH_DIR
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 18. Load/Save Commands
[2024-05-09 18:59:20] Category: get_folder()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: get_folder
[2024-05-09 18:59:20] Parameters: path-variable
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the path specified with the built-in path variable.
[2024-05-09 18:59:20] <path-variable>: The following path variables are available:$GET_FOLDER_LIBRARY_DIR
[2024-05-09 18:59:20] If used with an NKI which belongs to a Kontakt Player encoded library: library
[2024-05-09 18:59:20] folder.
[2024-05-09 18:59:20] If used with an unencoded NKI: the User Content folder, which is found as
[2024-05-09 18:59:20] follows:
[2024-05-09 18:59:20] macOS: /Users/<UserName>/Documents/Native Instruments/User
[2024-05-09 18:59:20] Content/
[2024-05-09 18:59:20] Windows: C:\Users\<UserName>\Documents\Native
[2024-05-09 18:59:20] Instruments\User Content\
[2024-05-09 18:59:20] $GET_FOLDER_FACTORY_DIR
[2024-05-09 18:59:20] The factory data folder of Kontakt, mainly used for loading factory IR samples.
[2024-05-09 18:59:20] Note: this is not the Kontakt Factory Library folder!
[2024-05-09 18:59:20] $GET_FOLDER_PATCH_DIR
[2024-05-09 18:59:20] The folder in which the patch was saved.
[2024-05-09 18:59:20] If the patch was not saved before, an empty string is returned.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message(get_folder($GET_FOLDER_FACTORY_DIR))
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Displaying the path of Kontakt's factory data folder.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] load_ir_sample()
[2024-05-09 18:59:20] General: $GET_FOLDER_LIBRARY_DIR, $GET_FOLDER_FACTORY_DIR,
[2024-05-09 18:59:20] $GET_FOLDER_PATCH_DIR
[2024-05-09 18:59:20] ------------------------------ load_array ------------------------------
[2024-05-09 18:59:20] Page 209, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7394
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] load_array(<array-variable>, <mode>)
[2024-05-09 18:59:20] Loads an array from an external .nka file.
[2024-05-09 18:59:20] <array-variable>: The name of the array variable. This name must be present as the first line of the .nka file.
[2024-05-09 18:59:20] <mode>:  0: A dialog window pops up, allowing you to select an .nka file to load. This
[2024-05-09 18:59:20] mode can only be used in on persistence_changed, on ui_control and on
[2024-05-09 18:59:20] pgs_changed callbacks (asynchronously).
[2024-05-09 18:59:20] 1: The array is directly loaded from the Data folder.
[2024-05-09 18:59:20] For user instruments, the Data folder is located beside the resource container.
[2024-05-09 18:59:20] For Kontakt Player encoded library instruments, the Data folder is located here:
[2024-05-09 18:59:20] macOS: /Users/<UserName>/Library/Application Support/
[2024-05-09 18:59:20] <LibraryName>/
[2024-05-09 18:59:20] Windows: C:\Users\<UserName>\AppData\Local\<LibraryName>\
[2024-05-09 18:59:20] This mode can be used synchronously in on init, and asynchronously in on
[2024-05-09 18:59:20] persistence_changed, on ui_control and on pgs_changed callbacks.
[2024-05-09 18:59:20] 2: The array is directly loaded from the data folder inside the resource
[2024-05-09 18:59:20] container.
[2024-05-09 18:59:20] This mode can be used synchronously in on init, and asynchronously in on
[2024-05-09 18:59:20] persistence_changed, on ui_control and on pgs_changed callbacks.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     It is also possible to load real and string arrays from .nka files.
[2024-05-09 18:59:20] •     It is not possible to load an array named %xyz from an .nka file into array %abc. The variable
[2024-05-09 18:59:20] names have to match precisely.
[2024-05-09 18:59:20] •     The array data is not directly available after the load_array() command has been executed,
[2024-05-09 18:59:20] since the command works asynchronously. The only situation in which the values are instantly
[2024-05-09 18:59:20] available is when using mode 1 or mode 2 inside on init callback.
[2024-05-09 18:59:20] •     When using mode 0, the callback continues even if the loading dialog is still open.
[2024-05-09 18:59:20] •     When loading an array within the on init callback, please note that the array will implicitly be
[2024-05-09 18:59:20] made persistent (as if make_persistent() command was used) , which results in loaded data
[2024-05-09 18:59:20] being overwritten at the end of the callback. Use read_persistent_var() before loading the array
[2024-05-09 18:59:20] to avoid this problem.
[2024-05-09 18:59:20] •     .nka files loaded from the resource container should always have a newline character at
[2024-05-09 18:59:20] the end of the file. If this last newline is missing, Kontakt cannot know the file has ended
[2024-05-09 18:59:20] and will continue to try and load other data from the resource container. Files generated
[2024-05-09 18:59:20] by the save_array() command have this automatically, but if you are creating NKA files via
[2024-05-09 18:59:20] different means, this is something to be aware of.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Example
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare $load_arr_id := -1
[2024-05-09 18:59:20]     declare $save_arr_id := -1
[2024-05-09 18:59:20]     declare %preset[8]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Load
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 18. Load/Save Commands
[2024-05-09 18:59:20] Category: load_array()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: load_array
[2024-05-09 18:59:20] Parameters: array-variable,mode
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Loads an array from an external .nka file.
[2024-05-09 18:59:20] <array-variable>: The name of the array variable. This name must be present as the first line of the .nka file.
[2024-05-09 18:59:20] <mode>:  0: A dialog window pops up, allowing you to select an .nka file to load. This
[2024-05-09 18:59:20] mode can only be used in on persistence_changed, on ui_control and on
[2024-05-09 18:59:20] pgs_changed callbacks (asynchronously).
[2024-05-09 18:59:20] 1: The array is directly loaded from the Data folder.
[2024-05-09 18:59:20] For user instruments, the Data folder is located beside the resource container.
[2024-05-09 18:59:20] For Kontakt Player encoded library instruments, the Data folder is located here:
[2024-05-09 18:59:20] macOS: /Users/<UserName>/Library/Application Support/
[2024-05-09 18:59:20] <LibraryName>/
[2024-05-09 18:59:20] Windows: C:\Users\<UserName>\AppData\Local\<LibraryName>\
[2024-05-09 18:59:20] This mode can be used synchronously in on init, and asynchronously in on
[2024-05-09 18:59:20] persistence_changed, on ui_control and on pgs_changed callbacks.
[2024-05-09 18:59:20] 2: The array is directly loaded from the data folder inside the resource
[2024-05-09 18:59:20] container.
[2024-05-09 18:59:20] This mode can be used synchronously in on init, and asynchronously in on
[2024-05-09 18:59:20] persistence_changed, on ui_control and on pgs_changed callbacks.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - It is also possible to load real and string arrays from .nka files.
[2024-05-09 18:59:20] - It is not possible to load an array named %xyz from an .nka file into array %abc. The variable
[2024-05-09 18:59:20] names have to match precisely.
[2024-05-09 18:59:20] - The array data is not directly available after the load_array() command has been executed,
[2024-05-09 18:59:20] since the command works asynchronously. The only situation in which the values are instantly
[2024-05-09 18:59:20] available is when using mode 1 or mode 2 inside on init callback.
[2024-05-09 18:59:20] - When using mode 0, the callback continues even if the loading dialog is still open.
[2024-05-09 18:59:20] - When loading an array within the on init callback, please note that the array will implicitly be
[2024-05-09 18:59:20] made persistent (as if make_persistent() command was used) , which results in loaded data
[2024-05-09 18:59:20] being overwritten at the end of the callback. Use read_persistent_var() before loading the array
[2024-05-09 18:59:20] to avoid this problem.
[2024-05-09 18:59:20] - .nka files loaded from the resource container should always have a newline character at
[2024-05-09 18:59:20] the end of the file. If this last newline is missing, Kontakt cannot know the file has ended
[2024-05-09 18:59:20] and will continue to try and load other data from the resource container. Files generated
[2024-05-09 18:59:20] by the save_array() command have this automatically, but if you are creating NKA files via
[2024-05-09 18:59:20] different means, this is something to be aware of.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare $load_arr_id := -1
[2024-05-09 18:59:20]     declare $save_arr_id := -1
[2024-05-09 18:59:20]     declare %preset[8]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Load
[2024-05-09 18:59:20] ------------------------------ load_array_str ------------------------------
[2024-05-09 18:59:20] Page 211, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7498
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] load_array_str(<array-variable>, <path>)
[2024-05-09 18:59:20] Loads an array from an external .nka file, using an absolute path to the file.
[2024-05-09 18:59:20] <array-variable>: The name of the array variable, this must be present as the first line of the .nka file.
[2024-05-09 18:59:20] <path>:  The absolute path of the .nka file.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The behaviour is similar to load_array() with mode set to 0, but instead of manually choosing
[2024-05-09 18:59:20] an .nka file, you can specify it with an absolute path.
[2024-05-09 18:59:20] •     This command can be used synchronously in on init, and asynchronously in on
[2024-05-09 18:59:20] persistence_changed, on ui_control and on pgs_changed callbacks.
[2024-05-09 18:59:20] •     When loading an array within the on init callback, please note that the array will implicitly be
[2024-05-09 18:59:20] made persistent (as if make_persistent()  command was used) , which results in loaded data
[2024-05-09 18:59:20] being overwritten at the end of the callback. Use read_persistent_var() before loading the array
[2024-05-09 18:59:20] to avoid this problem.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Example
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]     set_ui_height(2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare $load_arr_id := -1
[2024-05-09 18:59:20]     declare %preset[8]
[2024-05-09 18:59:20]     declare @file_path
[2024-05-09 18:59:20]     declare @basepath_browser
[2024-05-09 18:59:20]     { set browser path here, for example:
[2024-05-09 18:59:20]     @basepath_browser := "/Users/<username>/Desktop/Arrays" }
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_file_selector $file_browser
[2024-05-09 18:59:20]     declare ui_table %table[8] (2, 2, 100)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $browser_id
[2024-05-09 18:59:20]     $browser_id := get_ui_id($file_browser)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par_str($browser_id, $CONTROL_PAR_BASEPATH, @basepath_browser)
[2024-05-09 18:59:20]     set_control_par($browser_id, $CONTROL_PAR_WIDTH, 112)
[2024-05-09 18:59:20]     set_control_par($browser_id, $CONTROL_PAR_HEIGHT, 68)
[2024-05-09 18:59:20]     set_control_par($browser_id, $CONTROL_PAR_COLUMN_WIDTH, 110)
[2024-05-09 18:59:20]     set_control_par($browser_id, $CONTROL_PAR_FILE_TYPE, $NI_FILE_TYPE_ARRAY)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent(@file_path)
[2024-05-09 18:59:20]     make_persistent(%table)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     move_control_px($file_browser, 66, 2)
[2024-05-09 18:59:20]     move_control(%table, 3, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $load_arr_id)
[2024-05-09 18:59:20]         $load_arr_id := -1
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         if ($NI_ASYNC_EXIT_STATUS = 0)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 18. Load/Save Commands
[2024-05-09 18:59:20] Category: load_array_str()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: load_array_str
[2024-05-09 18:59:20] Parameters: array-variable,path
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Loads an array from an external .nka file, using an absolute path to the file.
[2024-05-09 18:59:20] <array-variable>: The name of the array variable, this must be present as the first line of the .nka file.
[2024-05-09 18:59:20] <path>:  The absolute path of the .nka file.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The behaviour is similar to load_array() with mode set to 0, but instead of manually choosing
[2024-05-09 18:59:20] an .nka file, you can specify it with an absolute path.
[2024-05-09 18:59:20] - This command can be used synchronously in on init, and asynchronously in on
[2024-05-09 18:59:20] persistence_changed, on ui_control and on pgs_changed callbacks.
[2024-05-09 18:59:20] - When loading an array within the on init callback, please note that the array will implicitly be
[2024-05-09 18:59:20] made persistent (as if make_persistent()  command was used) , which results in loaded data
[2024-05-09 18:59:20] being overwritten at the end of the callback. Use read_persistent_var() before loading the array
[2024-05-09 18:59:20] to avoid this problem.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]     set_ui_height(2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare $load_arr_id := -1
[2024-05-09 18:59:20]     declare %preset[8]
[2024-05-09 18:59:20]     declare @file_path
[2024-05-09 18:59:20]     declare @basepath_browser
[2024-05-09 18:59:20]     { set browser path here, for example:
[2024-05-09 18:59:20]     @basepath_browser := "/Users/<username>/Desktop/Arrays" }
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_file_selector $file_browser
[2024-05-09 18:59:20]     declare ui_table %table[8] (2, 2, 100)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $browser_id
[2024-05-09 18:59:20]     $browser_id := get_ui_id($file_browser)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par_str($browser_id, $CONTROL_PAR_BASEPATH, @basepath_browser)
[2024-05-09 18:59:20]     set_control_par($browser_id, $CONTROL_PAR_WIDTH, 112)
[2024-05-09 18:59:20]     set_control_par($browser_id, $CONTROL_PAR_HEIGHT, 68)
[2024-05-09 18:59:20]     set_control_par($browser_id, $CONTROL_PAR_COLUMN_WIDTH, 110)
[2024-05-09 18:59:20]     set_control_par($browser_id, $CONTROL_PAR_FILE_TYPE, $NI_FILE_TYPE_ARRAY)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent(@file_path)
[2024-05-09 18:59:20]     make_persistent(%table)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     move_control_px($file_browser, 66, 2)
[2024-05-09 18:59:20]     move_control(%table, 3, 1)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $load_arr_id)
[2024-05-09 18:59:20]         $load_arr_id := -1
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         if ($NI_ASYNC_EXIT_STATUS = 0)
[2024-05-09 18:59:20] ------------------------------ load_ir_sample ------------------------------
[2024-05-09 18:59:20] Page 213, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7580
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] load_ir_sample(<path-or-filename>, <slot>, <generic>)
[2024-05-09 18:59:20] Loads an impulse response sample into Kontakt's convolution effect.
[2024-05-09 18:59:20] <path-or-filename>: The absolute file path of the IR sample.If no path is specified, the command will look for the specified sample within
[2024-05-09 18:59:20] the ir_samples folder of the resource container.
[2024-05-09 18:59:20] If no resource container is available, the folder ir_samples within the Kontakt
[2024-05-09 18:59:20] user folder will be checked.
[2024-05-09 18:59:20] The Kontakt user folder is located here:
[2024-05-09 18:59:20] macOS: /Users/<username>/Documents/Native Instruments/
[2024-05-09 18:59:20] Kontakt 7/
[2024-05-09 18:59:20] Windows: C:\Users\<username>\Documents\Native
[2024-05-09 18:59:20] Instruments\Kontakt 7\
[2024-05-09 18:59:20] <slot>: The slot index of the convolution effect (zero-based).
[2024-05-09 18:59:20] <generic>: Specifies whether the convolution effect is used as an:
[2024-05-09 18:59:20] $NI_SEND_BUS: Send effect
[2024-05-09 18:59:20] $NI_INSERT_BUS: Insert effect
[2024-05-09 18:59:20] $NI_MAIN_BUS: Main effect
[2024-05-09 18:59:20] For buses, this parameter specifies the actual bus:
[2024-05-09 18:59:20] $NI_BUS_OFFSET + [0 ... 15]: One of the 16 buses
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Please note that any subfolders inside the ir_samples folder of the resource container will
[2024-05-09 18:59:20] not be scanned, and it is not recommended to add them manually via text strings. Doing so
[2024-05-09 18:59:20] could lead to problems, because subfolders will be ignored during the creation of a resource
[2024-05-09 18:59:20] container monolith.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Example
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $load_ir_id := -1
[2024-05-09 18:59:20]     declare ui_button $Load
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Load)
[2024-05-09 18:59:20]     $load_ir_id := load_ir_sample("Small Ambience.wav", 0, $NI_SEND_BUS)
[2024-05-09 18:59:20]     $Load := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $load_ir_id)
[2024-05-09 18:59:20]         $load_ir_id := -1
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         if ($NI_ASYNC_EXIT_STATUS = 0)
[2024-05-09 18:59:20]             message("IR sample not found!")
[2024-05-09 18:59:20]         else
[2024-05-09 18:59:20]             message("IR sample loaded!")
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Load an IR sample into a convolution reverb, placed in the first slot of send effect chain.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 18. Load/Save Commands
[2024-05-09 18:59:20] Category: load_ir_sample()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: load_ir_sample
[2024-05-09 18:59:20] Parameters: path-or-filename,slot,generic
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Loads an impulse response sample into Kontakt's convolution effect.
[2024-05-09 18:59:20] <path-or-filename>: The absolute file path of the IR sample.If no path is specified, the command will look for the specified sample within
[2024-05-09 18:59:20] the ir_samples folder of the resource container.
[2024-05-09 18:59:20] If no resource container is available, the folder ir_samples within the Kontakt
[2024-05-09 18:59:20] user folder will be checked.
[2024-05-09 18:59:20] The Kontakt user folder is located here:
[2024-05-09 18:59:20] macOS: /Users/<username>/Documents/Native Instruments/
[2024-05-09 18:59:20] Kontakt 7/
[2024-05-09 18:59:20] Windows: C:\Users\<username>\Documents\Native
[2024-05-09 18:59:20] Instruments\Kontakt 7\
[2024-05-09 18:59:20] <slot>: The slot index of the convolution effect (zero-based).
[2024-05-09 18:59:20] <generic>: Specifies whether the convolution effect is used as an:
[2024-05-09 18:59:20] $NI_SEND_BUS: Send effect
[2024-05-09 18:59:20] $NI_INSERT_BUS: Insert effect
[2024-05-09 18:59:20] $NI_MAIN_BUS: Main effect
[2024-05-09 18:59:20] For buses, this parameter specifies the actual bus:
[2024-05-09 18:59:20] $NI_BUS_OFFSET + [0 ... 15]: One of the 16 buses
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Please note that any subfolders inside the ir_samples folder of the resource container will
[2024-05-09 18:59:20] not be scanned, and it is not recommended to add them manually via text strings. Doing so
[2024-05-09 18:59:20] could lead to problems, because subfolders will be ignored during the creation of a resource
[2024-05-09 18:59:20] container monolith.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $load_ir_id := -1
[2024-05-09 18:59:20]     declare ui_button $Load
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Load)
[2024-05-09 18:59:20]     $load_ir_id := load_ir_sample("Small Ambience.wav", 0, $NI_SEND_BUS)
[2024-05-09 18:59:20]     $Load := 0
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $load_ir_id)
[2024-05-09 18:59:20]         $load_ir_id := -1
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         if ($NI_ASYNC_EXIT_STATUS = 0)
[2024-05-09 18:59:20]             message("IR sample not found!")
[2024-05-09 18:59:20]         else
[2024-05-09 18:59:20]             message("IR sample loaded!")
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Load an IR sample into a convolution reverb, placed in the first slot of send effect chain.
[2024-05-09 18:59:20] ------------------------------ save_array ------------------------------
[2024-05-09 18:59:20] Page 215, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7640
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] save_array(<array-variable>, <mode>)
[2024-05-09 18:59:20] Saves an array to an external .nka file
[2024-05-09 18:59:20] <array-variable>: The name of the array variable to be saved.
[2024-05-09 18:59:20] <mode>: 0: A dialog window pops up, allowing you to save the .nka file. This mode
[2024-05-09 18:59:20] can only be used in on persistence_changed, on ui_control and on
[2024-05-09 18:59:20] pgs_changed callbacks.
[2024-05-09 18:59:20] 1: The array is directly saved in the Data folder.
[2024-05-09 18:59:20] For user instruments, the Data folder is located beside the resource container.
[2024-05-09 18:59:20] For Kontakt Player encoded library instruments, the Data folder is located here:
[2024-05-09 18:59:20] OS X: /Users/<UserName>/Library/Application Support/<LibraryName>/
[2024-05-09 18:59:20] Win: C:\Users\<UserName>\AppData\Local\<LibraryName>\
[2024-05-09 18:59:20] This mode can be used synchronously in on init, and asynchronously
[2024-05-09 18:59:20] in on persistence_changed, on ui_control and on pgs_changed
[2024-05-09 18:59:20] callbacks.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     It is also possible to save real and string arrays into .nka files.
[2024-05-09 18:59:20] •     The exported .nka file consists of the name of the array followed by all its values, one value per
[2024-05-09 18:59:20] line.
[2024-05-09 18:59:20] •     When using mode 0, the callback continues even if the loading dialog is still open.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20] load_array()
[2024-05-09 18:59:20] General: $NI_ASYNC_ID, $NI_ASYNC_EXIT_STATUS
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 18. Load/Save Commands
[2024-05-09 18:59:20] Category: save_array()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: save_array
[2024-05-09 18:59:20] Parameters: array-variable,mode
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Saves an array to an external .nka file
[2024-05-09 18:59:20] <array-variable>: The name of the array variable to be saved.
[2024-05-09 18:59:20] <mode>: 0: A dialog window pops up, allowing you to save the .nka file. This mode
[2024-05-09 18:59:20] can only be used in on persistence_changed, on ui_control and on
[2024-05-09 18:59:20] pgs_changed callbacks.
[2024-05-09 18:59:20] 1: The array is directly saved in the Data folder.
[2024-05-09 18:59:20] For user instruments, the Data folder is located beside the resource container.
[2024-05-09 18:59:20] For Kontakt Player encoded library instruments, the Data folder is located here:
[2024-05-09 18:59:20] OS X: /Users/<UserName>/Library/Application Support/<LibraryName>/
[2024-05-09 18:59:20] Win: C:\Users\<UserName>\AppData\Local\<LibraryName>\
[2024-05-09 18:59:20] This mode can be used synchronously in on init, and asynchronously
[2024-05-09 18:59:20] in on persistence_changed, on ui_control and on pgs_changed
[2024-05-09 18:59:20] callbacks.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - It is also possible to save real and string arrays into .nka files.
[2024-05-09 18:59:20] - The exported .nka file consists of the name of the array followed by all its values, one value per
[2024-05-09 18:59:20] line.
[2024-05-09 18:59:20] - When using mode 0, the callback continues even if the loading dialog is still open.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20] load_array()
[2024-05-09 18:59:20] General: $NI_ASYNC_ID, $NI_ASYNC_EXIT_STATUS
[2024-05-09 18:59:20] ------------------------------ save_array_str ------------------------------
[2024-05-09 18:59:20] Page 216, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7669
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] save_array_str(<array-variable>, <path>)
[2024-05-09 18:59:20] Saves an array to an external .nka file with the specified absolute path.
[2024-05-09 18:59:20] <array-variable>: The name of the array variable to be saved.
[2024-05-09 18:59:20] <path>: The absolute path of the .nka file to be saved.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The behaviour is similar to save_array(), but instead of manually choosing a save location,
[2024-05-09 18:59:20] you can directly save the file to the specified location.
[2024-05-09 18:59:20] •     If the file does not exist, but the folder does, a new .nka file will be created.
[2024-05-09 18:59:20] •     This command can be used synchronously in on init, and asynchronously in on
[2024-05-09 18:59:20] persistence_changed, on ui_control and on pgs_changed callbacks.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Example
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]     set_ui_height(2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare $save_arr_id := -1
[2024-05-09 18:59:20]     declare %preset[8]
[2024-05-09 18:59:20]     declare @path
[2024-05-09 18:59:20]     { set save path here, for example:
[2024-05-09 18:59:20]     @path := "/Users/<username>/Desktop/Arrays/" }
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Save
[2024-05-09 18:59:20]     declare ui_label $pattern_lbl (1, 1)
[2024-05-09 18:59:20]     declare ui_text_edit @preset_name
[2024-05-09 18:59:20]     declare ui_table %table[8] (2, 2, 100)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent(%table)
[2024-05-09 18:59:20]     make_persistent(@preset_name)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par(get_ui_id(@preset_name), $CONTROL_PAR_FONT_TYPE, 10)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     move_control_px(@preset_name, 73 + (3 * 92), 2)
[2024-05-09 18:59:20]     move_control_px($pattern_lbl, 66 + (3 * 92), 2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par_str(get_ui_id(@preset_name), $CONTROL_PAR_TEXT, "<empty>")
[2024-05-09 18:59:20]     set_text($pattern_lbl, "")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control (%table)
[2024-05-09 18:59:20]     $count := 0
[2024-05-09 18:59:20]     while ($count < num_elements(%preset))
[2024-05-09 18:59:20]         %preset[$count] := %table[$count]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Save)
[2024-05-09 18:59:20]     $save_arr_id := save_array_str(%preset, @path & @preset_name & ".nka")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 18. Load/Save Commands
[2024-05-09 18:59:20] Category: save_array_str()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: save_array_str
[2024-05-09 18:59:20] Parameters: array-variable,path
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Saves an array to an external .nka file with the specified absolute path.
[2024-05-09 18:59:20] <array-variable>: The name of the array variable to be saved.
[2024-05-09 18:59:20] <path>: The absolute path of the .nka file to be saved.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The behaviour is similar to save_array(), but instead of manually choosing a save location,
[2024-05-09 18:59:20] you can directly save the file to the specified location.
[2024-05-09 18:59:20] - If the file does not exist, but the folder does, a new .nka file will be created.
[2024-05-09 18:59:20] - This command can be used synchronously in on init, and asynchronously in on
[2024-05-09 18:59:20] persistence_changed, on ui_control and on pgs_changed callbacks.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]     set_ui_height(2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $count
[2024-05-09 18:59:20]     declare $save_arr_id := -1
[2024-05-09 18:59:20]     declare %preset[8]
[2024-05-09 18:59:20]     declare @path
[2024-05-09 18:59:20]     { set save path here, for example:
[2024-05-09 18:59:20]     @path := "/Users/<username>/Desktop/Arrays/" }
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $Save
[2024-05-09 18:59:20]     declare ui_label $pattern_lbl (1, 1)
[2024-05-09 18:59:20]     declare ui_text_edit @preset_name
[2024-05-09 18:59:20]     declare ui_table %table[8] (2, 2, 100)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent(%table)
[2024-05-09 18:59:20]     make_persistent(@preset_name)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par(get_ui_id(@preset_name), $CONTROL_PAR_FONT_TYPE, 10)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     move_control_px(@preset_name, 73 + (3 * 92), 2)
[2024-05-09 18:59:20]     move_control_px($pattern_lbl, 66 + (3 * 92), 2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par_str(get_ui_id(@preset_name), $CONTROL_PAR_TEXT, "<empty>")
[2024-05-09 18:59:20]     set_text($pattern_lbl, "")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control (%table)
[2024-05-09 18:59:20]     $count := 0
[2024-05-09 18:59:20]     while ($count < num_elements(%preset))
[2024-05-09 18:59:20]         %preset[$count] := %table[$count]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($count)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Save)
[2024-05-09 18:59:20]     $save_arr_id := save_array_str(%preset, @path & @preset_name & ".nka")
[2024-05-09 18:59:20] ------------------------------ save_midi_file ------------------------------
[2024-05-09 18:59:20] Page 218, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7744
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] save_midi_file(<path>)
[2024-05-09 18:59:20] Saves a MIDI file with the range specified by the mf_set_export_area() command.
[2024-05-09 18:59:20] <path>: The absolute path of the MIDI file to be saved.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Example
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $save_mf_id := -1
[2024-05-09 18:59:20]     declare @path
[2024-05-09 18:59:20]     { set save path here, for example
[2024-05-09 18:59:20]     @path := "/Users/<username>/Desktop/MIDI Files/" }
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_text_edit @file_name
[2024-05-09 18:59:20]     declare ui_label $file_name_lbl (1, 1)
[2024-05-09 18:59:20]     declare ui_button $Save
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent(@file_name)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par(get_ui_id(@file_name), $CONTROL_PAR_FONT_TYPE, 10)
[2024-05-09 18:59:20]     set_control_par_str(get_ui_id(@file_name), $CONTROL_PAR_TEXT, "<empty>")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($file_name_lbl, "")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     move_control($Save, 2, 1)
[2024-05-09 18:59:20]     move_control_px(@file_name, 73, 2)
[2024-05-09 18:59:20]     move_control_px($file_name_lbl, 66, 2)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Save)
[2024-05-09 18:59:20]     $save_mf_id := save_midi_file(@path & @file_name & ".mid")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $save_mf_id)
[2024-05-09 18:59:20]         $save_mf_id := -1
[2024-05-09 18:59:20]         $Save := 0
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Saving a MIDI file.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_set_export_area()
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 18. Load/Save Commands
[2024-05-09 18:59:20] Category: save_midi_file()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: save_midi_file
[2024-05-09 18:59:20] Parameters: path
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Saves a MIDI file with the range specified by the mf_set_export_area() command.
[2024-05-09 18:59:20] <path>: The absolute path of the MIDI file to be saved.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $save_mf_id := -1
[2024-05-09 18:59:20]     declare @path
[2024-05-09 18:59:20]     { set save path here, for example
[2024-05-09 18:59:20]     @path := "/Users/<username>/Desktop/MIDI Files/" }
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_text_edit @file_name
[2024-05-09 18:59:20]     declare ui_label $file_name_lbl (1, 1)
[2024-05-09 18:59:20]     declare ui_button $Save
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     make_persistent(@file_name)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par(get_ui_id(@file_name), $CONTROL_PAR_FONT_TYPE, 10)
[2024-05-09 18:59:20]     set_control_par_str(get_ui_id(@file_name), $CONTROL_PAR_TEXT, "<empty>")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($file_name_lbl, "")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     move_control($Save, 2, 1)
[2024-05-09 18:59:20]     move_control_px(@file_name, 73, 2)
[2024-05-09 18:59:20]     move_control_px($file_name_lbl, 66, 2)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Save)
[2024-05-09 18:59:20]     $save_mf_id := save_midi_file(@path & @file_name & ".mid")
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $save_mf_id)
[2024-05-09 18:59:20]         $save_mf_id := -1
[2024-05-09 18:59:20]         $Save := 0
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Saving a MIDI file.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_set_export_area()
[2024-05-09 18:59:20] ------------------------------ detect_pitch ------------------------------
[2024-05-09 18:59:20] Page 220, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7804
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] detect_pitch(<zone-id>, <pitch-result>)
[2024-05-09 18:59:20] Returns a real value representing the fundamental frequency of an audio sample, in semitones and
[2024-05-09 18:59:20] cents. If detection fails, the function will return ~NI_DETECT_PITCH_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <pitch-result>: The MIDI note value of the detected pitch.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 19. Music Information Retrieval
[2024-05-09 18:59:20] Category: detect_pitch()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: detect_pitch
[2024-05-09 18:59:20] Parameters: zone-id,pitch-result
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns a real value representing the fundamental frequency of an audio sample, in semitones and
[2024-05-09 18:59:20] cents. If detection fails, the function will return ~NI_DETECT_PITCH_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <pitch-result>: The MIDI note value of the detected pitch.
[2024-05-09 18:59:20] ------------------------------ detect_loudness ------------------------------
[2024-05-09 18:59:20] Page 221, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7813
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] detect_loudness(<zone-id>, <loudness-result>)
[2024-05-09 18:59:20] Returns a real value representing the loudness of an audio sample in decibels. Loudness is
[2024-05-09 18:59:20] measured according to the standard established by the International Telecommunication Union:
[2024-05-09 18:59:20] Algorithms to measure audio program loudness and true-peak audio level - ITU-R BS.1770-4 (2015). If
[2024-05-09 18:59:20] detection fails, the function will return ~NI_DETECT_LOUDNESS_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <loudness-result>: The real value of the detected loudness in decibels.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 19. Music Information Retrieval
[2024-05-09 18:59:20] Category: detect_loudness()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: detect_loudness
[2024-05-09 18:59:20] Parameters: zone-id,loudness-result
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns a real value representing the loudness of an audio sample in decibels. Loudness is
[2024-05-09 18:59:20] measured according to the standard established by the International Telecommunication Union:
[2024-05-09 18:59:20] Algorithms to measure audio program loudness and true-peak audio level - ITU-R BS.1770-4 (2015). If
[2024-05-09 18:59:20] detection fails, the function will return ~NI_DETECT_LOUDNESS_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <loudness-result>: The real value of the detected loudness in decibels.
[2024-05-09 18:59:20] ------------------------------ detect_peak ------------------------------
[2024-05-09 18:59:20] Page 222, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7824
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] detect_peak(<zone-id>, <peak-result>)
[2024-05-09 18:59:20] Returns a real value representing peak level of an audio sample in decibels. Peak is measured
[2024-05-09 18:59:20] according to the standard established by the International Telecommunication Union: Algorithms to
[2024-05-09 18:59:20] measure audio program loudness and true-peak audio level - ITU-R BS.1770-4 (2015). If detection
[2024-05-09 18:59:20] fails, the function will set <peak-result> to ~NI_DETECT_PEAK_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <peak-result>: The real value of the detected peak level in decibels.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 19. Music Information Retrieval
[2024-05-09 18:59:20] Category: detect_peak()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: detect_peak
[2024-05-09 18:59:20] Parameters: zone-id,peak-result
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns a real value representing peak level of an audio sample in decibels. Peak is measured
[2024-05-09 18:59:20] according to the standard established by the International Telecommunication Union: Algorithms to
[2024-05-09 18:59:20] measure audio program loudness and true-peak audio level - ITU-R BS.1770-4 (2015). If detection
[2024-05-09 18:59:20] fails, the function will set <peak-result> to ~NI_DETECT_PEAK_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <peak-result>: The real value of the detected peak level in decibels.
[2024-05-09 18:59:20] ------------------------------ detect_rms ------------------------------
[2024-05-09 18:59:20] Page 223, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7835
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] detect_rms(<zone-id>, <rms-result>)
[2024-05-09 18:59:20] Returns a real value representing the RMS level of an audio sample in decibels. If detection fails, the
[2024-05-09 18:59:20] function will return ~NI_DETECT_RMS_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <rms-result>: The real value of the RMS level of the audio sample in decibels.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 19. Music Information Retrieval
[2024-05-09 18:59:20] Category: detect_rms()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: detect_rms
[2024-05-09 18:59:20] Parameters: zone-id,rms-result
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns a real value representing the RMS level of an audio sample in decibels. If detection fails, the
[2024-05-09 18:59:20] function will return ~NI_DETECT_RMS_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <rms-result>: The real value of the RMS level of the audio sample in decibels.
[2024-05-09 18:59:20] ------------------------------ detect_sample_type ------------------------------
[2024-05-09 18:59:20] Page 224, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7844
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] detect_sample_type(<zone-id>, <sample-type-result>)
[2024-05-09 18:59:20] Assigns <sample-type-result> a $NI_DETECT_SAMPLE_TYPE tag describing the whether
[2024-05-09 18:59:20] an audio sample is a drum or an instrument. If detection fails, the function will return
[2024-05-09 18:59:20] $NI_DETECT_SAMPLE_TYPE_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <sample-type-result>: The detected sample type, can be one of the following:$NI_DETECT_SAMPLE_TYPE_INVALID
[2024-05-09 18:59:20] $NI_DETECT_SAMPLE_TYPE_INSTRUMENT
[2024-05-09 18:59:20] $NI_DETECT_SAMPLE_TYPE_DRUM
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 19. Music Information Retrieval
[2024-05-09 18:59:20] Category: detect_sample_type()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: detect_sample_type
[2024-05-09 18:59:20] Parameters: zone-id,sample-type-result
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assigns <sample-type-result> a $NI_DETECT_SAMPLE_TYPE tag describing the whether
[2024-05-09 18:59:20] an audio sample is a drum or an instrument. If detection fails, the function will return
[2024-05-09 18:59:20] $NI_DETECT_SAMPLE_TYPE_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <sample-type-result>: The detected sample type, can be one of the following:$NI_DETECT_SAMPLE_TYPE_INVALID
[2024-05-09 18:59:20] $NI_DETECT_SAMPLE_TYPE_INSTRUMENT
[2024-05-09 18:59:20] $NI_DETECT_SAMPLE_TYPE_DRUM
[2024-05-09 18:59:20] ------------------------------ detect_drum_type ------------------------------
[2024-05-09 18:59:20] Page 225, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7856
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] detect_drum_type(<zone-id>, <drum-type-result>)
[2024-05-09 18:59:20] Assigns <drum-type-result> a $NI_DETECT_DRUM_TYPE tag describing the drum type of an
[2024-05-09 18:59:20] audio sample. You can use this function if detect_sample_type() determines that a given audio
[2024-05-09 18:59:20] sample is of type $NI_DETECT_SAMPLE_TYPE_DRUM. If detection fails, the function will return
[2024-05-09 18:59:20] ~NI_DETECT_DRUM_TYPE_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <drum-type-result>: The detected drum type, can be one of the following:$NI_DETECT_DRUM_TYPE_INVALID
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_KICK
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_SNARE
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_CLOSED_HH
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_OPEN_HH
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_TOM
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_CYMBAL
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_CLAP
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_SHAKER
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_PERC_DRUM
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_PERC_OTHER
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 19. Music Information Retrieval
[2024-05-09 18:59:20] Category: detect_drum_type()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: detect_drum_type
[2024-05-09 18:59:20] Parameters: zone-id,drum-type-result
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assigns <drum-type-result> a $NI_DETECT_DRUM_TYPE tag describing the drum type of an
[2024-05-09 18:59:20] audio sample. You can use this function if detect_sample_type() determines that a given audio
[2024-05-09 18:59:20] sample is of type $NI_DETECT_SAMPLE_TYPE_DRUM. If detection fails, the function will return
[2024-05-09 18:59:20] ~NI_DETECT_DRUM_TYPE_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone.
[2024-05-09 18:59:20] <drum-type-result>: The detected drum type, can be one of the following:$NI_DETECT_DRUM_TYPE_INVALID
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_KICK
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_SNARE
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_CLOSED_HH
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_OPEN_HH
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_TOM
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_CYMBAL
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_CLAP
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_SHAKER
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_PERC_DRUM
[2024-05-09 18:59:20] $NI_DETECT_DRUM_TYPE_PERC_OTHER
[2024-05-09 18:59:20] ------------------------------ detect_instrument_type ------------------------------
[2024-05-09 18:59:20] Page 226, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 7877
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] detect_instrument_type(<zone-id>, <instr-type-result>)
[2024-05-09 18:59:20] Assigns <instr-type-result> a $NI_DETECT_INSTRUMENT_TYPE tag describing the
[2024-05-09 18:59:20] instrument type of an audio sample. Hint: use this function if detect_sample_type()
[2024-05-09 18:59:20] determines that a given audio sample is of type $NI_DETECT_SAMPLE_TYPE_INSTRUMENT. If
[2024-05-09 18:59:20] detection fails, the function will return $NI_DETECT_INSTRUMENT_TYPE_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone
[2024-05-09 18:59:20] <instr-type-result>: The detected instrument type, can be one of the following:$NI_DETECT_INSTRUMENT_TYPE_INVALID
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_BASS
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_BOWED_STRING
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_BRASS
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_FLUTE
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_GUITAR
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_KEYBOARD
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_MALLET
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_ORGAN
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_PLUCKED_STRING
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_REED
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_SYNTH
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_VOCAL
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Examples
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ~pitch_result
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_num_user_zones(1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_mouse_area $Drop
[2024-05-09 18:59:20]     declare ui_label $Info (1, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($Info, "Drop sample here!")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     move_control_px($Drop, 66, 2)
[2024-05-09 18:59:20]     move_control_px($Info, 66, 2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par(get_ui_id($Drop), $CONTROL_PAR_DND_ACCEPT_AUDIO,
[2024-05-09 18:59:20] $NI_DND_ACCEPT_ONE)
[2024-05-09 18:59:20]     set_control_par(get_ui_id($Drop), $CONTROL_PAR_WIDTH, 150)
[2024-05-09 18:59:20]     set_control_par(get_ui_id($Info), $CONTROL_PAR_WIDTH, 150)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_HIGH_KEY, 127)
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_LOW_VELO, 1)
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_HIGH_VELO, 127)
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Drop)
[2024-05-09 18:59:20]     if ($NI_MOUSE_EVENT_TYPE = $NI_MOUSE_EVENT_TYPE_DROP)
[2024-05-09 18:59:20]         wait_async(set_sample(%NI_USER_ZONE_IDS[0], !NI_DND_ITEMS_AUDIO[0]))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         wait_async(detect_pitch(%NI_USER_ZONE_IDS[0], ~pitch_result))
[2024-05-09 18:59:20]         wait_async(set_zone_par(%NI_USER_ZONE_IDS[0], ...
[2024-05-09 18:59:20]                                 $ZONE_PAR_ROOT_KEY, ...
[2024-05-09 18:59:20]                                 int(round(~pitch_result))))
[2024-05-09 18:59:20]         wait_async(set_zone_par(%NI_USER_ZONE_IDS[0], ...
[2024-05-09 18:59:20]                                 $ZONE_PAR_TUNE, ...
[2024-05-09 18:59:20]                                 int(100.0 * (round(~pitch_result) - ~pitch_result))
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Set the zone root key by rounding the pitch result to an integer value, then set the zone tune to
[2024-05-09 18:59:20] correct for the pitch offset.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_num_user_zones(1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_mouse_area $Drop
[2024-05-09 18:59:20]     declare ui_label $Info (1, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $sample_type
[2024-05-09 18:59:20]     declare $instrument_type
[2024-05-09 18:59:20]     declare $drum_type
[2024-05-09 18:59:20]     declare !drum_types[10]
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_KICK]       := "Kick"
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_SNARE]      := "Snare"
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_CLOSED_HH]  := "Closed Hi-Hat"
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_OPEN_HH]    := "Open Hi-Hat"
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_TOM]        := "Tomr"
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_CYMBAL]     := "Cymbal"
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 19. Music Information Retrieval
[2024-05-09 18:59:20] Category: detect_instrument_type()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: detect_instrument_type
[2024-05-09 18:59:20] Parameters: zone-id,instr-type-result
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Assigns <instr-type-result> a $NI_DETECT_INSTRUMENT_TYPE tag describing the
[2024-05-09 18:59:20] instrument type of an audio sample. Hint: use this function if detect_sample_type()
[2024-05-09 18:59:20] determines that a given audio sample is of type $NI_DETECT_SAMPLE_TYPE_INSTRUMENT. If
[2024-05-09 18:59:20] detection fails, the function will return $NI_DETECT_INSTRUMENT_TYPE_INVALID.
[2024-05-09 18:59:20] <zone-id>: The ID of the zone
[2024-05-09 18:59:20] <instr-type-result>: The detected instrument type, can be one of the following:$NI_DETECT_INSTRUMENT_TYPE_INVALID
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_BASS
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_BOWED_STRING
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_BRASS
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_FLUTE
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_GUITAR
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_KEYBOARD
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_MALLET
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_ORGAN
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_PLUCKED_STRING
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_REED
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_SYNTH
[2024-05-09 18:59:20] $NI_DETECT_INSTRUMENT_TYPE_VOCAL
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ~pitch_result
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_num_user_zones(1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_mouse_area $Drop
[2024-05-09 18:59:20]     declare ui_label $Info (1, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_text($Info, "Drop sample here!")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     move_control_px($Drop, 66, 2)
[2024-05-09 18:59:20]     move_control_px($Info, 66, 2)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_control_par(get_ui_id($Drop), $CONTROL_PAR_DND_ACCEPT_AUDIO,
[2024-05-09 18:59:20] $NI_DND_ACCEPT_ONE)
[2024-05-09 18:59:20]     set_control_par(get_ui_id($Drop), $CONTROL_PAR_WIDTH, 150)
[2024-05-09 18:59:20]     set_control_par(get_ui_id($Info), $CONTROL_PAR_WIDTH, 150)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_HIGH_KEY, 127)
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_LOW_VELO, 1)
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_HIGH_VELO, 127)
[2024-05-09 18:59:20]     set_zone_par(%NI_USER_ZONE_IDS[0], $ZONE_PAR_GROUP, 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control ($Drop)
[2024-05-09 18:59:20]     if ($NI_MOUSE_EVENT_TYPE = $NI_MOUSE_EVENT_TYPE_DROP)
[2024-05-09 18:59:20]         wait_async(set_sample(%NI_USER_ZONE_IDS[0], !NI_DND_ITEMS_AUDIO[0]))
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         wait_async(detect_pitch(%NI_USER_ZONE_IDS[0], ~pitch_result))
[2024-05-09 18:59:20]         wait_async(set_zone_par(%NI_USER_ZONE_IDS[0], ...
[2024-05-09 18:59:20]                                 $ZONE_PAR_ROOT_KEY, ...
[2024-05-09 18:59:20]                                 int(round(~pitch_result))))
[2024-05-09 18:59:20]         wait_async(set_zone_par(%NI_USER_ZONE_IDS[0], ...
[2024-05-09 18:59:20]                                 $ZONE_PAR_TUNE, ...
[2024-05-09 18:59:20]                                 int(100.0 * (round(~pitch_result) - ~pitch_result))
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Set the zone root key by rounding the pitch result to an integer value, then set the zone tune to
[2024-05-09 18:59:20] correct for the pitch offset.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     set_num_user_zones(1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_mouse_area $Drop
[2024-05-09 18:59:20]     declare ui_label $Info (1, 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $sample_type
[2024-05-09 18:59:20]     declare $instrument_type
[2024-05-09 18:59:20]     declare $drum_type
[2024-05-09 18:59:20]     declare !drum_types[10]
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_KICK]       := "Kick"
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_SNARE]      := "Snare"
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_CLOSED_HH]  := "Closed Hi-Hat"
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_OPEN_HH]    := "Open Hi-Hat"
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_TOM]        := "Tomr"
[2024-05-09 18:59:20]     !drum_types[$NI_DETECT_DRUM_TYPE_CYMBAL]     := "Cymbal"
[2024-05-09 18:59:20] ------------------------------ by_track ------------------------------
[2024-05-09 18:59:20] Page 233, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8110
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] by_track(<track>)
[2024-05-09 18:59:20] Used to access events grouped by their track number.
[2024-05-09 18:59:20] <track>: The track number of the events you wish to access.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Similar in functionality to the by_marks() command.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
[2024-05-09 18:59:20] by_marks()
[2024-05-09 18:59:20] mf_set_mark()
[2024-05-09 18:59:20] mf_get_mark()
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: by_track()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: by_track
[2024-05-09 18:59:20] Parameters: track
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Used to access events grouped by their track number.
[2024-05-09 18:59:20] <track>: The track number of the events you wish to access.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Similar in functionality to the by_marks() command.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
[2024-05-09 18:59:20] by_marks()
[2024-05-09 18:59:20] mf_set_mark()
[2024-05-09 18:59:20] mf_get_mark()
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_copy_export_area ------------------------------
[2024-05-09 18:59:20] Page 234, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8131
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_copy_export_area(<index>)
[2024-05-09 18:59:20] Copies the contents of MIDI export area 0 to the export area with the specified <index>.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Example
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare const $DND_AREAS := 4
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label1 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label2 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label3 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label4 (1,1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare %ID[$DND_AREAS]
[2024-05-09 18:59:20]     %ID[0] := get_ui_id($label1)
[2024-05-09 18:59:20]     %ID[1] := get_ui_id($label2)
[2024-05-09 18:59:20]     %ID[2] := get_ui_id($label3)
[2024-05-09 18:59:20]     %ID[3] := get_ui_id($label4)
[2024-05-09 18:59:20]     declare !track_names[$DND_AREAS]
[2024-05-09 18:59:20]     !track_names[0] := "Synth 1"
[2024-05-09 18:59:20]     !track_names[1] := "Synth 2"
[2024-05-09 18:59:20]     !track_names[2] := "Bass"
[2024-05-09 18:59:20]     !track_names[3] := "Melody"
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     mf_insert_file(get_folder($GET_FOLDER_PATCH_DIR) & "my_midi.mid", 0, 0, 0)
[2024-05-09 18:59:20]     mf_set_num_export_areas($DND_AREAS + 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < $DND_AREAS)
[2024-05-09 18:59:20]         set_control_par(%ID[$i], $CONTROL_PAR_DND_BEHAVIOUR, 1)
[2024-05-09 18:59:20]         set_control_par(%ID[$i], $CONTROL_PAR_MIDI_EXPORT_AREA_IDX, $i + 1)
[2024-05-09 18:59:20]         set_control_par_str(%ID[$i], $CONTROL_PAR_TEXT, !track_names[$i])
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         mf_set_export_area(!track_names[$i], -1, -1, $i, $i)
[2024-05-09 18:59:20]         mf_copy_export_area($i + 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Loads a MIDI file and distributes the content found in the first four MIDI channels to four separate
[2024-05-09 18:59:20] MIDI areas.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_set_export_area()
[2024-05-09 18:59:20] mf_set_num_export_areas()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_copy_export_area()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_copy_export_area
[2024-05-09 18:59:20] Parameters: index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Copies the contents of MIDI export area 0 to the export area with the specified <index>.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare const $DND_AREAS := 4
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label1 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label2 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label3 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label4 (1,1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare %ID[$DND_AREAS]
[2024-05-09 18:59:20]     %ID[0] := get_ui_id($label1)
[2024-05-09 18:59:20]     %ID[1] := get_ui_id($label2)
[2024-05-09 18:59:20]     %ID[2] := get_ui_id($label3)
[2024-05-09 18:59:20]     %ID[3] := get_ui_id($label4)
[2024-05-09 18:59:20]     declare !track_names[$DND_AREAS]
[2024-05-09 18:59:20]     !track_names[0] := "Synth 1"
[2024-05-09 18:59:20]     !track_names[1] := "Synth 2"
[2024-05-09 18:59:20]     !track_names[2] := "Bass"
[2024-05-09 18:59:20]     !track_names[3] := "Melody"
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     mf_insert_file(get_folder($GET_FOLDER_PATCH_DIR) & "my_midi.mid", 0, 0, 0)
[2024-05-09 18:59:20]     mf_set_num_export_areas($DND_AREAS + 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < $DND_AREAS)
[2024-05-09 18:59:20]         set_control_par(%ID[$i], $CONTROL_PAR_DND_BEHAVIOUR, 1)
[2024-05-09 18:59:20]         set_control_par(%ID[$i], $CONTROL_PAR_MIDI_EXPORT_AREA_IDX, $i + 1)
[2024-05-09 18:59:20]         set_control_par_str(%ID[$i], $CONTROL_PAR_TEXT, !track_names[$i])
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         mf_set_export_area(!track_names[$i], -1, -1, $i, $i)
[2024-05-09 18:59:20]         mf_copy_export_area($i + 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Loads a MIDI file and distributes the content found in the first four MIDI channels to four separate
[2024-05-09 18:59:20] MIDI areas.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_set_export_area()
[2024-05-09 18:59:20] mf_set_num_export_areas()
[2024-05-09 18:59:20] ------------------------------ mf_get_buffer_size ------------------------------
[2024-05-09 18:59:20] Page 235, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8184
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_buffer_size()
[2024-05-09 18:59:20] Returns the size of the MIDI object's event buffer.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     The maximum buffer size is 1000000 events, including both active and inactive events.
[2024-05-09 18:59:20] •     Inserting a MIDI event will decrease the buffer size by one. Removing an event will increase it
[2024-05-09 18:59:20] by one.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_set_buffer_size()
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_buffer_size()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_buffer_size
[2024-05-09 18:59:20] Parameters:
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the size of the MIDI object's event buffer.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - The maximum buffer size is 1000000 events, including both active and inactive events.
[2024-05-09 18:59:20] - Inserting a MIDI event will decrease the buffer size by one. Removing an event will increase it
[2024-05-09 18:59:20] by one.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_set_buffer_size()
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_get_event_par ------------------------------
[2024-05-09 18:59:20] Page 236, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8203
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_event_par(<event-id>, <parameter>)
[2024-05-09 18:59:20] Returns the value of an event parameter.
[2024-05-09 18:59:20] <event-id>: The ID of the event to be edited.
[2024-05-09 18:59:20] <parameter>: The event parameter, either one of four freely assignable event parameters:
[2024-05-09 18:59:20] $EVENT_PAR_0
[2024-05-09 18:59:20] $EVENT_PAR_1
[2024-05-09 18:59:20] $EVENT_PAR_2
[2024-05-09 18:59:20] $EVENT_PAR_3
[2024-05-09 18:59:20] or the built-in parameters of a event:
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_CHANNEL
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_COMMAND
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_BYTE_1
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_BYTE_2
[2024-05-09 18:59:20] $EVENT_PAR_POS
[2024-05-09 18:59:20] $EVENT_PAR_NOTE_LENGTH
[2024-05-09 18:59:20] $EVENT_PAR_ID
[2024-05-09 18:59:20] $EVENT_PAR_TRACK_NR
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     You can access all events in the MIDI object by using the $ALL_EVENTS constant as the event
[2024-05-09 18:59:20] ID.
[2024-05-09 18:59:20] •     You can access the currently selected event by using the $CURRENT_EVENT constant.
[2024-05-09 18:59:20] •     You can also access events by track, or group them with event marks by using the
[2024-05-09 18:59:20] by_track() and by_marks() commands.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] Events and MIDI: $CURRENT_EVENT
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_event_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_event_par
[2024-05-09 18:59:20] Parameters: event-id,parameter
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the value of an event parameter.
[2024-05-09 18:59:20] <event-id>: The ID of the event to be edited.
[2024-05-09 18:59:20] <parameter>: The event parameter, either one of four freely assignable event parameters:
[2024-05-09 18:59:20] $EVENT_PAR_0
[2024-05-09 18:59:20] $EVENT_PAR_1
[2024-05-09 18:59:20] $EVENT_PAR_2
[2024-05-09 18:59:20] $EVENT_PAR_3
[2024-05-09 18:59:20] or the built-in parameters of a event:
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_CHANNEL
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_COMMAND
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_BYTE_1
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_BYTE_2
[2024-05-09 18:59:20] $EVENT_PAR_POS
[2024-05-09 18:59:20] $EVENT_PAR_NOTE_LENGTH
[2024-05-09 18:59:20] $EVENT_PAR_ID
[2024-05-09 18:59:20] $EVENT_PAR_TRACK_NR
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - You can access all events in the MIDI object by using the $ALL_EVENTS constant as the event
[2024-05-09 18:59:20] ID.
[2024-05-09 18:59:20] - You can access the currently selected event by using the $CURRENT_EVENT constant.
[2024-05-09 18:59:20] - You can also access events by track, or group them with event marks by using the
[2024-05-09 18:59:20] by_track() and by_marks() commands.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] Events and MIDI: $CURRENT_EVENT
[2024-05-09 18:59:20] ------------------------------ mf_get_first ------------------------------
[2024-05-09 18:59:20] Page 237, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8239
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_first(<track-index>)
[2024-05-09 18:59:20] Moves the position marker to the first event in the MIDI track.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_first()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_first
[2024-05-09 18:59:20] Parameters: track-index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Moves the position marker to the first event in the MIDI track.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_get_id ------------------------------
[2024-05-09 18:59:20] Page 238, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8259
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] Returns the ID of the currently selected event, when using the navigation commands like
[2024-05-09 18:59:20] mf_get_first(), mf_get_next(), etc.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_id()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_id
[2024-05-09 18:59:20] Parameters:
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the ID of the currently selected event, when using the navigation commands like
[2024-05-09 18:59:20] mf_get_first(), mf_get_next(), etc.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] ------------------------------ mf_get_last ------------------------------
[2024-05-09 18:59:20] Page 239, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8274
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_last(<track-index>)
[2024-05-09 18:59:20] Moves the position marker to the last event in the MIDI track.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_last()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_last
[2024-05-09 18:59:20] Parameters: track-index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Moves the position marker to the last event in the MIDI track.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_get_last_filename ------------------------------
[2024-05-09 18:59:20] Page 240, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8294
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_last_filename()
[2024-05-09 18:59:20] Returns the filename (not the full path!) of the last MIDI file that was inserted into Kontakt, either via
[2024-05-09 18:59:20] mf_insert_file(), or via drag and drop operation on ui_mouse_area.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command will pair Note On and Note Off events to a single Note On with a Note Length
[2024-05-09 18:59:20] parameter. The Note Off events will be discarded.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Example
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare const $DND_AREAS := 4
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label1 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label2 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label3 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label4 (1,1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare %ID[$DND_AREAS]
[2024-05-09 18:59:20]     %ID[0] := get_ui_id($label1)
[2024-05-09 18:59:20]     %ID[1] := get_ui_id($label2)
[2024-05-09 18:59:20]     %ID[2] := get_ui_id($label3)
[2024-05-09 18:59:20]     %ID[3] := get_ui_id($label4)
[2024-05-09 18:59:20]     declare !track_names[$DND_AREAS]
[2024-05-09 18:59:20]     !track_names[0] := "Synth 1"
[2024-05-09 18:59:20]     !track_names[1] := "Synth 2"
[2024-05-09 18:59:20]     !track_names[2] := "Bass"
[2024-05-09 18:59:20]     !track_names[3] := "Melody"
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     mf_insert_file(get_folder($GET_FOLDER_PATCH_DIR) & "my_midi.mid", 0, 0, 0)
[2024-05-09 18:59:20]     { declare export areas, area 0 serves as an edit buffer, so add one extra }
[2024-05-09 18:59:20]     mf_set_num_export_areas($DND_AREAS + 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < $DND_AREAS)
[2024-05-09 18:59:20]         set_control_par(%ID[$i], $CONTROL_PAR_DND_BEHAVIOUR, 1)
[2024-05-09 18:59:20]         set_control_par(%ID[$i], $CONTROL_PAR_MIDI_EXPORT_AREA_IDX, $i + 1)
[2024-05-09 18:59:20]         set_control_par_str(%ID[$i], $CONTROL_PAR_TEXT, mf_get_last_filename & " "
[2024-05-09 18:59:20] & !track_names[$i])
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         mf_set_export_area(!track_names[$i], -1, -1, $i, $i)
[2024-05-09 18:59:20]         mf_copy_export_area($i + 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] MIDI file loader which allows exporting first four tracks as individual MIDI files. Utilizes
[2024-05-09 18:59:20] mf_get_last_filename() to show the exact name of the MIDI file that was loaded.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_last_filename()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_last_filename
[2024-05-09 18:59:20] Parameters:
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the filename (not the full path!) of the last MIDI file that was inserted into Kontakt, either via
[2024-05-09 18:59:20] mf_insert_file(), or via drag and drop operation on ui_mouse_area.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command will pair Note On and Note Off events to a single Note On with a Note Length
[2024-05-09 18:59:20] parameter. The Note Off events will be discarded.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     message("")
[2024-05-09 18:59:20]     make_perfview
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare const $DND_AREAS := 4
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_label $label1 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label2 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label3 (1,1)
[2024-05-09 18:59:20]     declare ui_label $label4 (1,1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare $i
[2024-05-09 18:59:20]     declare %ID[$DND_AREAS]
[2024-05-09 18:59:20]     %ID[0] := get_ui_id($label1)
[2024-05-09 18:59:20]     %ID[1] := get_ui_id($label2)
[2024-05-09 18:59:20]     %ID[2] := get_ui_id($label3)
[2024-05-09 18:59:20]     %ID[3] := get_ui_id($label4)
[2024-05-09 18:59:20]     declare !track_names[$DND_AREAS]
[2024-05-09 18:59:20]     !track_names[0] := "Synth 1"
[2024-05-09 18:59:20]     !track_names[1] := "Synth 2"
[2024-05-09 18:59:20]     !track_names[2] := "Bass"
[2024-05-09 18:59:20]     !track_names[3] := "Melody"
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     mf_insert_file(get_folder($GET_FOLDER_PATCH_DIR) & "my_midi.mid", 0, 0, 0)
[2024-05-09 18:59:20]     { declare export areas, area 0 serves as an edit buffer, so add one extra }
[2024-05-09 18:59:20]     mf_set_num_export_areas($DND_AREAS + 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     $i := 0
[2024-05-09 18:59:20]     while ($i < $DND_AREAS)
[2024-05-09 18:59:20]         set_control_par(%ID[$i], $CONTROL_PAR_DND_BEHAVIOUR, 1)
[2024-05-09 18:59:20]         set_control_par(%ID[$i], $CONTROL_PAR_MIDI_EXPORT_AREA_IDX, $i + 1)
[2024-05-09 18:59:20]         set_control_par_str(%ID[$i], $CONTROL_PAR_TEXT, mf_get_last_filename & " "
[2024-05-09 18:59:20] & !track_names[$i])
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         mf_set_export_area(!track_names[$i], -1, -1, $i, $i)
[2024-05-09 18:59:20]         mf_copy_export_area($i + 1)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         inc($i)
[2024-05-09 18:59:20]     end while
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] MIDI file loader which allows exporting first four tracks as individual MIDI files. Utilizes
[2024-05-09 18:59:20] mf_get_last_filename() to show the exact name of the MIDI file that was loaded.
[2024-05-09 18:59:20] ------------------------------ mf_get_mark ------------------------------
[2024-05-09 18:59:20] Page 242, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8355
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_mark(<event-id>, <mark>)
[2024-05-09 18:59:20] Checks if an event is marked or not. Returns 1 if it is marked or 0 if it is not.
[2024-05-09 18:59:20] <event-id>: The ID of the event to be edited
[2024-05-09 18:59:20] <mark>: The event mark number, $MARK_1 ... $MARK_10 . You can also assign
[2024-05-09 18:59:20] more than one mark to a single event, either by typing the command again, or
[2024-05-09 18:59:20] by using the bitwise .or. operator, or by simply summing the event marks.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
[2024-05-09 18:59:20] by_marks()
[2024-05-09 18:59:20] by_track()
[2024-05-09 18:59:20] mf_set_mark()
[2024-05-09 18:59:20] mf_get_mark()
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_mark()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_mark
[2024-05-09 18:59:20] Parameters: event-id,mark
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Checks if an event is marked or not. Returns 1 if it is marked or 0 if it is not.
[2024-05-09 18:59:20] <event-id>: The ID of the event to be edited
[2024-05-09 18:59:20] <mark>: The event mark number, $MARK_1 ... $MARK_10 . You can also assign
[2024-05-09 18:59:20] more than one mark to a single event, either by typing the command again, or
[2024-05-09 18:59:20] by using the bitwise .or. operator, or by simply summing the event marks.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
[2024-05-09 18:59:20] by_marks()
[2024-05-09 18:59:20] by_track()
[2024-05-09 18:59:20] mf_set_mark()
[2024-05-09 18:59:20] mf_get_mark()
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_get_next ------------------------------
[2024-05-09 18:59:20] Page 243, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8377
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_next(<track-index>)
[2024-05-09 18:59:20] Moves the position marker to the next event in the MIDI track.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] load_midi_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_next()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_next
[2024-05-09 18:59:20] Parameters: track-index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Moves the position marker to the next event in the MIDI track.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] load_midi_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_get_next_at ------------------------------
[2024-05-09 18:59:20] Page 244, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8397
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_next_at(<track-index>, <pos>)
[2024-05-09 18:59:20] Moves the position marker to the next event in the MIDI track right after the defined position.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20] <pos>: Position in MIDI ticks.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] load_midi_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_next_at()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_next_at
[2024-05-09 18:59:20] Parameters: track-index,pos
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Moves the position marker to the next event in the MIDI track right after the defined position.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20] <pos>: Position in MIDI ticks.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] load_midi_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_get_num_tracks ------------------------------
[2024-05-09 18:59:20] Page 245, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8418
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] Returns the number of tracks in the MIDI object.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_num_tracks()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_num_tracks
[2024-05-09 18:59:20] Parameters:
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Returns the number of tracks in the MIDI object.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_get_prev ------------------------------
[2024-05-09 18:59:20] Page 246, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8434
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_prev(<track-index>)
[2024-05-09 18:59:20] Moves the position marker to the previous event in the MIDI track.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] load_midi_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_prev()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_prev
[2024-05-09 18:59:20] Parameters: track-index
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Moves the position marker to the previous event in the MIDI track.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] load_midi_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev_at()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_get_prev_at ------------------------------
[2024-05-09 18:59:20] Page 247, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8454
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_get_prev_at(<track-index>, <pos>)
[2024-05-09 18:59:20] Moves the position marker to the first event before the defined position.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20] <pos>: Position in MIDI ticks.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] load_midi_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_get_prev_at()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_get_prev_at
[2024-05-09 18:59:20] Parameters: track-index,pos
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Moves the position marker to the first event before the defined position.
[2024-05-09 18:59:20] <track-index>: The number of the track you want to edit. -1 refers to the whole file.
[2024-05-09 18:59:20] <pos>: Position in MIDI ticks.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Using this command will also select the event at the position marker for editing.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] load_midi_file()
[2024-05-09 18:59:20] mf_get_first()
[2024-05-09 18:59:20] mf_get_next()
[2024-05-09 18:59:20] mf_get_next_at()
[2024-05-09 18:59:20] mf_get_num_tracks()
[2024-05-09 18:59:20] mf_get_prev()
[2024-05-09 18:59:20] mf_get_last()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_insert_event ------------------------------
[2024-05-09 18:59:20] Page 248, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8475
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_insert_event(<track>, <pos>, <command>, <byte1>, <byte2>)
[2024-05-09 18:59:20] Activates an inactive MIDI event in the MIDI object. However, because the command and position
[2024-05-09 18:59:20] are defined in this command, it can be considered as an insertion.
[2024-05-09 18:59:20] <track>: The track into which the event will be inserted.
[2024-05-09 18:59:20] <pos>: The position at which the event will be inserted, in ticks.
[2024-05-09 18:59:20] <command>: Defines the command type of the event, can be one of the following:
[2024-05-09 18:59:20] $MIDI_COMMAND_NOTE_ON
[2024-05-09 18:59:20] $MIDI_COMMAND_POLY_AT
[2024-05-09 18:59:20] $MIDI_COMMAND_CC
[2024-05-09 18:59:20] $MIDI_COMMAND_PROGRAM_CHANGE
[2024-05-09 18:59:20] $MIDI_COMMAND_MONO_AT
[2024-05-09 18:59:20] $MIDI_COMMAND_PITCH_BEND
[2024-05-09 18:59:20] <byte1>The first byte of the command.
[2024-05-09 18:59:20] <byte2>The second byte of the command.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     It is not possible to insert MIDI events without first setting an event buffer size with the
[2024-05-09 18:59:20] mf_set_buffer_size() command.
[2024-05-09 18:59:20] •     Using this command when the buffer is full, i.e. has a size of zero, will do nothing.
[2024-05-09 18:59:20] •     You can retrieve the event ID of the inserted event into a variable by writing:
[2024-05-09 18:59:20] <variable> := mf_insert_event(<track>, <pos>, <command>, <byte1>,
[2024-05-09 18:59:20] <byte2>)
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_set_buffer_size()
[2024-05-09 18:59:20] mf_get_buffer_size()
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_insert_event()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_insert_event
[2024-05-09 18:59:20] Parameters: track,pos,command,byte1,byte2
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Activates an inactive MIDI event in the MIDI object. However, because the command and position
[2024-05-09 18:59:20] are defined in this command, it can be considered as an insertion.
[2024-05-09 18:59:20] <track>: The track into which the event will be inserted.
[2024-05-09 18:59:20] <pos>: The position at which the event will be inserted, in ticks.
[2024-05-09 18:59:20] <command>: Defines the command type of the event, can be one of the following:
[2024-05-09 18:59:20] $MIDI_COMMAND_NOTE_ON
[2024-05-09 18:59:20] $MIDI_COMMAND_POLY_AT
[2024-05-09 18:59:20] $MIDI_COMMAND_CC
[2024-05-09 18:59:20] $MIDI_COMMAND_PROGRAM_CHANGE
[2024-05-09 18:59:20] $MIDI_COMMAND_MONO_AT
[2024-05-09 18:59:20] $MIDI_COMMAND_PITCH_BEND
[2024-05-09 18:59:20] <byte1>The first byte of the command.
[2024-05-09 18:59:20] <byte2>The second byte of the command.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - It is not possible to insert MIDI events without first setting an event buffer size with the
[2024-05-09 18:59:20] mf_set_buffer_size() command.
[2024-05-09 18:59:20] - Using this command when the buffer is full, i.e. has a size of zero, will do nothing.
[2024-05-09 18:59:20] - You can retrieve the event ID of the inserted event into a variable by writing:
[2024-05-09 18:59:20] <variable> := mf_insert_event(<track>, <pos>, <command>, <byte1>,
[2024-05-09 18:59:20] <byte2>)
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_set_buffer_size()
[2024-05-09 18:59:20] mf_get_buffer_size()
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_insert_file ------------------------------
[2024-05-09 18:59:20] Page 249, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8509
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_insert_file(<path>, <track-offset>, <position-offset>, <mode>)
[2024-05-09 18:59:20] Inserts a MIDI file into the object.
[2024-05-09 18:59:20] <path>: The absolute path of the MIDI file, including the file name.
[2024-05-09 18:59:20] <track-offset>: Applies a track offset to the MIDI data.
[2024-05-09 18:59:20] <position-offset>: Applies a position offset, in ticks, to the MIDI data.
[2024-05-09 18:59:20] <mode>: Defines the mode of insertion:
[2024-05-09 18:59:20] 0: Replaces all existing events
[2024-05-09 18:59:20] 1: Replaces only overlapping events
[2024-05-09 18:59:20] 2: Merges all events
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command runs synchronously in on init callback and asynchronously in all other
[2024-05-09 18:59:20] callbacks, so it is advised to use the on async_complete callback to verify the loading
[2024-05-09 18:59:20] status.
[2024-05-09 18:59:20] •     This command will pair Note On and Note Off events to a single Note On with a length
[2024-05-09 18:59:20] parameter. The Note Off events will be discarded.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Example
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $load_mf_id := -1
[2024-05-09 18:59:20]     declare @file_name
[2024-05-09 18:59:20]     declare @filepath
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     @file_name := "test.mid"
[2024-05-09 18:59:20]     @filepath := get_folder($GET_FOLDER_FACTORY_DIR) & @file_name
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $load_file
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control($load_file)
[2024-05-09 18:59:20]     $load_mf_id := mf_insert_file(@filepath, 0, 0, 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $load_mf_id)
[2024-05-09 18:59:20]         $load_mf_id := -1
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         if ($NI_ASYNC_EXIT_STATUS = 0)
[2024-05-09 18:59:20]             message("ERROR: MIDI file not found!")
[2024-05-09 18:59:20]         else
[2024-05-09 18:59:20]             message("Loaded MIDI file: " & @file_name & "!")
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Loading a MIDI file with a button. In order for this to work, you will need to put a MIDI file
[2024-05-09 18:59:20] called "test.mid" into your Kontakt factory data folder. Otherwise, the defined error message will
[2024-05-09 18:59:20] be displayed.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_insert_file()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_insert_file
[2024-05-09 18:59:20] Parameters: path,track-offset,position-offset,mode
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Inserts a MIDI file into the object.
[2024-05-09 18:59:20] <path>: The absolute path of the MIDI file, including the file name.
[2024-05-09 18:59:20] <track-offset>: Applies a track offset to the MIDI data.
[2024-05-09 18:59:20] <position-offset>: Applies a position offset, in ticks, to the MIDI data.
[2024-05-09 18:59:20] <mode>: Defines the mode of insertion:
[2024-05-09 18:59:20] 0: Replaces all existing events
[2024-05-09 18:59:20] 1: Replaces only overlapping events
[2024-05-09 18:59:20] 2: Merges all events
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command runs synchronously in on init callback and asynchronously in all other
[2024-05-09 18:59:20] callbacks, so it is advised to use the on async_complete callback to verify the loading
[2024-05-09 18:59:20] status.
[2024-05-09 18:59:20] - This command will pair Note On and Note Off events to a single Note On with a length
[2024-05-09 18:59:20] parameter. The Note Off events will be discarded.
[2024-05-09 18:59:20] >>>>>>>>>> Examples <<<<<<<<<<
[2024-05-09 18:59:20] on init
[2024-05-09 18:59:20]     declare $load_mf_id := -1
[2024-05-09 18:59:20]     declare @file_name
[2024-05-09 18:59:20]     declare @filepath
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     @file_name := "test.mid"
[2024-05-09 18:59:20]     @filepath := get_folder($GET_FOLDER_FACTORY_DIR) & @file_name
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]     declare ui_button $load_file
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on ui_control($load_file)
[2024-05-09 18:59:20]     $load_mf_id := mf_insert_file(@filepath, 0, 0, 0)
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] on async_complete
[2024-05-09 18:59:20]     if ($NI_ASYNC_ID = $load_mf_id)
[2024-05-09 18:59:20]         $load_mf_id := -1
[2024-05-09 18:59:20]
[2024-05-09 18:59:20]         if ($NI_ASYNC_EXIT_STATUS = 0)
[2024-05-09 18:59:20]             message("ERROR: MIDI file not found!")
[2024-05-09 18:59:20]         else
[2024-05-09 18:59:20]             message("Loaded MIDI file: " & @file_name & "!")
[2024-05-09 18:59:20]         end if
[2024-05-09 18:59:20]     end if
[2024-05-09 18:59:20] end on
[2024-05-09 18:59:20] Loading a MIDI file with a button. In order for this to work, you will need to put a MIDI file
[2024-05-09 18:59:20] called "test.mid" into your Kontakt factory data folder. Otherwise, the defined error message will
[2024-05-09 18:59:20] be displayed.
[2024-05-09 18:59:20] ------------------------------ mf_remove_event ------------------------------
[2024-05-09 18:59:20] Page 251, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8570
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_remove_event(<event-id>)
[2024-05-09 18:59:20] Deactivates an event in the MIDI object, effectively removing it.
[2024-05-09 18:59:20] <event-id>: The ID of the event to be deactivated.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Using this command will decrease the MIDI event buffer size by one.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_set_buffer_size()
[2024-05-09 18:59:20] mf_get_buffer_size()
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_remove_event()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_remove_event
[2024-05-09 18:59:20] Parameters: event-id
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Deactivates an event in the MIDI object, effectively removing it.
[2024-05-09 18:59:20] <event-id>: The ID of the event to be deactivated.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Using this command will decrease the MIDI event buffer size by one.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_set_buffer_size()
[2024-05-09 18:59:20] mf_get_buffer_size()
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_reset ------------------------------
[2024-05-09 18:59:20] Page 252, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8588
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] Resets the MIDI object, sets the event buffer to zero, and removes all events.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     This command purges all data in the MIDI object. Use with caution!
[2024-05-09 18:59:20] •     This command is asynchronous, thus it returns an async ID and calls the on
[2024-05-09 18:59:20] async_complete callback.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_set_buffer_size()
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_reset()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_reset
[2024-05-09 18:59:20] Parameters:
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Resets the MIDI object, sets the event buffer to zero, and removes all events.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - This command purges all data in the MIDI object. Use with caution!
[2024-05-09 18:59:20] - This command is asynchronous, thus it returns an async ID and calls the on
[2024-05-09 18:59:20] async_complete callback.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_set_buffer_size()
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_set_buffer_size ------------------------------
[2024-05-09 18:59:20] Page 253, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8607
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_set_buffer_size(<num-events>)
[2024-05-09 18:59:20] Defines a number of inactive MIDI events, that can be activated and edited.
[2024-05-09 18:59:20] <num-events>: The size of the MIDI object edit buffer.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Using the mf_insert_event() and mf_remove_event() technically activates or
[2024-05-09 18:59:20] deactivates events in the buffer.
[2024-05-09 18:59:20] •     It is not possible to insert MIDI events without setting a buffer size first.
[2024-05-09 18:59:20] •     The maximum buffer size is 1000000 events, including both active and inactive events.
[2024-05-09 18:59:20] •     This command runs synchronously in on init callback and asynchronously in all other
[2024-05-09 18:59:20] callbacks, so it is advised to use the on async_complete callback to verify the loading
[2024-05-09 18:59:20] status.
[2024-05-09 18:59:20] •     Inserting a MIDI event will decrease the buffer size by one. Removing an event will increase it
[2024-05-09 18:59:20] by one.
[2024-05-09 18:59:20] •     Inserting a MIDI file will not affect the buffer.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_get_buffer_size()
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_set_buffer_size()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_set_buffer_size
[2024-05-09 18:59:20] Parameters: num-events
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Defines a number of inactive MIDI events, that can be activated and edited.
[2024-05-09 18:59:20] <num-events>: The size of the MIDI object edit buffer.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Using the mf_insert_event() and mf_remove_event() technically activates or
[2024-05-09 18:59:20] deactivates events in the buffer.
[2024-05-09 18:59:20] - It is not possible to insert MIDI events without setting a buffer size first.
[2024-05-09 18:59:20] - The maximum buffer size is 1000000 events, including both active and inactive events.
[2024-05-09 18:59:20] - This command runs synchronously in on init callback and asynchronously in all other
[2024-05-09 18:59:20] callbacks, so it is advised to use the on async_complete callback to verify the loading
[2024-05-09 18:59:20] status.
[2024-05-09 18:59:20] - Inserting a MIDI event will decrease the buffer size by one. Removing an event will increase it
[2024-05-09 18:59:20] by one.
[2024-05-09 18:59:20] - Inserting a MIDI file will not affect the buffer.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_get_buffer_size()
[2024-05-09 18:59:20] mf_reset()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_set_event_par ------------------------------
[2024-05-09 18:59:20] Page 254, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8634
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_set_event_par(<event-id>, <parameter>, <value>)
[2024-05-09 18:59:20] Sets an event parameter.
[2024-05-09 18:59:20] <event-id>: The ID of the event to be edited.
[2024-05-09 18:59:20] <parameter>: The event parameter, either one of four freely assignable event parameters:
[2024-05-09 18:59:20] $EVENT_PAR_0
[2024-05-09 18:59:20] $EVENT_PAR_1
[2024-05-09 18:59:20] $EVENT_PAR_2
[2024-05-09 18:59:20] $EVENT_PAR_3
[2024-05-09 18:59:20] Or the built-in parameters of a event:
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_CHANNEL
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_COMMAND
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_BYTE_1
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_BYTE_2
[2024-05-09 18:59:20] $EVENT_PAR_POS
[2024-05-09 18:59:20] $EVENT_PAR_NOTE_LENGTH
[2024-05-09 18:59:20] $EVENT_PAR_ID
[2024-05-09 18:59:20] $EVENT_PAR_TRACK_NR
[2024-05-09 18:59:20] <value>: The value of the event parameter.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     You can control all events in the MIDI object by using the $ALL_EVENTS constant as the event
[2024-05-09 18:59:20] ID.
[2024-05-09 18:59:20] •     You can access the currently selected event by using the $CURRENT_EVENT constant.
[2024-05-09 18:59:20] •     You can also control events by track, or group them with event marks by using the
[2024-05-09 18:59:20] by_track() and by_marks() commands.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
[2024-05-09 18:59:20] by_marks()
[2024-05-09 18:59:20] by_track()
[2024-05-09 18:59:20] mf_set_mark()
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_set_event_par()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_set_event_par
[2024-05-09 18:59:20] Parameters: event-id,parameter,value
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets an event parameter.
[2024-05-09 18:59:20] <event-id>: The ID of the event to be edited.
[2024-05-09 18:59:20] <parameter>: The event parameter, either one of four freely assignable event parameters:
[2024-05-09 18:59:20] $EVENT_PAR_0
[2024-05-09 18:59:20] $EVENT_PAR_1
[2024-05-09 18:59:20] $EVENT_PAR_2
[2024-05-09 18:59:20] $EVENT_PAR_3
[2024-05-09 18:59:20] Or the built-in parameters of a event:
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_CHANNEL
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_COMMAND
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_BYTE_1
[2024-05-09 18:59:20] $EVENT_PAR_MIDI_BYTE_2
[2024-05-09 18:59:20] $EVENT_PAR_POS
[2024-05-09 18:59:20] $EVENT_PAR_NOTE_LENGTH
[2024-05-09 18:59:20] $EVENT_PAR_ID
[2024-05-09 18:59:20] $EVENT_PAR_TRACK_NR
[2024-05-09 18:59:20] <value>: The value of the event parameter.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - You can control all events in the MIDI object by using the $ALL_EVENTS constant as the event
[2024-05-09 18:59:20] ID.
[2024-05-09 18:59:20] - You can access the currently selected event by using the $CURRENT_EVENT constant.
[2024-05-09 18:59:20] - You can also control events by track, or group them with event marks by using the
[2024-05-09 18:59:20] by_track() and by_marks() commands.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
[2024-05-09 18:59:20] by_marks()
[2024-05-09 18:59:20] by_track()
[2024-05-09 18:59:20] mf_set_mark()
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_set_mark ------------------------------
[2024-05-09 18:59:20] Page 257, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8730
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_set_mark(<event-id>, <mark>, <status>)
[2024-05-09 18:59:20] Marks an event, so that you may group events together and process that group quickly.
[2024-05-09 18:59:20] <event-id>: The ID of the event to be marked.
[2024-05-09 18:59:20] <mark>: The event mark number, $MARK_1 ... $MARK_10 . You can also assign
[2024-05-09 18:59:20] more than one mark to a single event, either by typing the command again, or
[2024-05-09 18:59:20] by using the bitwise .or. operator, or by simply summing the event marks.
[2024-05-09 18:59:20] <status>: Set this to 1 to mark an event or to 0 to unmark an event.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
[2024-05-09 18:59:20] by_marks()
[2024-05-09 18:59:20] by_track()
[2024-05-09 18:59:20] mf_get_mark()
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_set_mark()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_set_mark
[2024-05-09 18:59:20] Parameters: event-id,mark,status
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Marks an event, so that you may group events together and process that group quickly.
[2024-05-09 18:59:20] <event-id>: The ID of the event to be marked.
[2024-05-09 18:59:20] <mark>: The event mark number, $MARK_1 ... $MARK_10 . You can also assign
[2024-05-09 18:59:20] more than one mark to a single event, either by typing the command again, or
[2024-05-09 18:59:20] by using the bitwise .or. operator, or by simply summing the event marks.
[2024-05-09 18:59:20] <status>: Set this to 1 to mark an event or to 0 to unmark an event.
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_insert_file()
[2024-05-09 18:59:20] mf_insert_event()
[2024-05-09 18:59:20] mf_remove_event()
[2024-05-09 18:59:20] Events and MIDI: $ALL_EVENTS, $CURRENT_EVENT
[2024-05-09 18:59:20] by_marks()
[2024-05-09 18:59:20] by_track()
[2024-05-09 18:59:20] mf_get_mark()
[2024-05-09 18:59:20] mf_get_id()
[2024-05-09 18:59:20] save_midi_file()
[2024-05-09 18:59:20] ------------------------------ mf_set_num_export_areas ------------------------------
[2024-05-09 18:59:20] Page 258, File "C:\zz_Kontakt_Script_IDE\vscode-ksp-compiler\doc_parser\cfg\ksp_7_8\KSP_Reference_Manual_Fixed.txt.py", line 8752
[2024-05-09 18:59:20] ********** Parsed Text Start **********
[2024-05-09 18:59:20] mf_set_num_export_areas(<num-areas>)
[2024-05-09 18:59:20] Sets the number of export areas, with a maximum of 512.
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] Remarks
[2024-05-09 18:59:20] •     Area index 0 is always set with mf_set_export_area().
[2024-05-09 18:59:20] •     The contents of area index 0 can be copied to other areas by calling
[2024-05-09 18:59:20] mf_copy_export_area().
[2024-05-09 18:59:20]
[2024-05-09 18:59:20] See Also
[2024-05-09 18:59:20] mf_set_export_area()
[2024-05-09 18:59:20] mf_copy_export_area()
[2024-05-09 18:59:20] ********** Parsed Text End **********
[2024-05-09 18:59:20] Headline: 20. MIDI Object Commands
[2024-05-09 18:59:20] Category: mf_set_num_export_areas()
[2024-05-09 18:59:20] Source: BUILT-IN
[2024-05-09 18:59:20] Name: mf_set_num_export_areas
[2024-05-09 18:59:20] Parameters: num-areas
[2024-05-09 18:59:20] >>>>>>>>>> Description <<<<<<<<<<
[2024-05-09 18:59:20] Sets the number of export areas, with a maximum of 512.
[2024-05-09 18:59:20] >>>>>>>>>> Remarks <<<<<<<<<<
[2024-05-09 18:59:20] - Area index 0 is always set with mf_set_export_area().
[2024-05-09 18:59:20] - The contents of area index 0 can be copied to other areas by calling
[2024-05-09 18:59:20] mf_copy_export_area().
[2024-05-09 18:59:20] >>>>>>>>>> See Also <<<<<<<<<<
[2024-05-09 18:59:20] mf_set_export_area()
[2024-05-09 18:59:20] mf_copy_export_area()

Process finished with exit code 0
