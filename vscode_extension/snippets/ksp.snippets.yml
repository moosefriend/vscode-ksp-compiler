#############################################################################
# This file is part of the vscode-ksp-compiler distribution
# (https://github.com/moosefriend/vscode-ksp-compiler).
#
# Copyright (c) 2024 MooseFriend (https://github.com/moosefriend)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
##############################################################################
# ---------------- Auto generated code: Generated by /data/Excel2Snippet.py ----------------
boolean_op_and:
    body:
    - ${1:a} and ${2:b}
    description: 'Boolean Operator: true if a is true and b is true'
    prefix: and
boolean_op_eq:
    body:
    - ${1:x} = ${2:y}
    description: 'Boolean Operator: equal'
    prefix: '='
boolean_op_gt:
    body:
    - ${1:x} >= ${2:y}
    description: 'Boolean Operator: grater than or equal'
    prefix: '>='
boolean_op_lt:
    body:
    - ${1:x} <= ${2:y}
    description: 'Boolean Operator: less than or equal'
    prefix: <=
boolean_op_not:
    body:
    - not ${1:x}
    description: 'Boolean Operator: true if a is false and vice versa'
    prefix: not
boolean_op_not_eq:
    body:
    - '${1:x} # ${2:y}'
    description: 'Boolean Operator: not equal'
    prefix: '#'
boolean_op_or:
    body:
    - ${1:a} or ${2:b}
    description: 'Boolean Operator: true if a is true or b is true'
    prefix: or
const:
    body:
    - declare const $${1:name} := ${2:value}
    description: declare a user-defined polyphonic variable to store a single integer
        value per note event
    prefix: const
declare:
    body:
    - declare ${1:name}
    description: declare a user-defined variable
    prefix: declare
endregion:
    body:
    - '{#endregion}'
    description: ''
    prefix: endregion
if:
    body:
    - if (${1:condition})
    - '    ${2:{your code here\}}'
    - end if
    description: if statement
    prefix: if
ifelse:
    body:
    - if (${1:condition})
    - '    ${2:{your code here\}}'
    - else
    - '    ${3:{your code here\}}'
    - end if
    description: if...else statement
    prefix: ifelse
int:
    body:
    - declare $${1:name}
    description: declare a user-defined variable to store a single integer value
    prefix: int
inta:
    body:
    - declare %${1:name}[${2:size}]
    description: declare a user-defined array to store single integer values at specific
        indices
    prefix: int array
on _pgs_changed:
    body:
    - '{ ${1:executed whenever any pgs_set_key_val() command is executed in any script}
        }'
    - on _pgs_changed
    - '    ${2:{your code here\}}'
    - end on
    description: executed whenever any pgs_set_key_val() command is executed in any
        script
    prefix: on _pgs_changed
on async_complete:
    body:
    - '{ ${1:async complete callback, triggered after the execution of any load/save
        command} }'
    - on async_complete
    - '    ${2:{your code here\}}'
    - end on
    description: async complete callback, triggered after the execution of any load/save
        command
    prefix: on async_complete
on controller:
    body:
    - '{ ${1:MIDI controller callback, executed whenever a CC, pitch bend or channel
        pressure message is received} }'
    - on controller
    - '    ${2:{your code here\}}'
    - end on
    description: MIDI controller callback, executed whenever a CC, pitch bend or channel
        pressure message is received
    prefix: on controller
on init:
    body:
    - on init
    - '    make_perfview'
    - '    message("")'
    - '    set_script_title("${2:title}")'
    - '    ${3:{your code here\}}'
    - end on
    description: initialization callback, executed when the script was successfully
        analyzed
    prefix: on init
on listener:
    body:
    - '{ ${1:listener callback, executed at definable time intervals or whenever a
        transport command is received} }'
    - on listener
    - '    ${2:{your code here\}}'
    - end on
    description: listener callback, executed at definable time intervals or whenever
        a transport command is received
    prefix: on listener
on midi_in:
    body:
    - '{ ${1:midi callback, triggered by every incoming MIDI event} }'
    - on midi_in
    - '    ${2:{your code here\}}'
    - end on
    description: Like ignore_event(), ignore_midi is a very "strong" command. Keep
        in mind that ignore_midi will ignore all incoming MIDI events. If you simply
        want to change the MIDI channel and/or any of the MIDI bytes, you can also
        use set_event_par().
    prefix: on midi_in
on note:
    body:
    - '{ ${1:note callback, executed whenever a note on message is received} }'
    - on note
    - '    ${2:{your code here\}}'
    - end on
    description: note callback, executed whenever a note on message is received
    prefix: on note
on nrpn:
    body:
    - '{ ${1:nrpn(unregistered parameter number) callback message is received} }'
    - on nrpn
    - '    ${2:{your code here\}}'
    - end on
    description: nrpn(unregistered parameter number) callback message is received
    prefix: on nrpn
on persistence_changed:
    body:
    - '{ ${1:executed after the init callback or whenever a snapshot has been loaded}
        }'
    - on persistence_changed
    - '    ${2:{your code here\}}'
    - end on
    description: executed after the init callback or whenever a snapshot has been
        loaded
    prefix: on persistence_changed
on pgs_changed:
    body:
    - '{ ${1:executed whenever any pgs_set_key_val() command is executed in any script}
        }'
    - on pgs_changed
    - '    ${2:{your code here\}}'
    - end on
    description: executed whenever any pgs_set_key_val() command is executed in any
        script
    prefix: on pgs_changed
on poly_at:
    body:
    - '{ ${1:polyphonic aftertouch callback, executed whenever a polyphonic aftertouch
        message is received} }'
    - on poly_at
    - '    ${2:{your code here\}}'
    - end on
    description: polyphonic aftertouch callback, executed whenever a polyphonic aftertouch
        message is received
    prefix: on poly_at
on release:
    body:
    - '{ ${1:release callback, executed whenever a note off message is received} }'
    - on release
    - '    ${2:{your code here\}}'
    - end on
    description: release callback, executed whenever a note off message is received
    prefix: on release
on rpn:
    body:
    - '{ ${1:rpn(registered parameter number) callback message is received} }'
    - on rpn
    - '    ${2:{your code here\}}'
    - end on
    description: rpn(registered parameter number) callback message is received
    prefix: on rpn
on ui_control:
    body:
    - '{ ${1:UI callback, executed whenever the user changes the respective UI element}
        }'
    - on ui_control($${2:uiVariable})
    - '    ${3:{your code here\}}'
    - end on
    description: UI callback, executed whenever the user changes the respective UI
        element
    prefix: on ui_control
on ui_update:
    body:
    - '{ ${1:UI update callback, executed with every GUI change in KONTAKT} }'
    - on ui_update
    - '    ${2:{your code here\}}'
    - end on
    description: UI update callback, executed with every GUI change in KONTAKT
    prefix: on ui_update
polyphonicv:
    body:
    - declare polyphonic $${1:name}
    description: declare a user-defined polyphonic variable to store a single integer
        value per note event
    prefix: polyphonic
real:
    body:
    - declare ~${1:name}
    description: declare a user-defined variable to store a single real value
    prefix: real
reala:
    body:
    - declare ?${1:name}[${2:size}]
    description: declare a user-defined array to store single real values at specific
        indices
    prefix: real array
region:
    body:
    - '{#region}'
    description: ''
    prefix: region
select:
    body:
    - select (${1:variable})
    - '    case ${2:case}'
    - '        ${3:{your code here\}}'
    - end select
    description: if statement
    prefix: select
string:
    body:
    - declare @${1:name}
    description: declare a user-defined string variable to store text
    prefix: string
stringa:
    body:
    - declare !${1:name}[${2:size}]
    description: declare a user-defined string array to store text strings at specified
        indices
    prefix: string array
ui_button:
    body:
    - declare ui_button $${1:variable-name}
    description: create a user interface button
    prefix: ui_button
ui_file_selector:
    body:
    - declare ui_file_selector $${1:variable-name}
    description: create a user interface button
    prefix: ui_file_selector
ui_knob:
    body:
    - declare ui_knob $${1:variable-name}(${2:min}, ${3:max}, ${4:display-ratio})
    description: create a user interface button
    prefix: ui_knob
ui_label:
    body:
    - declare ui_label $${1:variable-name}(${2:width}, ${3:height})
    description: create a user interface text label
    prefix: ui_label
ui_level_meter:
    body:
    - declare ui_level_meter $${1:variable-name}
    description: create a level meter
    prefix: ui_level_meter
ui_menu:
    body:
    - declare ui_menu $${1:variable-name}
    description: create a user interface drop-down menu
    prefix: ui_menu
ui_mouse_area:
    body:
    - declare ui_mouse_area $${1:variable-name}
    description: create a user interface mouse area
    prefix: ui_mouse_area
ui_panel:
    body:
    - declare ui_panel $${1:variable-name}
    description: create a user interface panel
    prefix: ui_panel
ui_slider:
    body:
    - declare ui_slider $${1:variable-name}(${2:min}, ${3:max})
    description: create a user interface slider
    prefix: ui_slider
ui_switch:
    body:
    - declare ui_switch $${1:variable-name}
    description: create a user interface switch
    prefix: ui_switch
ui_table:
    body:
    - declare ui_table %${1:array}[${2:colmns}](${3:width}, ${4:height}, ${5:range})
    description: create a user interface switch
    prefix: ui_table
ui_text_edit:
    body:
    - declare ui_text_edit @${1:variable-name}
    description: create a text edit field
    prefix: ui_text_edit
ui_value_edit:
    body:
    - declare ui_value_edit $${1:variable-name}(${2:min}, ${3:max}, ${4:display-ratio})
    description: create a user interface number box
    prefix: ui_value_edit
ui_waveform:
    body:
    - declare ui_waveform $${1:variable-name}(${2:width}, ${3:height})
    description: create a waveform control to display zones and slices. Can also be
        used to control specific parameters per slice and for MIDI drag & drop functionality.
    prefix: ui_waveform
ui_xy:
    body:
    - declare ui_xy ?$${1:variable-name}[${2:num-of-elements}]
    description: create an XY pad
    prefix: ui_xy
while:
    body:
    - while (${1:condition})
    - '    ${2:{your code here\}}'
    - end while
    description: while statement
    prefix: while
