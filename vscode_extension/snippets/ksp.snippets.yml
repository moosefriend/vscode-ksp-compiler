#############################################################################
# This file is part of the vscode-ksp-compiler distribution
# (https://github.com/moosefriend/vscode-ksp-compiler).
#
# Copyright (c) 2024 MooseFriend (https://github.com/moosefriend)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
##############################################################################
# This file will be converted to out/json/ksp.snippets.json
# Then callbacks and widgets will be injected at the end
const:
    body:
    - declare const \$${1:name} := ${2:value}
    description: Declare a user-defined polyphonic variable to store a single integer
        value per note event
    prefix: const
declare:
    body:
    - declare ${1:name}
    description: Declare a user-defined variable
    prefix: declare
int:
    body:
    - declare \$${1:name}
    description: Declare a user-defined variable to store a single integer value
    prefix: int
inta:
    body:
    - declare %${1:name}[${2:size}]
    description: Declare a user-defined array to store single integer values at specific
        indices
    prefix: int array
polyphonicv:
    body:
    - declare polyphonic \$${1:name}
    description: Declare a user-defined polyphonic variable to store a single integer
        value per note event
    prefix: polyphonic
real:
    body:
    - declare ~${1:name}
    description: Declare a user-defined variable to store a single real value
    prefix: real
reala:
    body:
    - declare ?${1:name}[${2:size}]
    description: Declare a user-defined array to store single real values at specific
        indices
    prefix: real array
string:
    body:
    - declare @${1:name}
    description: Declare a user-defined string variable to store text
    prefix: string
stringa:
    body:
    - declare !${1:name}[${2:size}]
    description: Declare a user-defined string array to store text strings at specified
        indices
    prefix: string array
if:
    body:
    - if (${1:condition})
    - '    ${2:$LINE_COMMENT your code here}'
    - end if
    description: if statement
    prefix: if
ifelse:
    body:
    - if (${1:condition})
    - '    ${2:$LINE_COMMENT your code here}'
    - else
    - '    ${3:$LINE_COMMENT your code here}'
    - end if
    description: if...else statement
    prefix: ifelse
select:
    body:
    - select (${1:variable})
    - '    case ${2:case}'
    - '        ${3:$LINE_COMMENT your code here}'
    - end select
    description: select statement
    prefix: select
while:
    body:
    - while (${1:condition})
    - '    ${2:$LINE_COMMENT your code here}'
    - end while
    description: while statement
    prefix: while
boolean_op_and:
    body:
    - ${1:a} and ${2:b}
    description: 'Boolean Operator: true if a is true and b is true'
    prefix: and
boolean_op_eq:
    body:
    - ${1:x} = ${2:y}
    description: 'Boolean Operator: equal'
    prefix: '='
boolean_op_gt:
    body:
    - ${1:x} >= ${2:y}
    description: 'Boolean Operator: grater than or equal'
    prefix: '>='
boolean_op_lt:
    body:
    - ${1:x} <= ${2:y}
    description: 'Boolean Operator: less than or equal'
    prefix: <=
boolean_op_not:
    body:
    - not ${1:x}
    description: 'Boolean Operator: true if a is false and vice versa'
    prefix: not
boolean_op_not_eq:
    body:
    - '${1:x} # ${2:y}'
    description: 'Boolean Operator: not equal'
    prefix: '#'
boolean_op_or:
    body:
    - ${1:a} or ${2:b}
    description: 'Boolean Operator: true if a is true or b is true'
    prefix: or
# Here the callbacks and widgets will be injected in the *.json file
<<built_in_callbacks>>:
<<built_in_widgets>>:
