#############################################################################
# This file is part of the vscode-ksp-compiler distribution
# (https://github.com/moosefriend/vscode-ksp-compiler).
#
# Copyright (c) 2024 MooseFriend (https://github.com/moosefriend)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
##############################################################################
# TextMate Grammar for KSP Script
# This file will be converted to out/ksp.tmGrammar.json
# Then the place holder <<...>> will be injected based on the *.csv files
scopeName: source.ksp

name: KSP

comment: NI Kontakt Script Syntax

fileTypes:
- ksp
- txt

patterns:
- include: '#pragma'
- include: '#macro'
- include: '#f_string'
- include: '#string'
- include: '#number'
- include: '#comment'
- include: '#callback'
- include: '#user_function'
- include: '#constant'
- include: '#variable'
- include: '#ui_control'
- include: '#control_statement'
- include: '#operator'
- include: '#builtin_command'
- include: '#other_keyword'
- include: '#identifier'

repository:
    # Extended Syntax
    pragma:
        patterns:
        - name: pragma.compiler.ksp
          match: \{\s*#pragma\s+(save_compiled_source|preserve_names|compile_with(|out)\s+(remove_whitespace|compact_variables|combine_callbacks|extra_syntax_checks|extra_branch_optimization|optimize_code|add_compile_date|sanitize_exit_command))\s*\}

    # Extended Syntax
    macro:
        patterns:
        -   name: macro.define.ksp
            comment: Define macros
            match: define\s+[a-z|A-Z][a-z|A-Z|0-9]\s*:=\s*(\S.*)$

    # Extended Syntax: F-String support f'...', with code highlighting inside <...>
    f_string:
        patterns:
        -   name: source.interpolated.f.ksp
            comment: f-string single quoted
            begin: "(f)(')"
            beginCaptures:
                '1':
                    name: keyword.other.ksp
                '2':
                    name: punctuation.definition.string.begin.ksp
            end: "'"
            endCaptures:
                '0':
                    name: punctuation.definition.string.end.ksp
            patterns:
                -   name: constant.character.escape.ksp
                    match: '\\.'
                -   name: meta.interpolation.ksp
                    begin: '<'
                    beginCaptures:
                        '0':
                            name: punctuation.section.interpolation.begin.ksp
                    end: '>'
                    endCaptures:
                        '0':
                            name: punctuation.section.interpolation.end.ksp
                    patterns:
                        # Recursively include all main patterns for code highlighting inside interpolation
                        - include: '#number'
                        - include: '#constant'
                        - include: '#variable'
                        - include: '#ui_control'
                        - include: '#operator'
                        - include: '#builtin_command'
                        - include: '#identifier'
                -   name: string.quoted.single.ksp
                    match: "[^'\\<]+"

    string:
        patterns:
        -   name: string.quoted.double.ksp
            comment: String literals
            begin: '"'
            beginCaptures:
                '0':
                    name: punctuation.definition.string.begin.ksp
            end: '"'
            endCaptures:
                '0':
                    name: punctuation.definition.string.end.ksp
            patterns:
                -   name: constant.character.escape.ksp
                    match: '\\.'
        # Extended Syntax
        -   name: string.quoted.single.ksp
            comment: String literals
            begin: "'"
            beginCaptures:
                '0':
                    name: punctuation.definition.string.begin.ksp
            end: "'"
            endCaptures:
                '0':
                    name: punctuation.definition.string.end.ksp
            patterns:
                -   name: constant.character.escape.ksp
                    match: '\\.'

    number:
        patterns:
        -   name: constant.numeric.float.ksp
            match: ((0|[1-9][0-9]*)\.[0-9]+)\b
        -   name: constant.numeric.float.ksp
            match: (\.[0-9]+)\b
        -   name: constant.numeric.dec.ksp
            match: ([0-9]+)\b
        -   name: constant.numeric.hex.ksp
            match: ([0-9|a-f|A-F]+[hH])\b
        # Extended Syntax
        -   name: constant.numeric.hex.ksp
            match: (0[xX]([0-9|a-f|A-F]+))\b
        -   name: constant.numeric.bin.ksp
            match: (b[01]+)\b
        -   name: constant.numeric.bin.ksp
            match: ([01]+b)\b

    comment:
        patterns:
        -   name: comment.block.ksp
            begin: \{
            captures:
                '0':
                    name: punctuation.definition.comment.ksp
            end: \}
        # Extended Syntax
        -   name: comment.line.ksp
            match: (//).*$\n?
            captures:
                '1':
                    name: punctuation.definition.comment.ksp
        -   name: comment.block.ksp;
            begin: /\*
            captures:
                '0':
                    name = punctuation.definition.comment.ksp
            end: \*/

    callback:
        patterns:
        -   name: keyword.callback.begin.ksp
            # List of built_in_callbacks.csv column Name
            match: ^\s*on\s+(<<built_in_callbacks>>)\b
        -   name: keyword.callback.end.ksp
            match: ^\s*end\s+on\b

    user_function:
        patterns:
        -   name: keyword.userfunction.end.ksp
            match: ^\s*end\s+function\b
        -   name: keyword.userfunction.begin.ksp
            match: ^\s*function\b

    # Extended Syntax
    constant:
        patterns:
        -   name: constant.block.ksp
            match: ^\s*const\s+\b
        -   name: constant.block.ksp
            match: ^\s*end\s+const\b

    # Extended Syntax
    struct:
        patterns:
        -   name: struct.block.begin.ksp
            match: ^\s*struct\s+\b
        -   name: struct.block.end.ksp
            match: ^\s*end\s+struct\b

    variable:
        patterns:
        -   name: variable.other.ksp
            match: (\$|\~|\?|@|!|%)([0-9|a-z|A-Z|_]+)
        -   name: keyword.declare.ksp
            match: (declare|const|polyphonic)\b
        -   name: variable.preprocessor.ksp
            match: (SET_CONDITION|RESET_CONDITION|USE_CODE_IF|USE_CODE_IF_NOT|END_USE_CODE|NO_SYS_SCRIPT_GROUP_START|NO_SYS_SCRIPT_PEDAL|NO_SYS_SCRIPT_RLS_TRIG)\b

    ui_control:
        patterns:
        -   name: keyword.other.ui.ksp
            # List of built_in_widgets.csv column Name
            match: (<<built_in_widgets>>)\b

    control_statement:
        patterns:
        -   name: keyword.other.statements.ksp
            match: (if|else|end\s+if|select|case|to|end\s+select|while|end\s+while|in_range)\b
        # Extended Syntax
        -   name: keyword.other.statements.ksp
            match: (for|downto|step|else\s+if)\b

    operator:
        patterns:
        -   name: keyword.other.arithmeticop.ksp
            match: (mod)\b
        -   name: keyword.other.boolop1.ksp
            match: (and|or|xor|not)\b
        -   name: keyword.other.bitop2.ksp
            match: (\.and\.|\.or\.|\.xor\.|\.not\.)\b

    builtin_command:
        patterns:
        -   name: support.function.builtin.ksp
            # List of built_in_commands.csv column Name
            # List of built_in_functions.csv column Name
            match: (<<built_in_commands>>|<<built_in_functions>>)\b
        # Extended Syntax
        -   name: support.function.builtin.ksp
            match: import_nckp|concat\b

    other_keyword:
        patterns:
        -   name: keyword.other.ksp
            match: (on|end|function)\b

    identifier:
        patterns:
        -   name: entity.name
            match: ([a-z|A-Z|_]+[a-z|A-Z|_|0-9]*)
