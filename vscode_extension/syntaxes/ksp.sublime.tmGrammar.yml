#############################################################################
# This file is part of the vscode-ksp-compiler distribution
# (https://github.com/moosefriend/vscode-ksp-compiler).
#
# Copyright (c) 2024 MooseFriend (https://github.com/moosefriend)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
##############################################################################
# TextMate Grammar for KSP Script
# This file will be converted to out/ksp.tmGrammar.json
# Then the place holder <<...>> will be injected based on the *.csv files
name: KSP
scopeName: source.sksp
fileTypes:
  - ksp

patterns:
  - include: '#block_comment'
  - include: '#line_comment'
  - include: '#string'
  - include: '#number'
  - include: '#callback'
  - include: '#ui_callback'
  - include: '#function_definition'
  - include: '#function_call'
  - include: '#variable_declaration'
  - include: '#keywords'
  - include: '#operators'
  - include: '#arithmetic'
  - include: '#identifier'

repository:
  block_comment:
    patterns:
      - name: comment.block.sksp
        begin: '\{\{'
        end: '\}\}'
      - name: comment.block.sksp
        begin: '\{'
        end: '\}'
      - name: comment.block.sksp
        begin: '/\*'
        end: '\*/'
      - name: comment.block.sksp
        begin: '\(\*'
        end: '\*\)'

  line_comment:
    patterns:
      - name: comment.line.double-slash.sksp
        begin: '//'
        end: '$'

  string:
    patterns:
      - name: string.quoted.double.sksp
        match: '"(?:[^"\\]|\\.)*"'
      - name: string.quoted.single.sksp
        match: "(?:f)?'(?:[^'\\\\]|\\\\.)*'"

  number:
    patterns:
      - name: constant.numeric.sksp
        match: '(\s+-|(?<=[=,{}()\[\]])-)?((0x)[0-9a-fA-F]*|[0-9][0-9a-fA-F]*[hH]|b[01]+|[01]+b|(\d+\.\d+|\.\d+|\d+\.|\d+)([eE][+-]?\d+)?)\b'

  callback:
    patterns:
      - name: keyword.other.sksp entity.name.callback.sksp
        match: '(?x)\b(on\s+(async_complete|controller|init|listener|midi_in|note(_controller)?|(n)?rpn|release|persistence_changed|(_)?pgs_changed|poly_at|ui_(control(s)?|update))|on_pgs_changed|on_post_init|on_release)\b'
      - name: keyword.other.sksp
        match: '\b(end\s+on|end_on)\b'

  ui_callback:
    patterns:
      - name: entity.name.callback.sksp
        match: '(on\s+ui_control)\s*(\()\s*([$%@?]?[\w#.]+)\s*(\))'
        captures:
          1: keyword.other.sksp
          2: punctuation.sksp
          3: variable.sksp
          4: punctuation.sksp

  function_definition:
    patterns:
      - name: meta.function.sksp
        match: '((function|macro|taskfunc) +([\w.#]+)\s*)\(?'
        captures:
          1: meta.function.sksp
          2: keyword.other.sksp
          3: entity.name.function.sksp

  function_call:
    patterns:
      - name: meta.function-call.sksp
        match: '({{varchars}}*)\s*(\()'
        captures:
          1: meta.function-call.sksp meta.function-name
          2: meta.function-call.sksp punctuation.definition.arguments.begin.sksp

  variable_declaration:
    patterns:
      - name: constblock.sksp
        match: '^\s*(const +)({{varchars}}+)'
        captures:
          1: keyword.other.sksp
          2: entity.name.type.sksp
      - name: family.sksp
        match: '^\s*(family +)({{varchars}}+)'
        captures:
          1: keyword.other.sksp
          2: entity.name.type.sksp
      - name: list.sksp
        match: '^\s*(list +)({{varchars}}+)'
        captures:
          1: keyword.other.sksp
          2: entity.name.type.sksp
      - name: struct.sksp
        match: '^\s*(struct +)({{varchars}}+)'
        captures:
          1: keyword.other.sksp
          2: entity.name.type.sksp
      - name: variable.parameter.sksp
        match: '\#{1}{{varchars}}+\#{1}'

  keywords:
    patterns:
      - name: keyword.control.sksp
        match: '(?!#)\b(if|to|downto|else|for|while|select|case|continue)\b(?!#)'
      - name: keyword.other.sksp
        match: '(?!#)\b(struct|define|literals|on|(inst)?pers|read|list|call|step|function|taskfunc|macro|mod|declare|const|polyphonic|end|local|global|family|import|as|property|override|ui_(label|button|switch|slider|menu|value_edit|waveform|wavetable|knob|table|xy|text_edit|level_meter|file_selector|panel|mouse_area))\b(?!#)'

  operators:
    patterns:
      - name: keyword.operator.sksp
        match: '\band\b|\bor\b|\bxor\b|\bnot\b|[.]and[.]|[.]or[.]|[.]xor[.]|[.]not[.]'
      - name: operator.sksp
        match: '[:+]=|[=][+]|&|<=|>=|<|>|#|=|->|\.\.\.'

  arithmetic:
    patterns:
      - name: arithmetic.sksp
        match: "[-+*/]"

  identifier:
    patterns:
      - name: variable.sksp
        match: '(\b|[~?$%!@&]){{varchars}}+|\b\d+[A-Za-z_]\w*\b'

# Placeholders for variable substitution (to be replaced by your build process or manually)
variables:
  varchars: '[\w.]'
  builtin_consts_and_vars: '{{builtin_consts_and_vars}}'
  builtin_functions: '{{builtin_functions}}'
  builtin_param_shorthands: '{{builtin_param_shorthands}}'